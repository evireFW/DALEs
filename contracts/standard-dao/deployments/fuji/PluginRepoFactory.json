{
  "address": "0x06b317Aca2e3a2C76ef2AcAE2F90870a31DDD655",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract PluginRepoRegistry",
          "name": "_pluginRepoRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "name": "createPluginRepo",
      "outputs": [
        {
          "internalType": "contract PluginRepo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pluginSetup",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_maintainer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_releaseMetadata",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_buildMetadata",
          "type": "bytes"
        }
      ],
      "name": "createPluginRepoWithFirstVersion",
      "outputs": [
        {
          "internalType": "contract PluginRepo",
          "name": "pluginRepo",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pluginRepoBase",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pluginRepoRegistry",
      "outputs": [
        {
          "internalType": "contract PluginRepoRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc98f70e5dafaced549aabd804fa356e74259f12e83354bac50ed6440e526d52",
  "receipt": {
    "to": null,
    "from": "0x90ad449DEb987A1f34D5127751874E9BBD223F2f",
    "contractAddress": "0x06b317Aca2e3a2C76ef2AcAE2F90870a31DDD655",
    "transactionIndex": 0,
    "gasUsed": "5453148",
    "logsBloom": "0x
    "blockHash": "0xb834e03b7f692a96df23da8e623bed6d283341cbdb33a7cbf19607485984925c",
    "transactionHash": "0xdc98f70e5dafaced549aabd804fa356e74259f12e83354bac50ed6440e526d52",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30726862,
        "transactionHash": "0xdc98f70e5dafaced549aabd804fa356e74259f12e83354bac50ed6440e526d52",
        "address": "0x28BD2e981966cd0C47c6b6C8bbc6a00b92e6185F",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xb834e03b7f692a96df23da8e623bed6d283341cbdb33a7cbf19607485984925c"
      }
    ],
    "blockNumber": 30726862,
    "cumulativeGasUsed": "5453148",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x565773023043b23C1c12D5fac68Ce8B5F219Bcc0"
  ],
  "numDeployments": 1,
  "solcInputHash": "e6bc01d92bab71efcefef890cc670c13",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract PluginRepoRegistry\",\"name\":\"_pluginRepoRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"name\":\"createPluginRepo\",\"outputs\":[{\"internalType\":\"contract PluginRepo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pluginSetup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_maintainer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_releaseMetadata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_buildMetadata\",\"type\":\"bytes\"}],\"name\":\"createPluginRepoWithFirstVersion\",\"outputs\":[{\"internalType\":\"contract PluginRepo\",\"name\":\"pluginRepo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pluginRepoBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pluginRepoRegistry\",\"outputs\":[{\"internalType\":\"contract PluginRepoRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_pluginRepoRegistry\":\"The plugin registry address.\"}},\"createPluginRepo(address)\":{\"params\":{\"_initialOwner\":\"The plugin maintainer address.\"}},\"createPluginRepoWithFirstVersion(address,address,bytes,bytes)\":{\"details\":\"After the creation of the `PluginRepo` and release of the first version by the factory, ownership is transferred to the `_maintainer` address.\",\"params\":{\"_buildMetadata\":\"The build metadata URI.\",\"_maintainer\":\"The maintainer of the plugin repo. This address has permission to update metadata, upgrade the repo logic, and manage the repo permissions.\",\"_pluginSetup\":\"The plugin factory contract associated with the plugin version.\",\"_releaseMetadata\":\"The release metadata URI.\"}}},\"title\":\"PluginRepoFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the addresses of the `PluginRepo` base contract to proxy to.\"},\"createPluginRepo(address)\":{\"notice\":\"Creates a plugin repository proxy pointing to the `pluginRepoBase` implementation.\"},\"createPluginRepoWithFirstVersion(address,address,bytes,bytes)\":{\"notice\":\"Creates a `PluginRepo` and publishes an initial version `1.0`.\"},\"pluginRepoBase()\":{\"notice\":\"The address of the `PluginRepo` base contract.\"},\"pluginRepoRegistry()\":{\"notice\":\"The plugin registry contract.\"}},\"notice\":\"This contract creates `PluginRepo` proxies and registers them on an `PluginRepoRegistry` contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factory/plugin/repo/PluginRepoFactory.sol\":\"PluginRepoFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x7493c62dd0335284327a6cce7bd29aaa47bebb761e4e01ab4b031563f977bc32\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title IDAO\\n/// @notice The interface required for DAOs\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If no failure map is provided, one failing action results in the entire excution to be reverted. If a non-zero failure map is provided, allowed actions can fail without the remaining actions being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The constructed failureMap which contains which actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external;\\n}\",\"keccak256\":\"0xd5b4cb2fab92eb9953f41ea15be8b857a484d1f10b6b219c94ed3fa89c482e41\",\"license\":\"MIT\"},\"contracts/core/permission/IPermissionCondition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title IPermissionCondition\\n/// @notice This interface can be implemented to support more customary permissions depending on on- or off-chain state, e.g., by querying token ownership or a secondary condition, respectively.\\ninterface IPermissionCondition {\\n    /// @notice This method is used to check if a call is permitted.\\n    /// @param _where The address of the target contract.\\n    /// @param _who The address (EOA or contract) for which the permission are checked.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data Optional data passed to the `PermissionCondition` implementation.\\n    /// @return allowed Returns true if the call is permitted.\\n    function isGranted(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes calldata _data\\n    ) external view returns (bool allowed);\\n}\",\"keccak256\":\"0x63e728afbb589ce6241f73540acb95cf32bbddfd9fdadf1f8d2e141778d49c19\",\"license\":\"MIT\"},\"contracts/core/permission/PermissionLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title PermissionLib\\n/// @notice A library containing objects for permission processing.\\nlibrary PermissionLib {\\n    /// @notice A constant expressing that no condition is applied to a permission.\\n    address public constant NO_CONDITION = address(0);\\n\\n    /// @notice The types of permission operations available in the `PermissionManager`.\\n    /// @param Grant The grant operation setting a permission without a condition.\\n    /// @param Revoke The revoke operation removing a permission (that was granted with or without a condition).\\n    /// @param GrantWithCondition The grant operation setting a permission with a condition.\\n    enum Operation {\\n        Grant,\\n        Revoke,\\n        GrantWithCondition\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on a single target contract without a condition.\\n    /// @param operation The permission operation type.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param permissionId The permission identifier.\\n    struct SingleTargetPermission {\\n        Operation operation;\\n        address who;\\n        bytes32 permissionId;\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on multiple target contracts, optionally, with a conditon.\\n    /// @param operation The permission operation type.\\n    /// @param where The address of the target contract for which `who` recieves permission.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\\n    /// @param permissionId The permission identifier.\\n    struct MultiTargetPermission {\\n        Operation operation;\\n        address where;\\n        address who;\\n        address condition;\\n        bytes32 permissionId;\\n    }\\n}\",\"keccak256\":\"0x31335c9b3ab11e985b996ad3f2548890d2b3b08c72bb92cba19c7c94bdcf6d05\",\"license\":\"MIT\"},\"contracts/core/permission/PermissionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./IPermissionCondition.sol\\\";\\nimport \\\"./PermissionLib.sol\\\";\\n\\n/// @title PermissionManager\\n/// @notice The abstract permission manager used in a DAO.\\nabstract contract PermissionManager is Initializable {\\n    /// @notice The ID of the permission required to call the `grant`, `grantWithCondition`, `revoke`, and `bulk` function.\\n    bytes32 public constant ROOT_PERMISSION_ID = keccak256(\\\"ROOT_PERMISSION\\\");\\n\\n    /// @notice A special address encoding permissions that are valid for any address `who` or `where`.\\n    address internal constant ANY_ADDR = address(type(uint160).max);\\n\\n    /// @notice A special address encoding if a permissions is not set and therefore not allowed.\\n    address internal constant UNSET_FLAG = address(0);\\n\\n    /// @notice A special address encoding if a permission is allowed.\\n    address internal constant ALLOW_FLAG = address(2);\\n\\n    /// @notice A mapping storing permissions as hashes (i.e., `permissionHash(where, who, permissionId)`) and their status encoded by an address (unset, allowed, or redirecting to a `PermissionCondition`).\\n    mapping(bytes32 => address) internal permissionsHashed;\\n\\n    /// @notice Thrown if a call is unauthorized.\\n    /// @param where The context in which the authorization reverted.\\n    /// @param who The address (EOA or contract) missing the permission.\\n    /// @param permissionId The permission identifier.\\n    error Unauthorized(address where, address who, bytes32 permissionId);\\n\\n    /// @notice Thrown if a permission has been already granted with a different condition.\\n    /// @dev This makes sure that condition on the same permission can not be overwriten by a different condition.\\n    /// @param where The address of the target contract to grant `_who` permission to.\\n    /// @param who The address (EOA or contract) to which the permission has already been granted.\\n    /// @param permissionId The permission identifier.\\n    /// @param currentCondition The current condition set for permissionId.\\n    /// @param newCondition The new condition it tries to set for permissionId.\\n    error PermissionAlreadyGrantedForDifferentCondition(\\n        address where,\\n        address who,\\n        bytes32 permissionId,\\n        address currentCondition,\\n        address newCondition\\n    );\\n\\n    /// @notice Thrown for permission grants where `who` or `where` is `ANY_ADDR`, but no condition is present.\\n    error ConditionNotPresentForAnyAddress();\\n\\n    /// @notice Thrown for `ROOT_PERMISSION_ID` or `EXECUTE_PERMISSION_ID` permission grants where `who` or `where` is `ANY_ADDR`.\\n    error PermissionsForAnyAddressDisallowed();\\n\\n    /// @notice Thrown for permission grants where `who` and `where` are both `ANY_ADDR`.\\n    error AnyAddressDisallowedForWhoAndWhere();\\n\\n    /// @notice Emitted when a permission `permission` is granted in the context `here` to the address `_who` for the contract `_where`.\\n    /// @param permissionId The permission identifier.\\n    /// @param here The address of the context in which the permission is granted.\\n    /// @param where The address of the target contract for which `_who` receives permission.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param condition The address `ALLOW_FLAG` for regular permissions or, alternatively, the `PermissionCondition` to be used.\\n    event Granted(\\n        bytes32 indexed permissionId,\\n        address indexed here,\\n        address where,\\n        address indexed who,\\n        IPermissionCondition condition\\n    );\\n\\n    /// @notice Emitted when a permission `permission` is revoked in the context `here` from the address `_who` for the contract `_where`.\\n    /// @param permissionId The permission identifier.\\n    /// @param here The address of the context in which the permission is revoked.\\n    /// @param where The address of the target contract for which `_who` loses permission.\\n    /// @param who The address (EOA or contract) losing the permission.\\n    event Revoked(\\n        bytes32 indexed permissionId,\\n        address indexed here,\\n        address where,\\n        address indexed who\\n    );\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through this permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(_permissionId);\\n        _;\\n    }\\n\\n    /// @notice Initialization method to set the initial owner of the permission manager.\\n    /// @dev The initial owner is granted the `ROOT_PERMISSION_ID` permission.\\n    /// @param _initialOwner The initial owner of the permission manager.\\n    function __PermissionManager_init(address _initialOwner) internal onlyInitializing {\\n        _initializePermissionManager(_initialOwner);\\n    }\\n\\n    /// @notice Grants permission to an address to call methods in a contract guarded by an auth modifier with the specified permission identifier.\\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) receiving the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function grant(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        _grant(_where, _who, _permissionId);\\n    }\\n\\n    /// @notice Grants permission to an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier if the referenced condition permits it.\\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) receiving the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function grantWithCondition(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        IPermissionCondition _condition\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        _grantWithCondition(_where, _who, _permissionId, _condition);\\n    }\\n\\n    /// @notice Revokes permission from an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier.\\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission.\\n    /// @param _where The address of the target contract for which `_who` loses permission.\\n    /// @param _who The address (EOA or contract) losing the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @dev Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function revoke(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        _revoke(_where, _who, _permissionId);\\n    }\\n\\n    /// @notice Applies an array of permission operations on a single target contracts `_where`.\\n    /// @param _where The address of the single target contract.\\n    /// @param items The array of single-targeted permission operations to apply.\\n    function applySingleTargetPermissions(\\n        address _where,\\n        PermissionLib.SingleTargetPermission[] calldata items\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        for (uint256 i; i < items.length; ) {\\n            PermissionLib.SingleTargetPermission memory item = items[i];\\n\\n            if (item.operation == PermissionLib.Operation.Grant) {\\n                _grant(_where, item.who, item.permissionId);\\n            } else if (item.operation == PermissionLib.Operation.Revoke) {\\n                _revoke(_where, item.who, item.permissionId);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Applies an array of permission operations on multiple target contracts `items[i].where`.\\n    /// @param _items The array of multi-targeted permission operations to apply.\\n    function applyMultiTargetPermissions(\\n        PermissionLib.MultiTargetPermission[] calldata _items\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        for (uint256 i; i < _items.length; ) {\\n            PermissionLib.MultiTargetPermission memory item = _items[i];\\n\\n            if (item.operation == PermissionLib.Operation.Grant) {\\n                _grant(item.where, item.who, item.permissionId);\\n            } else if (item.operation == PermissionLib.Operation.Revoke) {\\n                _revoke(item.where, item.who, item.permissionId);\\n            } else if (item.operation == PermissionLib.Operation.GrantWithCondition) {\\n                _grantWithCondition(\\n                    item.where,\\n                    item.who,\\n                    item.permissionId,\\n                    IPermissionCondition(item.condition)\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) for which the permission is checked.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if `_who` has the permissions on the target contract via the specified permission identifier.\\n    function isGranted(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) public view virtual returns (bool) {\\n        return\\n            _isGranted(_where, _who, _permissionId, _data) || // check if `_who` has permission for `_permissionId` on `_where`\\n            _isGranted(_where, ANY_ADDR, _permissionId, _data) || // check if anyone has permission for `_permissionId` on `_where`\\n            _isGranted(ANY_ADDR, _who, _permissionId, _data); // check if `_who` has permission for `_permissionI` on any contract\\n    }\\n\\n    /// @notice Grants the `ROOT_PERMISSION_ID` permission to the initial owner during initialization of the permission manager.\\n    /// @param _initialOwner The initial owner of the permission manager.\\n    function _initializePermissionManager(address _initialOwner) internal {\\n        _grant(address(this), _initialOwner, ROOT_PERMISSION_ID);\\n    }\\n\\n    /// @notice This method is used in the public `grant` method of the permission manager.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    function _grant(address _where, address _who, bytes32 _permissionId) internal virtual {\\n        _grantWithCondition(_where, _who, _permissionId, IPermissionCondition(ALLOW_FLAG));\\n    }\\n\\n    /// @notice This method is used in the internal `_grant` method of the permission manager.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _condition An address either resolving to a `PermissionCondition` contract address or being the `ALLOW_FLAG` address (`address(2)`).\\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function _grantWithCondition(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        IPermissionCondition _condition\\n    ) internal virtual {\\n        if (_where == ANY_ADDR && _who == ANY_ADDR) {\\n            revert AnyAddressDisallowedForWhoAndWhere();\\n        }\\n\\n        if (_where == ANY_ADDR || _who == ANY_ADDR) {\\n            bool isRestricted = isPermissionRestrictedForAnyAddr(_permissionId);\\n            if (_permissionId == ROOT_PERMISSION_ID || isRestricted) {\\n                revert PermissionsForAnyAddressDisallowed();\\n            }\\n\\n            if (address(_condition) == ALLOW_FLAG) {\\n                revert ConditionNotPresentForAnyAddress();\\n            }\\n        }\\n\\n        bytes32 permHash = permissionHash(_where, _who, _permissionId);\\n\\n        address currentCondition = permissionsHashed[permHash];\\n        address newCondition = address(_condition);\\n\\n        // Means permHash is not currently set.\\n        if (currentCondition == UNSET_FLAG) {\\n            permissionsHashed[permHash] = newCondition;\\n\\n            emit Granted(_permissionId, msg.sender, _where, _who, _condition);\\n        } else if (currentCondition != newCondition) {\\n            // Revert if `permHash` is already granted, but uses a different condition.\\n            // If we don't revert, we either should:\\n            //   - allow overriding the condition on the same permission\\n            //     which could be confusing whoever granted the same permission first\\n            //   - or do nothing and succeed silently which could be confusing for the caller.\\n            revert PermissionAlreadyGrantedForDifferentCondition({\\n                where: _where,\\n                who: _who,\\n                permissionId: _permissionId,\\n                currentCondition: currentCondition,\\n                newCondition: newCondition\\n            });\\n        }\\n    }\\n\\n    /// @notice This method is used in the public `revoke` method of the permission manager.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @dev Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that might have been granted in parallel.\\n    function _revoke(address _where, address _who, bytes32 _permissionId) internal virtual {\\n        bytes32 permHash = permissionHash(_where, _who, _permissionId);\\n        if (permissionsHashed[permHash] != UNSET_FLAG) {\\n            permissionsHashed[permHash] = UNSET_FLAG;\\n\\n            emit Revoked(_permissionId, msg.sender, _where, _who);\\n        }\\n    }\\n\\n    /// @notice Checks if a caller is granted permissions on a target contract via a permission identifier and redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if `_who` has the permissions on the contract via the specified permissionId identifier.\\n    function _isGranted(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) internal view virtual returns (bool) {\\n        address accessFlagOrCondition = permissionsHashed[\\n            permissionHash(_where, _who, _permissionId)\\n        ];\\n\\n        if (accessFlagOrCondition == UNSET_FLAG) return false;\\n        if (accessFlagOrCondition == ALLOW_FLAG) return true;\\n\\n        // Since it's not a flag, assume it's a PermissionCondition and try-catch to skip failures\\n        try\\n            IPermissionCondition(accessFlagOrCondition).isGranted(\\n                _where,\\n                _who,\\n                _permissionId,\\n                _data\\n            )\\n        returns (bool allowed) {\\n            if (allowed) return true;\\n        } catch {}\\n\\n        return false;\\n    }\\n\\n    /// @notice A private function to be used to check permissions on the permission manager contract (`address(this)`) itself.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    function _auth(bytes32 _permissionId) internal view virtual {\\n        if (!isGranted(address(this), msg.sender, _permissionId, msg.data)) {\\n            revert Unauthorized({\\n                where: address(this),\\n                who: msg.sender,\\n                permissionId: _permissionId\\n            });\\n        }\\n    }\\n\\n    /// @notice Generates the hash for the `permissionsHashed` mapping obtained from the word \\\"PERMISSION\\\", the contract address, the address owning the permission, and the permission identifier.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @return The permission hash.\\n    function permissionHash(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId\\n    ) internal pure virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PERMISSION\\\", _who, _where, _permissionId));\\n    }\\n\\n    /// @notice Decides if the granting permissionId is restricted when `_who = ANY_ADDR` or `_where = ANY_ADDR`.\\n    /// @param _permissionId The permission identifier.\\n    /// @return Whether or not the permission is restricted.\\n    /// @dev By default, every permission is unrestricted and it is the derived contract's responsibility to override it. Note, that the `ROOT_PERMISSION_ID` is included not required to be set it again.\\n    function isPermissionRestrictedForAnyAddr(\\n        bytes32 _permissionId\\n    ) internal view virtual returns (bool) {\\n        (_permissionId); // silence the warning.\\n        return false;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0x69b2d8ae34bc058f47f8eb2d142d703fd16c44bbeac203bdef55b6ee552e315d\",\"license\":\"MIT\"},\"contracts/core/plugin/dao-authorizable/DaoAuthorizableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport {IDAO} from \\\"../../dao/IDAO.sol\\\";\\nimport {_auth} from \\\"../../utils/auth.sol\\\";\\n\\n/// @title DaoAuthorizableUpgradeable\\n/// @notice An abstract contract providing a meta-transaction compatible modifier for upgradeable or cloneable contracts to authorize function calls through an associated DAO.\\n/// @dev Make sure to call `__DaoAuthorizableUpgradeable_init` during initialization of the inheriting contract.\\nabstract contract DaoAuthorizableUpgradeable is ContextUpgradeable {\\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\\n    IDAO private dao_;\\n\\n    /// @notice Initializes the contract by setting the associated DAO.\\n    /// @param _dao The associated DAO address.\\n    function __DaoAuthorizableUpgradeable_init(IDAO _dao) internal onlyInitializing {\\n        dao_ = _dao;\\n    }\\n\\n    /// @notice Returns the DAO contract.\\n    /// @return The DAO contract.\\n    function dao() public view returns (IDAO) {\\n        return dao_;\\n    }\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(dao_, address(this), _msgSender(), _permissionId, _msgData());\\n        _;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xfc415402e3033a844f8ea360accfd96b9e4f3d7b7800bb6df2f165ce2a7a44ff\",\"license\":\"MIT\"},\"contracts/core/utils/auth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\n\\n/// @notice Thrown if a call is unauthorized in the associated DAO.\\n/// @param dao The associated DAO.\\n/// @param where The context in which the authorization reverted.\\n/// @param who The address (EOA or contract) missing the permission.\\n/// @param permissionId The permission identifier.\\nerror DaoUnauthorized(address dao, address where, address who, bytes32 permissionId);\\n\\n/// @notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n/// @param _where The address of the target contract for which `who` recieves permission.\\n/// @param _who The address (EOA or contract) owning the permission.\\n/// @param _permissionId The permission identifier.\\n/// @param _data The optional data passed to the `PermissionCondition` registered.\\nfunction _auth(\\n    IDAO _dao,\\n    address _where,\\n    address _who,\\n    bytes32 _permissionId,\\n    bytes calldata _data\\n) view {\\n    if (!_dao.hasPermission(_where, _who, _permissionId, _data))\\n        revert DaoUnauthorized({\\n            dao: address(_dao),\\n            where: _where,\\n            who: _who,\\n            permissionId: _permissionId\\n        });\\n}\",\"keccak256\":\"0x77c5843f04142cf8143abacadb96776550e9110aaa9bb5bbf2bde61e14f8c0d5\",\"license\":\"MIT\"},\"contracts/factory/plugin/repo/IPluginRepo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title IPluginRepo\\n/// @notice The interface required for a plugin repository.\\ninterface IPluginRepo {\\n    /// @notice Update the metadata for release with content `@fromHex(_releaseMetadata)`.\\n    /// @param _release The release number.\\n    /// @param _releaseMetadata The release metadata URI.\\n    function updateReleaseMetadata(uint8 _release, bytes calldata _releaseMetadata) external;\\n\\n    /// @notice Creates a new plugin version as the latest build for an existing release number or the first build for a new release number for the provided `PluginSetup` contract address and metadata.\\n    /// @param _release The release number.\\n    /// @param _pluginSetupAddress The address of the plugin setup contract.\\n    /// @param _buildMetadata The build metadata URI.\\n    /// @param _releaseMetadata The release metadata URI.\\n    function createVersion(\\n        uint8 _release,\\n        address _pluginSetupAddress,\\n        bytes calldata _buildMetadata,\\n        bytes calldata _releaseMetadata\\n    ) external;\\n}\",\"keccak256\":\"0x04c7a490dd9f81b9de0b1c314a3ab8f18996cf32a63faf29f147a0efd24437f1\",\"license\":\"MIT\"},\"contracts/factory/plugin/repo/PluginRepo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {ERC165CheckerUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\\\";\\n\\nimport {PermissionManager} from \\\"../../../core/permission/PermissionManager.sol\\\";\\nimport {PluginSetup} from \\\"../setup/PluginSetup.sol\\\";\\nimport {IPluginSetup} from \\\"../setup/PluginSetup.sol\\\";\\nimport {IPluginRepo} from \\\"./IPluginRepo.sol\\\";\\n\\n/// @title PluginRepo\\n/// @notice The plugin repository contract required for managing and publishing different plugin versions.\\ncontract PluginRepo is\\n    Initializable,\\n    ERC165Upgradeable,\\n    IPluginRepo,\\n    UUPSUpgradeable,\\n    PermissionManager\\n{\\n    using AddressUpgradeable for address;\\n    using ERC165CheckerUpgradeable for address;\\n\\n    /// @notice The struct describing the tag of a version obtained by a release and build number as `RELEASE.BUILD`.\\n    /// @param release The release number.\\n    /// @param build The build number\\n    /// @dev Releases can include a storage layout or the addition of new functions. Builds include logic changes or updates of the UI.\\n    struct Tag {\\n        uint8 release;\\n        uint16 build;\\n    }\\n\\n    /// @notice The struct describing a plugin version (release and build).\\n    /// @param tag The version tag.\\n    /// @param pluginSetup The setup contract associated with this version.\\n    /// @param buildMetadata The build metadata URI.\\n    struct Version {\\n        Tag tag;\\n        address pluginSetup;\\n        bytes buildMetadata;\\n    }\\n\\n    /// @notice The ID of the permission required to call the `createVersion` function.\\n    bytes32 public constant MAINTAINER_PERMISSION_ID = keccak256(\\\"MAINTAINER_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `createVersion` function.\\n    bytes32 public constant UPGRADE_REPO_PERMISSION_ID = keccak256(\\\"UPGRADE_REPO_PERMISSION\\\");\\n\\n    /// @notice The mapping between release and build numbers.\\n    mapping(uint8 => uint16) internal buildsPerRelease;\\n\\n    /// @notice The mapping between the version hash and the corresponding version information.\\n    mapping(bytes32 => Version) internal versions;\\n\\n    /// @notice The mapping between the plugin setup address and its corresponding version hash.\\n    mapping(address => bytes32) internal latestTagHashForPluginSetup;\\n\\n    /// @notice The ID of the latest release.\\n    /// @dev The maximum release number is 255.\\n    uint8 public latestRelease;\\n\\n    /// @notice Thrown if a version does not exist.\\n    /// @param versionHash The tag hash.\\n    error VersionHashDoesNotExist(bytes32 versionHash);\\n\\n    /// @notice Thrown if a plugin setup contract does not inherit from `PluginSetup`.\\n    error InvalidPluginSetupInterface();\\n\\n    /// @notice Thrown if a release number is zero.\\n    error ReleaseZeroNotAllowed();\\n\\n    /// @notice Thrown if a release number is incremented by more than one.\\n    /// @param latestRelease The latest release number.\\n    /// @param newRelease The new release number.\\n    error InvalidReleaseIncrement(uint8 latestRelease, uint8 newRelease);\\n\\n    /// @notice Thrown if the same plugin setup contract exists already in a previous releases.\\n    /// @param release The release number of the already existing plugin setup.\\n    /// @param build The build number of the already existing plugin setup.\\n    /// @param pluginSetup The plugin setup contract address.\\n    error PluginSetupAlreadyInPreviousRelease(uint8 release, uint16 build, address pluginSetup);\\n\\n    /// @notice Thrown if the metadata URI is empty.\\n    error EmptyReleaseMetadata();\\n\\n    /// @notice Thrown if release does not exist.\\n    error ReleaseDoesNotExist();\\n\\n    /// @notice Thrown if the same plugin setup exists in previous releases.\\n    /// @param release The release number.\\n    /// @param build The build number.\\n    /// @param pluginSetup The address of the plugin setup contract.\\n    /// @param buildMetadata The build metadata URI.\\n    event VersionCreated(\\n        uint8 release,\\n        uint16 build,\\n        address indexed pluginSetup,\\n        bytes buildMetadata\\n    );\\n\\n    /// @notice Thrown when a release's metadata was updated.\\n    /// @param release The release number.\\n    /// @param releaseMetadata The release metadata URI.\\n    event ReleaseMetadataUpdated(uint8 release, bytes releaseMetadata);\\n\\n    /// @dev Used to disallow initializing the implementation contract by an attacker for extra safety.\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract by\\n    /// - initializing the permission manager\\n    /// - granting the `MAINTAINER_PERMISSION_ID` permission to the initial owner.\\n    /// @dev This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).\\n    function initialize(address initialOwner) external initializer {\\n        __PermissionManager_init(initialOwner);\\n\\n        _grant(address(this), initialOwner, MAINTAINER_PERMISSION_ID);\\n        _grant(address(this), initialOwner, UPGRADE_REPO_PERMISSION_ID);\\n    }\\n\\n    /// @inheritdoc IPluginRepo\\n    function createVersion(\\n        uint8 _release,\\n        address _pluginSetup,\\n        bytes calldata _buildMetadata,\\n        bytes calldata _releaseMetadata\\n    ) external auth(MAINTAINER_PERMISSION_ID) {\\n        if (!_pluginSetup.supportsInterface(type(IPluginSetup).interfaceId)) {\\n            revert InvalidPluginSetupInterface();\\n        }\\n\\n        if (_release == 0) {\\n            revert ReleaseZeroNotAllowed();\\n        }\\n\\n        // Check that the release number is not incremented by more than one\\n        if (_release - latestRelease > 1) {\\n            revert InvalidReleaseIncrement({latestRelease: latestRelease, newRelease: _release});\\n        }\\n\\n        if (_release > latestRelease) {\\n            latestRelease = _release;\\n\\n            if (_releaseMetadata.length == 0) {\\n                revert EmptyReleaseMetadata();\\n            }\\n        }\\n\\n        // Make sure the same plugin setup wasn't used in previous releases.\\n        Version storage version = versions[latestTagHashForPluginSetup[_pluginSetup]];\\n        if (version.tag.release != 0 && version.tag.release != _release) {\\n            revert PluginSetupAlreadyInPreviousRelease(\\n                version.tag.release,\\n                version.tag.build,\\n                _pluginSetup\\n            );\\n        }\\n\\n        uint16 build = ++buildsPerRelease[_release];\\n\\n        Tag memory tag = Tag(_release, build);\\n        bytes32 _tagHash = tagHash(tag);\\n\\n        versions[_tagHash] = Version(tag, _pluginSetup, _buildMetadata);\\n\\n        latestTagHashForPluginSetup[_pluginSetup] = _tagHash;\\n\\n        emit VersionCreated({\\n            release: _release,\\n            build: build,\\n            pluginSetup: _pluginSetup,\\n            buildMetadata: _buildMetadata\\n        });\\n\\n        if (_releaseMetadata.length > 0) {\\n            emit ReleaseMetadataUpdated(_release, _releaseMetadata);\\n        }\\n    }\\n\\n    /// @inheritdoc IPluginRepo\\n    function updateReleaseMetadata(\\n        uint8 _release,\\n        bytes calldata _releaseMetadata\\n    ) external auth(MAINTAINER_PERMISSION_ID) {\\n        if (_release == 0) {\\n            revert ReleaseZeroNotAllowed();\\n        }\\n\\n        if (_release > latestRelease) {\\n            revert ReleaseDoesNotExist();\\n        }\\n\\n        if (_releaseMetadata.length == 0) {\\n            revert EmptyReleaseMetadata();\\n        }\\n\\n        emit ReleaseMetadataUpdated(_release, _releaseMetadata);\\n    }\\n\\n    /// @notice Returns the latest version for a given release number.\\n    /// @param _release The release number.\\n    /// @return The latest version of this release.\\n    function getLatestVersion(uint8 _release) public view returns (Version memory) {\\n        uint16 latestBuild = uint16(buildsPerRelease[_release]);\\n        return getVersion(tagHash(Tag(_release, latestBuild)));\\n    }\\n\\n    /// @notice Returns the latest version for a given plugin setup.\\n    /// @param _pluginSetup The plugin setup address\\n    /// @return The latest version associated with the plugin Setup.\\n    function getLatestVersion(address _pluginSetup) public view returns (Version memory) {\\n        return getVersion(latestTagHashForPluginSetup[_pluginSetup]);\\n    }\\n\\n    /// @notice Returns the version associated with a tag.\\n    /// @param _tag The version tag.\\n    /// @return The version associated with the tag.\\n    function getVersion(Tag calldata _tag) public view returns (Version memory) {\\n        return getVersion(tagHash(_tag));\\n    }\\n\\n    /// @notice Returns the version for a tag hash.\\n    /// @param _tagHash The tag hash.\\n    /// @return The version associated with a tag hash.\\n    function getVersion(bytes32 _tagHash) public view returns (Version memory) {\\n        Version storage version = versions[_tagHash];\\n\\n        if (version.tag.release == 0) {\\n            revert VersionHashDoesNotExist(_tagHash);\\n        }\\n\\n        return version;\\n    }\\n\\n    /// @notice Gets the total number of builds for a given release number.\\n    /// @param _release The release number.\\n    /// @return The number of builds of this release.\\n    function buildCount(uint8 _release) public view returns (uint256) {\\n        return buildsPerRelease[_release];\\n    }\\n\\n    /// @notice The hash of the version tag obtained from the packed, bytes-encoded release and build number.\\n    /// @param _tag The version tag.\\n    /// @return The version tag hash.\\n    function tagHash(Tag memory _tag) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_tag.release, _tag.build));\\n    }\\n\\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeabilty mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    /// @dev The caller must have the `UPGRADE_REPO_PERMISSION_ID` permission.\\n    function _authorizeUpgrade(\\n        address\\n    ) internal virtual override auth(UPGRADE_REPO_PERMISSION_ID) {}\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IPluginRepo).interfaceId ||\\n            _interfaceId == type(UUPSUpgradeable).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n}\",\"keccak256\":\"0x2ffffadab927b4bc561bd5039d552564e404ab71807647b4148eaa2e0452994d\",\"license\":\"MIT\"},\"contracts/factory/plugin/repo/PluginRepoFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {PermissionLib} from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport {createERC1967Proxy} from \\\"../../../utils/Proxy.sol\\\";\\nimport {PluginRepoRegistry} from \\\"./PluginRepoRegistry.sol\\\";\\nimport {PluginRepo} from \\\"./PluginRepo.sol\\\";\\n\\n/// @title PluginRepoFactory\\n/// @notice This contract creates `PluginRepo` proxies and registers them on an `PluginRepoRegistry` contract.\\ncontract PluginRepoFactory {\\n    /// @notice The plugin registry contract.\\n    PluginRepoRegistry public pluginRepoRegistry;\\n\\n    /// @notice The address of the `PluginRepo` base contract.\\n    address public pluginRepoBase;\\n\\n    /// @notice Initializes the addresses of the `PluginRepo` base contract to proxy to.\\n    /// @param _pluginRepoRegistry The plugin registry address.\\n    constructor(PluginRepoRegistry _pluginRepoRegistry) {\\n        pluginRepoRegistry = _pluginRepoRegistry;\\n        pluginRepoBase = address(new PluginRepo());\\n    }\\n\\n    /// @notice Creates a plugin repository proxy pointing to the `pluginRepoBase` implementation.\\n    /// @param _initialOwner The plugin maintainer address.\\n    function createPluginRepo(\\n        address _initialOwner\\n    ) external returns (PluginRepo) {\\n        return _createPluginRepo(_initialOwner);\\n    }\\n\\n    /// @notice Creates a `PluginRepo` and publishes an initial version `1.0`.\\n    /// @param _pluginSetup The plugin factory contract associated with the plugin version.\\n    /// @param _maintainer The maintainer of the plugin repo. This address has permission to update metadata, upgrade the repo logic, and manage the repo permissions.\\n    /// @param _releaseMetadata The release metadata URI.\\n    /// @param _buildMetadata The build metadata URI.\\n    /// @dev After the creation of the `PluginRepo` and release of the first version by the factory, ownership is transferred to the `_maintainer` address.\\n    function createPluginRepoWithFirstVersion(\\n        address _pluginSetup,\\n        address _maintainer,\\n        bytes memory _releaseMetadata,\\n        bytes memory _buildMetadata\\n    ) external returns (PluginRepo pluginRepo) {\\n        // Sets `address(this)` as initial owner which is later replaced with the maintainer address.\\n        pluginRepo = _createPluginRepo(address(this));\\n\\n        pluginRepo.createVersion(1, _pluginSetup, _buildMetadata, _releaseMetadata);\\n\\n        // Setup permissions and transfer ownership from `address(this)` to `_maintainer`.\\n        _setPluginRepoPermissions(pluginRepo, _maintainer);\\n    }\\n\\n    /// @notice Set the final permissions for the published plugin repository maintainer. All permissions are revoked from the plugin factory and granted to the specified plugin maintainer.\\n    /// @param pluginRepo The plugin repository instance just created.\\n    /// @param maintainer The plugin maintainer address.\\n    /// @dev The plugin maintainer is granted the `MAINTAINER_PERMISSION_ID`, `UPGRADE_REPO_PERMISSION_ID`, and `ROOT_PERMISSION_ID`.\\n    function _setPluginRepoPermissions(PluginRepo pluginRepo, address maintainer) internal {\\n        // Set permissions on the `PluginRepo`s `PermissionManager`\\n        PermissionLib.SingleTargetPermission[]\\n            memory items = new PermissionLib.SingleTargetPermission[](6);\\n\\n        bytes32 rootPermissionID = pluginRepo.ROOT_PERMISSION_ID();\\n        bytes32 maintainerPermissionID = pluginRepo.MAINTAINER_PERMISSION_ID();\\n        bytes32 upgradePermissionID = pluginRepo.UPGRADE_REPO_PERMISSION_ID();\\n\\n        // Grant the plugin maintainer all the permissions required\\n        items[0] = PermissionLib.SingleTargetPermission(\\n            PermissionLib.Operation.Grant,\\n            maintainer,\\n            maintainerPermissionID\\n        );\\n        items[1] = PermissionLib.SingleTargetPermission(\\n            PermissionLib.Operation.Grant,\\n            maintainer,\\n            upgradePermissionID\\n        );\\n        items[2] = PermissionLib.SingleTargetPermission(\\n            PermissionLib.Operation.Grant,\\n            maintainer,\\n            rootPermissionID\\n        );\\n\\n        // Revoke permissions from the plugin repository factory (`address(this)`).\\n        items[3] = PermissionLib.SingleTargetPermission(\\n            PermissionLib.Operation.Revoke,\\n            address(this),\\n            rootPermissionID\\n        );\\n        items[4] = PermissionLib.SingleTargetPermission(\\n            PermissionLib.Operation.Revoke,\\n            address(this),\\n            maintainerPermissionID\\n        );\\n        items[5] = PermissionLib.SingleTargetPermission(\\n            PermissionLib.Operation.Revoke,\\n            address(this),\\n            upgradePermissionID\\n        );\\n\\n        pluginRepo.applySingleTargetPermissions(address(pluginRepo), items);\\n    }\\n\\n    /// @notice Internal method creating a `PluginRepo` via the [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy pattern from the provided base contract.\\n    /// @param _initialOwner The initial owner address.\\n    function _createPluginRepo(\\n        address _initialOwner\\n    ) internal returns (PluginRepo pluginRepo) {\\n        pluginRepo = PluginRepo(\\n            createERC1967Proxy(\\n                pluginRepoBase,\\n                abi.encodeWithSelector(PluginRepo.initialize.selector, _initialOwner)\\n            )\\n        );\\n\\n        pluginRepoRegistry.registerPluginRepo(address(pluginRepo));\\n    }\\n}\",\"keccak256\":\"0x01093d27fe429cbd4903f543ebd466a2c4a45919bfc69caf4226d88795c604e5\",\"license\":\"MIT\"},\"contracts/factory/plugin/repo/PluginRepoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {IDAO} from \\\"../../../core/dao/IDAO.sol\\\";\\nimport {InterfaceBasedRegistry} from \\\"../../utils/InterfaceBasedRegistry.sol\\\";\\nimport {IPluginRepo} from \\\"./IPluginRepo.sol\\\";\\n\\n/// @title PluginRepoRegistry\\n/// @notice This contract maintains an address-based registery of plugin repositories.\\ncontract PluginRepoRegistry is InterfaceBasedRegistry {\\n    /// @notice The ID of the permission required to call the `register` function.\\n    bytes32 public constant REGISTER_PLUGIN_REPO_PERMISSION_ID =\\n        keccak256(\\\"REGISTER_PLUGIN_REPO_PERMISSION\\\");\\n\\n    /// @notice Emitted if a new plugin repository is registered.\\n    /// @param pluginRepo The address of the plugin repository.\\n    event PluginRepoRegistered(address pluginRepo);\\n\\n    /// @dev Used to disallow initializing the implementation contract by an attacker for extra safety.\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract by setting calling the `InterfaceBasedRegistry` base class initialize method.\\n    /// @param _dao The address of the managing DAO.\\n    function initialize(IDAO _dao) external initializer {\\n        bytes4 pluginRepoInterfaceId = type(IPluginRepo).interfaceId;\\n        __InterfaceBasedRegistry_init(_dao, pluginRepoInterfaceId);\\n    }\\n\\n    /// @notice Registers a plugin repository with its address.\\n    /// @param pluginRepo The address of the PluginRepo contract.\\n    function registerPluginRepo(\\n        address pluginRepo\\n    ) external auth(REGISTER_PLUGIN_REPO_PERMISSION_ID) {\\n\\n        _register(pluginRepo);\\n\\n        emit PluginRepoRegistered(pluginRepo);\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xc2f81a435a11d93fae7795eabb897927bbfaee1fc991dc2306ba33f1fe1cec64\",\"license\":\"MIT\"},\"contracts/factory/plugin/setup/IPluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {PermissionLib} from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport {IDAO} from \\\"../../../core/dao/IDAO.sol\\\";\\n\\n/// @title IPluginSetup\\n/// @notice The interface required for a plugin setup contract to be consumed by the `PluginSetupProcessor` for plugin installations, updates, and uninstallations.\\ninterface IPluginSetup {\\n    /// @notice The data associated with a prepared setup.\\n    /// @param helpers The address array of helpers (contracts or EOAs) associated with this plugin version after the installation or update.\\n    /// @param permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the installing or updating DAO.\\n    struct PreparedSetupData {\\n        address[] helpers;\\n        PermissionLib.MultiTargetPermission[] permissions;\\n    }\\n\\n    /// @notice The payload for plugin updates and uninstallations containing the existing contracts as well as optional data to be consumed by the plugin setup.\\n    /// @param plugin The address of the `Plugin`.\\n    /// @param currentHelpers The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.\\n    /// @param data The bytes-encoded data containing the input parameters for the preparation of update/uninstall as specified in the corresponding ABI on the version's metadata.\\n    struct SetupPayload {\\n        address plugin;\\n        address[] currentHelpers;\\n        bytes data;\\n    }\\n\\n    /// @notice Prepares the installation of a plugin.\\n    /// @param _dao The address of the installing DAO.\\n    /// @param _data The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file.\\n    /// @return plugin The address of the `Plugin` contract being prepared for installation.\\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    function prepareInstallation(\\n        address _dao,\\n        bytes calldata _data\\n    ) external returns (address plugin, PreparedSetupData memory preparedSetupData);\\n\\n    /// @notice Prepares the update of a plugin.\\n    /// @param _dao The address of the updating DAO.\\n    /// @param _currentBuild The build number of the plugin to update from.\\n    /// @param _payload The relevant data necessary for the `prepareUpdate`. see above.\\n    /// @return initData The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    function prepareUpdate(\\n        address _dao,\\n        uint16 _currentBuild,\\n        SetupPayload calldata _payload\\n    ) external returns (bytes memory initData, PreparedSetupData memory preparedSetupData);\\n\\n    /// @notice Prepares the uninstallation of a plugin.\\n    /// @param _dao The address of the uninstalling DAO.\\n    /// @param _payload The relevant data necessary for the `prepareUninstallation`. see above.\\n    /// @return permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\\n    function prepareUninstallation(\\n        address _dao,\\n        SetupPayload calldata _payload\\n    ) external returns (PermissionLib.MultiTargetPermission[] memory permissions);\\n\\n    /// @notice Returns the plugin implementation address.\\n    /// @return The address of the plugin implementation contract.\\n    /// @dev The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    function implementation() external view returns (address);\\n}\",\"keccak256\":\"0x6e09da8d0299eae8c5191a2fd8baab443937f0ef900623cacc92872e144abfee\",\"license\":\"MIT\"},\"contracts/factory/plugin/setup/PluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {PermissionLib} from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport {createERC1967Proxy as createERC1967} from \\\"../../../utils/Proxy.sol\\\";\\nimport {IPluginSetup} from \\\"./IPluginSetup.sol\\\";\\n\\n/// @title PluginSetup\\n/// @notice An abstract contract that developers have to inherit from to write the setup of a plugin.\\nabstract contract PluginSetup is ERC165, IPluginSetup {\\n    /// @inheritdoc IPluginSetup\\n    function prepareUpdate(\\n        address _dao,\\n        uint16 _currentBuild,\\n        SetupPayload calldata _payload\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory initData, PreparedSetupData memory preparedSetupData)\\n    {}\\n\\n    /// @notice A convenience function to create an [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract pointing to an implementation and being associated to a DAO.\\n    /// @param _implementation The address of the implementation contract to which the proxy is pointing to.\\n    /// @param _data The data to initialize the storage of the proxy contract.\\n    /// @return The address of the created proxy contract.\\n    function createERC1967Proxy(\\n        address _implementation,\\n        bytes memory _data\\n    ) internal returns (address) {\\n        return createERC1967(_implementation, _data);\\n    }\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IPluginSetup).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\",\"keccak256\":\"0x30ea83e469671d61e56c07b0726ce749ecc0cce25ec2d41790a1d96434045d6f\",\"license\":\"MIT\"},\"contracts/factory/utils/InterfaceBasedRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {ERC165CheckerUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\\\";\\n\\nimport {DaoAuthorizableUpgradeable} from \\\"../../core/plugin/dao-authorizable/DaoAuthorizableUpgradeable.sol\\\";\\nimport {IDAO} from \\\"../../core/dao/IDAO.sol\\\";\\n\\n/// @title InterfaceBasedRegistry\\n/// @notice An [ERC-165](https://eips.ethereum.org/EIPS/eip-165)-based registry for contracts\\nabstract contract InterfaceBasedRegistry is UUPSUpgradeable, DaoAuthorizableUpgradeable {\\n    using ERC165CheckerUpgradeable for address;\\n\\n    /// @notice The ID of the permission required to call the `_authorizeUpgrade` function.\\n    bytes32 public constant UPGRADE_REGISTRY_PERMISSION_ID =\\n        keccak256(\\\"UPGRADE_REGISTRY_PERMISSION\\\");\\n\\n    /// @notice The [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID that the target contracts being registered must support.\\n    bytes4 public targetInterfaceId;\\n\\n    /// @notice The mapping containing the registry entries returning true for registererd contract addresses.\\n    mapping(address => bool) public entries;\\n\\n    /// @notice Thrown if the contract is already registered.\\n    /// @param registrant The address of the contract to be registered.\\n    error ContractAlreadyRegistered(address registrant);\\n\\n    /// @notice Thrown if the contract does not support the required interface.\\n    /// @param registrant The address of the contract to be registered.\\n    error ContractInterfaceInvalid(address registrant);\\n\\n    /// @notice Thrown if the contract do not support ERC165.\\n    /// @param registrant The address of the contract.\\n    error ContractERC165SupportInvalid(address registrant);\\n\\n    /// @notice Initializes the component.\\n    /// @dev This is required for the UUPS upgradability pattern.\\n    /// @param _managingDao The interface of the DAO managing the components permissions.\\n    /// @param _targetInterfaceId The [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface id of the contracts to be registered.\\n    function __InterfaceBasedRegistry_init(\\n        IDAO _managingDao,\\n        bytes4 _targetInterfaceId\\n    ) internal virtual onlyInitializing {\\n        __DaoAuthorizableUpgradeable_init(_managingDao);\\n\\n        targetInterfaceId = _targetInterfaceId;\\n    }\\n\\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeabilty mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    /// @dev The caller must have the `UPGRADE_REGISTRY_PERMISSION_ID` permission.\\n    function _authorizeUpgrade(\\n        address\\n    ) internal virtual override auth(UPGRADE_REGISTRY_PERMISSION_ID) {}\\n\\n    /// @notice Register an [ERC-165](https://eips.ethereum.org/EIPS/eip-165) contract address.\\n    /// @dev The managing DAO needs to grant REGISTER_PERMISSION_ID to registrar.\\n    /// @param _registrant The address of an [ERC-165](https://eips.ethereum.org/EIPS/eip-165) contract.\\n    function _register(address _registrant) internal {\\n        if (entries[_registrant]) {\\n            revert ContractAlreadyRegistered({registrant: _registrant});\\n        }\\n\\n        // Will revert if address is not a contract or doesn't fully support targetInterfaceId + ERC165.\\n        if (!_registrant.supportsInterface(targetInterfaceId)) {\\n            revert ContractInterfaceInvalid(_registrant);\\n        }\\n\\n        entries[_registrant] = true;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[48] private __gap;\\n}\",\"keccak256\":\"0xabe9a5b609dab8eba5df5a8b50c79dbe24dbcffe51d5716acff9928b2355d635\",\"license\":\"MIT\"},\"contracts/utils/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\n/// @notice Free function to create a [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract based on the passed base contract address.\\n/// @param _logic The base contract address.\\n/// @param _data The constructor arguments for this contract.\\n/// @return The address of the proxy contract created.\\n/// @dev Initializes the upgradeable proxy with an initial implementation specified by _logic. If _data is non-empty, it\\u2019s used as data in a delegate call to _logic. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor (see [OpenZepplin ERC1967Proxy-constructor](https://docs.openzeppelin.com/contracts/4.x/api/proxy#ERC1967Proxy-constructor-address-bytes-)).\\nfunction createERC1967Proxy(address _logic, bytes memory _data) returns (address) {\\n    return address(new ERC1967Proxy(_logic, _data));\\n}\",\"keccak256\":\"0x3a174d8d741bd8ec5a117adccb7af2dcf6b9e8ac3568138f920c39f76fd14520\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620063ef380380620063ef833981810160405281019062000037919062000176565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040516200008590620000ea565b604051809103906000f080158015620000a2573d6000803e3d6000fd5b50600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001a8565b61458e8062001e6183390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012a82620000fd565b9050919050565b60006200013e826200011d565b9050919050565b620001508162000131565b81146200015c57600080fd5b50565b600081519050620001708162000145565b92915050565b6000602082840312156200018f576200018e620000f8565b5b60006200019f848285016200015f565b91505092915050565b611ca980620001b86000396000f3fe60806040523480156200001157600080fd5b5060043610620000525760003560e01c80630b36f03c146200005757806322d66e581462000079578063797a554314620000af578063d222cb1e14620000e5575b600080fd5b6200006162000107565b60405162000070919062000919565b60405180910390f35b6200009760048036038101906200009191906200098f565b6200012b565b604051620000a69190620009e6565b60405180910390f35b620000cd6004803603810190620000c7919062000b65565b6200013f565b604051620000dc9190620009e6565b60405180910390f35b620000ef620001d8565b604051620000fe919062000c26565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006200013882620001fe565b9050919050565b60006200014c30620001fe565b90508073ffffffffffffffffffffffffffffffffffffffff1663fc05442760018785876040518563ffffffff1660e01b815260040162000190949392919062000d1c565b600060405180830381600087803b158015620001ab57600080fd5b505af1158015620001c0573d6000803e3d6000fd5b50505050620001d081856200033b565b949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000620002a5600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663c4d66de860e01b8460405160240162000242919062000c26565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620007ec565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e852f16826040518263ffffffff1660e01b815260040162000302919062000c26565b600060405180830381600087803b1580156200031d57600080fd5b505af115801562000332573d6000803e3d6000fd5b50505050919050565b6000600667ffffffffffffffff8111156200035b576200035a62000a1e565b5b6040519080825280602002602001820160405280156200039857816020015b6200038462000831565b8152602001906001900390816200037a5790505b50905060008373ffffffffffffffffffffffffffffffffffffffff166309e56b146040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200040f919062000db2565b905060008473ffffffffffffffffffffffffffffffffffffffff1663afe5eb786040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200045f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000485919062000db2565b905060008573ffffffffffffffffffffffffffffffffffffffff1663cc98b8f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015620004d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004fb919062000db2565b90506040518060600160405280600060028111156200051f576200051e62000de4565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815260200183815250846000815181106200055b576200055a62000e13565b5b602002602001018190525060405180606001604052806000600281111562000588576200058762000de4565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018281525084600181518110620005c457620005c362000e13565b5b6020026020010181905250604051806060016040528060006002811115620005f157620005f062000de4565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815260200184815250846002815181106200062d576200062c62000e13565b5b60200260200101819052506040518060600160405280600160028111156200065a576200065962000de4565b5b81526020013073ffffffffffffffffffffffffffffffffffffffff168152602001848152508460038151811062000696576200069562000e13565b5b6020026020010181905250604051806060016040528060016002811115620006c357620006c262000de4565b5b81526020013073ffffffffffffffffffffffffffffffffffffffff1681526020018381525084600481518110620006ff57620006fe62000e13565b5b60200260200101819052506040518060600160405280600160028111156200072c576200072b62000de4565b5b81526020013073ffffffffffffffffffffffffffffffffffffffff168152602001828152508460058151811062000768576200076762000e13565b5b60200260200101819052508573ffffffffffffffffffffffffffffffffffffffff166322844d0487866040518363ffffffff1660e01b8152600401620007b092919062000fba565b600060405180830381600087803b158015620007cb57600080fd5b505af1158015620007e0573d6000803e3d6000fd5b50505050505050505050565b60008282604051620007fe9062000880565b6200080b92919062000fee565b604051809103906000f08015801562000828573d6000803e3d6000fd5b50905092915050565b60405180606001604052806000600281111562000853576200085262000de4565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681525090565b610c51806200102383390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620008d9620008d3620008cd846200088e565b620008ae565b6200088e565b9050919050565b6000620008ed82620008b8565b9050919050565b60006200090182620008e0565b9050919050565b6200091381620008f4565b82525050565b600060208201905062000930600083018462000908565b92915050565b6000604051905090565b600080fd5b600080fd5b600062000957826200088e565b9050919050565b62000969816200094a565b81146200097557600080fd5b50565b60008135905062000989816200095e565b92915050565b600060208284031215620009a857620009a762000940565b5b6000620009b88482850162000978565b91505092915050565b6000620009ce82620008e0565b9050919050565b620009e081620009c1565b82525050565b6000602082019050620009fd6000830184620009d5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000a588262000a0d565b810181811067ffffffffffffffff8211171562000a7a5762000a7962000a1e565b5b80604052505050565b600062000a8f62000936565b905062000a9d828262000a4d565b919050565b600067ffffffffffffffff82111562000ac05762000abf62000a1e565b5b62000acb8262000a0d565b9050602081019050919050565b82818337600083830152505050565b600062000afe62000af88462000aa2565b62000a83565b90508281526020810184848401111562000b1d5762000b1c62000a08565b5b62000b2a84828562000ad8565b509392505050565b600082601f83011262000b4a5762000b4962000a03565b5b813562000b5c84826020860162000ae7565b91505092915050565b6000806000806080858703121562000b825762000b8162000940565b5b600062000b928782880162000978565b945050602062000ba58782880162000978565b935050604085013567ffffffffffffffff81111562000bc95762000bc862000945565b5b62000bd78782880162000b32565b925050606085013567ffffffffffffffff81111562000bfb5762000bfa62000945565b5b62000c098782880162000b32565b91505092959194509250565b62000c20816200094a565b82525050565b600060208201905062000c3d600083018462000c15565b92915050565b6000819050919050565b600060ff82169050919050565b600062000c7b62000c7562000c6f8462000c43565b620008ae565b62000c4d565b9050919050565b62000c8d8162000c5a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000ccf57808201518184015260208101905062000cb2565b60008484015250505050565b600062000ce88262000c93565b62000cf4818562000c9e565b935062000d0681856020860162000caf565b62000d118162000a0d565b840191505092915050565b600060808201905062000d33600083018762000c82565b62000d42602083018662000c15565b818103604083015262000d56818562000cdb565b9050818103606083015262000d6c818462000cdb565b905095945050505050565b6000819050919050565b62000d8c8162000d77565b811462000d9857600080fd5b50565b60008151905062000dac8162000d81565b92915050565b60006020828403121562000dcb5762000dca62000940565b5b600062000ddb8482850162000d9b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6003811062000e825762000e8162000de4565b5b50565b600081905062000e958262000e6e565b919050565b600062000ea78262000e85565b9050919050565b62000eb98162000e9a565b82525050565b62000eca816200094a565b82525050565b62000edb8162000d77565b82525050565b60608201600082015162000ef9600085018262000eae565b50602082015162000f0e602085018262000ebf565b50604082015162000f23604085018262000ed0565b50505050565b600062000f37838362000ee1565b60608301905092915050565b6000602082019050919050565b600062000f5d8262000e42565b62000f69818562000e4d565b935062000f768362000e5e565b8060005b8381101562000fad57815162000f91888262000f29565b975062000f9e8362000f43565b92505060018101905062000f7a565b5085935050505092915050565b600060408201905062000fd1600083018562000c15565b818103602083015262000fe5818462000f50565b90509392505050565b600060408201905062001005600083018562000c15565b818103602083015262001019818462000cdb565b9050939250505056fe608060405260405162000c5138038062000c51833981810160405281019062000029919062000580565b6200003d828260006200004560201b60201c565b5050620007d7565b62000056836200008860201b60201c565b600082511180620000645750805b156200008357620000818383620000df60201b620000371760201c565b505b505050565b62000099816200011560201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606200010d838360405180606001604052806027815260200162000c2a60279139620001eb60201b60201c565b905092915050565b6200012b816200027d60201b620000641760201c565b6200016d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000164906200066d565b60405180910390fd5b80620001a77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620002a060201b620000871760201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051620002179190620006dc565b600060405180830381855af49150503d806000811462000254576040519150601f19603f3d011682016040523d82523d6000602084013e62000259565b606091505b50915091506200027286838387620002aa60201b60201c565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b606083156200031a5760008351036200031157620002ce856200027d60201b60201c565b62000310576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003079062000745565b60405180910390fd5b5b8290506200032d565b6200032c83836200033560201b60201c565b5b949350505050565b600082511115620003495781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200037f9190620007b3565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003c9826200039c565b9050919050565b620003db81620003bc565b8114620003e757600080fd5b50565b600081519050620003fb81620003d0565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000456826200040b565b810181811067ffffffffffffffff821117156200047857620004776200041c565b5b80604052505050565b60006200048d62000388565b90506200049b82826200044b565b919050565b600067ffffffffffffffff821115620004be57620004bd6200041c565b5b620004c9826200040b565b9050602081019050919050565b60005b83811015620004f6578082015181840152602081019050620004d9565b60008484015250505050565b6000620005196200051384620004a0565b62000481565b90508281526020810184848401111562000538576200053762000406565b5b62000545848285620004d6565b509392505050565b600082601f83011262000565576200056462000401565b5b81516200057784826020860162000502565b91505092915050565b600080604083850312156200059a576200059962000392565b5b6000620005aa85828601620003ea565b925050602083015167ffffffffffffffff811115620005ce57620005cd62000397565b5b620005dc858286016200054d565b9150509250929050565b600082825260208201905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b600062000655602d83620005e6565b91506200066282620005f7565b604082019050919050565b60006020820190508181036000830152620006888162000646565b9050919050565b600081519050919050565b600081905092915050565b6000620006b2826200068f565b620006be81856200069a565b9350620006d0818560208601620004d6565b80840191505092915050565b6000620006ea8284620006a5565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006200072d601d83620005e6565b91506200073a82620006f5565b602082019050919050565b6000602082019050818103600083015262000760816200071e565b9050919050565b600081519050919050565b60006200077f8262000767565b6200078b8185620005e6565b93506200079d818560208601620004d6565b620007a8816200040b565b840191505092915050565b60006020820190508181036000830152620007cf818462000772565b905092915050565b61044380620007e76000396000f3fe6080604052366100135761001161001d565b005b61001b61001d565b005b610025610091565b610035610030610093565b6100a2565b565b606061005c83836040518060600160405280602781526020016103e7602791396100c8565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b565b600061009d61014e565b905090565b3660008037600080366000845af43d6000803e80600081146100c3573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516100f291906102db565b600060405180830381855af49150503d806000811461012d576040519150601f19603f3d011682016040523d82523d6000602084013e610132565b606091505b5091509150610143868383876101a5565b925050509392505050565b600061017c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610087565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606083156102075760008351036101ff576101bf85610064565b6101fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f59061034f565b60405180910390fd5b5b829050610212565b610211838361021a565b5b949350505050565b60008251111561022d5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026191906103c4565b60405180910390fd5b600081519050919050565b600081905092915050565b60005b8381101561029e578082015181840152602081019050610283565b60008484015250505050565b60006102b58261026a565b6102bf8185610275565b93506102cf818560208601610280565b80840191505092915050565b60006102e782846102aa565b915081905092915050565b600082825260208201905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610339601d836102f2565b915061034482610303565b602082019050919050565b600060208201905081810360008301526103688161032c565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006103968261036f565b6103a081856102f2565b93506103b0818560208601610280565b6103b98161037a565b840191505092915050565b600060208201905081810360008301526103de818461038b565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d7c51eae9d52e7ae8a67059446a6cb47ecf507c5f20d13ab7a7f05707d9806e064736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e9bbe671b34727a5cbd55aaf6acfc4914df5ebac16fa5216cfa401702a1cdeac64736f6c6343000811003360a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50620000556200005b60201b60201c565b62000206565b600060019054906101000a900460ff1615620000ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a590620001a9565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff161015620001205760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620001179190620001e9565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200019160278362000122565b91506200019e8262000133565b604082019050919050565b60006020820190508181036000830152620001c48162000182565b9050919050565b600060ff82169050919050565b620001e381620001cb565b82525050565b6000602082019050620002006000830184620001d8565b92915050565b6080516143506200023e600039600081816108f00152818161097e01528181610a7801528181610b060152610c0d01526143506000f3fe6080604052600436106101355760003560e01c80639af3e909116100ab578063d68bad2c1161006f578063d68bad2c1461042b578063d96054c414610454578063df1d6c441461047d578063e0589bd3146104ba578063e978afe5146104f7578063fc0544271461052057610135565b80639af3e90914610346578063afe5eb7814610383578063c4d66de8146103ae578063c9dbc2a4146103d7578063cc98b8f51461040057610135565b80633659cfe6116100fd5780633659cfe6146102315780634f1ef2861461025a57806350abe9101461027657806352d1902d146102b35780637be0ca5e146102de5780639aaf9f081461030957610135565b806301ffc9a71461013a57806309e56b141461017757806322844d04146101a25780632675fdd0146101cb57806328375f6714610208575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c91906127c7565b610549565b60405161016e919061280f565b60405180910390f35b34801561018357600080fd5b5061018c61062b565b6040516101999190612843565b60405180910390f35b3480156101ae57600080fd5b506101c960048036038101906101c49190612921565b61064f565b005b3480156101d757600080fd5b506101f260048036038101906101ed9190612aee565b610754565b6040516101ff919061280f565b60405180910390f35b34801561021457600080fd5b5061022f600480360381019061022a9190612c00565b6107ba565b005b34801561023d57600080fd5b5061025860048036038101906102539190612c60565b6108ee565b005b610274600480360381019061026f9190612c8d565b610a76565b005b34801561028257600080fd5b5061029d60048036038101906102989190612c60565b610bb2565b6040516102aa9190612e22565b60405180910390f35b3480156102bf57600080fd5b506102c8610c09565b6040516102d59190612843565b60405180910390f35b3480156102ea57600080fd5b506102f3610cc2565b6040516103009190612e53565b60405180910390f35b34801561031557600080fd5b50610330600480360381019061032b9190612e6e565b610cd5565b60405161033d9190612e22565b60405180910390f35b34801561035257600080fd5b5061036d60048036038101906103689190612ebf565b610e9d565b60405161037a9190612e22565b60405180910390f35b34801561038f57600080fd5b50610398610ecd565b6040516103a59190612843565b60405180910390f35b3480156103ba57600080fd5b506103d560048036038101906103d09190612c60565b610ef1565b005b3480156103e357600080fd5b506103fe60048036038101906103f99190612f2a565b611087565b005b34801561040c57600080fd5b506104156110c4565b6040516104229190612843565b60405180910390f35b34801561043757600080fd5b50610452600480360381019061044d9190612f91565b6110e8565b005b34801561046057600080fd5b5061047b60048036038101906104769190612f91565b611123565b005b34801561048957600080fd5b506104a4600480360381019061049f9190612fe4565b61115e565b6040516104b1919061302a565b60405180910390f35b3480156104c657600080fd5b506104e160048036038101906104dc9190612fe4565b611193565b6040516104ee9190612e22565b60405180910390f35b34801561050357600080fd5b5061051e6004803603810190610519919061309b565b6111fb565b005b34801561052c57600080fd5b50610547600480360381019061054291906130e8565b611358565b005b60007fd4321b40000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061061457507f2b96ad4d000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106245750610623826118d0565b5b9050919050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336106798161193a565b60005b8383905081101561074d57600084848381811061069c5761069b61318f565b5b9050606002018036038101906106b2919061324c565b9050600060028111156106c8576106c7613279565b5b816000015160028111156106df576106de613279565b5b036106fc576106f786826020015183604001516119d3565b610741565b600160028111156107105761070f613279565b5b8160000151600281111561072757610726613279565b5b036107405761073f86826020015183604001516119e5565b5b5b8160010191505061067c565b5050505050565b600061076285858585611b1b565b8061078957506107888573ffffffffffffffffffffffffffffffffffffffff8585611b1b565b5b806107b057506107af73ffffffffffffffffffffffffffffffffffffffff858585611b1b565b5b9050949350505050565b7fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea6107e48161193a565b60008460ff1603610821576040517f76f52ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc60009054906101000a900460ff1660ff168460ff161115610870576040517f11c6e3ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083839050036108ad576040517f88bc3fe700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f78484846040516108e0939291906132e6565b60405180910390a150505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff160361097c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109739061339b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166109bb611c79565b73ffffffffffffffffffffffffffffffffffffffff1614610a11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a089061342d565b60405180910390fd5b610a1a81611cd0565b610a7381600067ffffffffffffffff811115610a3957610a386129c3565b5b6040519080825280601f01601f191660200182016040528015610a6b5781602001600182028036833780820191505090505b506000611cfe565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610b04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afb9061339b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610b43611c79565b73ffffffffffffffffffffffffffffffffffffffff1614610b99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b909061342d565b60405180910390fd5b610ba282611cd0565b610bae82826001611cfe565b5050565b610bba6126fd565b610c0260cb60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cd5565b9050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610c99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c90906134bf565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60cc60009054906101000a900460ff1681565b610cdd6126fd565b600060ca6000848152602001908152602001600020905060008160000160000160009054906101000a900460ff1660ff1603610d5057826040517f8d0aeeb1000000000000000000000000000000000000000000000000000000008152600401610d479190612843565b60405180910390fd5b80604051806060016040529081600082016040518060400160405290816000820160009054906101000a900460ff1660ff1660ff1681526020016000820160019054906101000a900461ffff1661ffff1661ffff168152505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054610e139061350e565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3f9061350e565b8015610e8c5780601f10610e6157610100808354040283529160200191610e8c565b820191906000526020600020905b815481529060010190602001808311610e6f57829003601f168201915b505050505081525050915050919050565b610ea56126fd565b610ec6610ec183803603810190610ebc91906135bb565b611e6c565b610cd5565b9050919050565b7fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea81565b60008060019054906101000a900460ff16159050808015610f225750600160008054906101000a900460ff1660ff16105b80610f4f5750610f3130611ea6565b158015610f4e5750600160008054906101000a900460ff1660ff16145b5b610f8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f859061365a565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610fcb576001600060016101000a81548160ff0219169083151502179055505b610fd482611ec9565b610fff30837fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea6119d3565b61102a30837f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b6119d3565b80156110835760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161107a91906136bf565b60405180910390a15b5050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336110b18161193a565b6110bd85858585611f24565b5050505050565b7f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b81565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336111128161193a565b61111d8484846119d3565b50505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361114d8161193a565b6111588484846119e5565b50505050565b600060c960008360ff1660ff16815260200190815260200160002060009054906101000a900461ffff1661ffff169050919050565b61119b6126fd565b600060c960008460ff1660ff16815260200190815260200160002060009054906101000a900461ffff1690506111f36111ee60405180604001604052808660ff1681526020018461ffff16815250611e6c565b610cd5565b915050919050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336112258161193a565b60005b838390508110156113525760008484838181106112485761124761318f565b5b905060a0020180360381019061125e9190613766565b90506000600281111561127457611273613279565b5b8160000151600281111561128b5761128a613279565b5b036112ac576112a78160200151826040015183608001516119d3565b611346565b600160028111156112c0576112bf613279565b5b816000015160028111156112d7576112d6613279565b5b036112f8576112f38160200151826040015183608001516119e5565b611345565b60028081111561130b5761130a613279565b5b8160000151600281111561132257611321613279565b5b03611344576113438160200151826040015183608001518460600151611f24565b5b5b5b81600101915050611228565b50505050565b7fa0885006fe6672eeafd1deca6c67bcdc6dd79cfe2b157a98539ddf73cd8c04ea6113828161193a565b6113cb7f99718b50000000000000000000000000000000000000000000000000000000008773ffffffffffffffffffffffffffffffffffffffff166122c390919063ffffffff16565b611401576040517f9d145ceb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008760ff160361143e576040517f76f52ffa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160cc60009054906101000a900460ff168861145b91906137c2565b60ff1611156114b25760cc60009054906101000a900460ff16876040517f53db7b7b0000000000000000000000000000000000000000000000000000000081526004016114a99291906137f7565b60405180910390fd5b60cc60009054906101000a900460ff1660ff168760ff161115611528578660cc60006101000a81548160ff021916908360ff16021790555060008383905003611527576040517f88bc3fe700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600060ca600060cb60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001908152602001600020905060008160000160000160009054906101000a900460ff1660ff16141580156115c057508760ff168160000160000160009054906101000a900460ff1660ff1614155b1561162f578060000160000160009054906101000a900460ff168160000160000160019054906101000a900461ffff16886040517fff9f36740000000000000000000000000000000000000000000000000000000081526004016116269392919061383e565b60405180910390fd5b600060c960008a60ff1660ff168152602001908152602001600020600081819054906101000a900461ffff1661166490613875565b91906101000a81548161ffff021916908361ffff16021790559050600060405180604001604052808b60ff1681526020018361ffff16815250905060006116aa82611e6c565b905060405180606001604052808381526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525060ca600083815260200190815260200160002060008201518160000160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548161ffff021916908361ffff160217905550505060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190816117df9190613a41565b509050508060cb60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508973ffffffffffffffffffffffffffffffffffffffff167feb4bce5025c5200f6a074dd28fe7754955dfdca0eb2dcbaa16ccc292655e66698c858c8c6040516118739493929190613b13565b60405180910390a260008787905011156118c3577f8ff94c32efcef376eb02508cba5536e0634c1d6ad4b51ffa0f7306c78edaf5f78b88886040516118ba939291906132e6565b60405180910390a15b5050505050505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61198b3033836000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610754565b6119d0573033826040517f1e09743f0000000000000000000000000000000000000000000000000000000081526004016119c793929190613b53565b60405180910390fd5b50565b6119e08383836002611f24565b505050565b60006119f28484846122e8565b9050600073ffffffffffffffffffffffffffffffffffffffff166097600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b155760006097600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16837f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f6752487604051611b0c9190613b8a565b60405180910390a45b50505050565b60008060976000611b2d8888886122e8565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b9c576000915050611c71565b600273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611bda576001915050611c71565b8073ffffffffffffffffffffffffffffffffffffffff16632675fdd0878787876040518563ffffffff1660e01b8152600401611c199493929190613bde565b602060405180830381865afa925050508015611c5357506040513d601f19601f82011682018060405250810190611c509190613c56565b60015b15611c6b578015611c6957600192505050611c71565b505b60009150505b949350505050565b6000611ca77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61231e565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f5aa4f06bdc18535eff05128093a2315c2c960a2722e20021cbff28da04760f5b611cfa8161193a565b5050565b611d2a7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612328565b60000160009054906101000a900460ff1615611d4e57611d4983612332565b611e67565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611db657506040513d601f19601f82011682018060405250810190611db39190613c98565b60015b611df5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dec90613d37565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5190613dc9565b60405180910390fd5b50611e668383836123eb565b5b505050565b600081600001518260200151604051602001611e89929190613e55565b604051602081830303815290604052805190602001209050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611f18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0f90613ef3565b60405180910390fd5b611f2181612417565b50565b73ffffffffffffffffffffffffffffffffffffffff80168473ffffffffffffffffffffffffffffffffffffffff16148015611f8a575073ffffffffffffffffffffffffffffffffffffffff80168373ffffffffffffffffffffffffffffffffffffffff16145b15611fc1576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff80168473ffffffffffffffffffffffffffffffffffffffff161480612026575073ffffffffffffffffffffffffffffffffffffffff80168373ffffffffffffffffffffffffffffffffffffffff16145b1561210257600061203683612445565b90507f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada338314806120635750805b1561209a576040517f24159e5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612100576040517f92ab7d0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b600061210f8585856122e8565b905060006097600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000839050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361224157806097600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16867f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e8076448a88604051612234929190613f68565b60405180910390a46122ba565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146122b95786868684846040517f0b98789e0000000000000000000000000000000000000000000000000000000081526004016122b0959493929190613f91565b60405180910390fd5b5b50505050505050565b60006122ce8361244c565b80156122e057506122df8383612499565b5b905092915050565b60008284836040516020016122ff939291906140a4565b6040516020818303038152906040528051906020012090509392505050565b6000819050919050565b6000819050919050565b61233b81611ea6565b61237a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123719061415e565b60405180910390fd5b806123a77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61231e565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6123f483612558565b6000825111806124015750805b156124125761241083836125a7565b505b505050565b61244230827f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336119d3565b50565b6000919050565b6000612478827f01ffc9a700000000000000000000000000000000000000000000000000000000612499565b801561249257506124908263ffffffff60e01b612499565b155b9050919050565b6000806301ffc9a760e01b836040516024016124b5919061418d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000602060008551602087018a617530fa92503d91506000519050828015612540575060208210155b801561254c5750600081115b94505050505092915050565b61256181612332565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606125b283611ea6565b6125f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e89061421a565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516126199190614276565b600060405180830381855af49150503d8060008114612654576040519150601f19603f3d011682016040523d82523d6000602084013e612659565b606091505b509150915061268182826040518060600160405280602781526020016142f46027913961268b565b9250505092915050565b6060831561269b578290506126a6565b6126a583836126ad565b5b9392505050565b6000825111156126c05781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f491906142d1565b60405180910390fd5b604051806060016040528061271061273a565b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6040518060400160405280600060ff168152602001600061ffff1681525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6127a48161276f565b81146127af57600080fd5b50565b6000813590506127c18161279b565b92915050565b6000602082840312156127dd576127dc612765565b5b60006127eb848285016127b2565b91505092915050565b60008115159050919050565b612809816127f4565b82525050565b60006020820190506128246000830184612800565b92915050565b6000819050919050565b61283d8161282a565b82525050565b60006020820190506128586000830184612834565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006128898261285e565b9050919050565b6128998161287e565b81146128a457600080fd5b50565b6000813590506128b681612890565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126128e1576128e06128bc565b5b8235905067ffffffffffffffff8111156128fe576128fd6128c1565b5b60208301915083606082028301111561291a576129196128c6565b5b9250929050565b60008060006040848603121561293a57612939612765565b5b6000612948868287016128a7565b935050602084013567ffffffffffffffff8111156129695761296861276a565b5b612975868287016128cb565b92509250509250925092565b61298a8161282a565b811461299557600080fd5b50565b6000813590506129a781612981565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6129fb826129b2565b810181811067ffffffffffffffff82111715612a1a57612a196129c3565b5b80604052505050565b6000612a2d61275b565b9050612a3982826129f2565b919050565b600067ffffffffffffffff821115612a5957612a586129c3565b5b612a62826129b2565b9050602081019050919050565b82818337600083830152505050565b6000612a91612a8c84612a3e565b612a23565b905082815260208101848484011115612aad57612aac6129ad565b5b612ab8848285612a6f565b509392505050565b600082601f830112612ad557612ad46128bc565b5b8135612ae5848260208601612a7e565b91505092915050565b60008060008060808587031215612b0857612b07612765565b5b6000612b16878288016128a7565b9450506020612b27878288016128a7565b9350506040612b3887828801612998565b925050606085013567ffffffffffffffff811115612b5957612b5861276a565b5b612b6587828801612ac0565b91505092959194509250565b600060ff82169050919050565b612b8781612b71565b8114612b9257600080fd5b50565b600081359050612ba481612b7e565b92915050565b60008083601f840112612bc057612bbf6128bc565b5b8235905067ffffffffffffffff811115612bdd57612bdc6128c1565b5b602083019150836001820283011115612bf957612bf86128c6565b5b9250929050565b600080600060408486031215612c1957612c18612765565b5b6000612c2786828701612b95565b935050602084013567ffffffffffffffff811115612c4857612c4761276a565b5b612c5486828701612baa565b92509250509250925092565b600060208284031215612c7657612c75612765565b5b6000612c84848285016128a7565b91505092915050565b60008060408385031215612ca457612ca3612765565b5b6000612cb2858286016128a7565b925050602083013567ffffffffffffffff811115612cd357612cd261276a565b5b612cdf85828601612ac0565b9150509250929050565b612cf281612b71565b82525050565b600061ffff82169050919050565b612d0f81612cf8565b82525050565b604082016000820151612d2b6000850182612ce9565b506020820151612d3e6020850182612d06565b50505050565b612d4d8161287e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612d8d578082015181840152602081019050612d72565b60008484015250505050565b6000612da482612d53565b612dae8185612d5e565b9350612dbe818560208601612d6f565b612dc7816129b2565b840191505092915050565b6000608083016000830151612dea6000860182612d15565b506020830151612dfd6040860182612d44565b5060408301518482036060860152612e158282612d99565b9150508091505092915050565b60006020820190508181036000830152612e3c8184612dd2565b905092915050565b612e4d81612b71565b82525050565b6000602082019050612e686000830184612e44565b92915050565b600060208284031215612e8457612e83612765565b5b6000612e9284828501612998565b91505092915050565b600080fd5b600060408284031215612eb657612eb5612e9b565b5b81905092915050565b600060408284031215612ed557612ed4612765565b5b6000612ee384828501612ea0565b91505092915050565b6000612ef78261287e565b9050919050565b612f0781612eec565b8114612f1257600080fd5b50565b600081359050612f2481612efe565b92915050565b60008060008060808587031215612f4457612f43612765565b5b6000612f52878288016128a7565b9450506020612f63878288016128a7565b9350506040612f7487828801612998565b9250506060612f8587828801612f15565b91505092959194509250565b600080600060608486031215612faa57612fa9612765565b5b6000612fb8868287016128a7565b9350506020612fc9868287016128a7565b9250506040612fda86828701612998565b9150509250925092565b600060208284031215612ffa57612ff9612765565b5b600061300884828501612b95565b91505092915050565b6000819050919050565b61302481613011565b82525050565b600060208201905061303f600083018461301b565b92915050565b60008083601f84011261305b5761305a6128bc565b5b8235905067ffffffffffffffff811115613078576130776128c1565b5b6020830191508360a0820283011115613094576130936128c6565b5b9250929050565b600080602083850312156130b2576130b1612765565b5b600083013567ffffffffffffffff8111156130d0576130cf61276a565b5b6130dc85828601613045565b92509250509250929050565b6000806000806000806080878903121561310557613104612765565b5b600061311389828a01612b95565b965050602061312489828a016128a7565b955050604087013567ffffffffffffffff8111156131455761314461276a565b5b61315189828a01612baa565b9450945050606087013567ffffffffffffffff8111156131745761317361276a565b5b61318089828a01612baa565b92509250509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600381106131d057600080fd5b50565b6000813590506131e2816131c3565b92915050565b6000606082840312156131fe576131fd6131be565b5b6132086060612a23565b90506000613218848285016131d3565b600083015250602061322c848285016128a7565b602083015250604061324084828501612998565b60408301525092915050565b60006060828403121561326257613261612765565b5b6000613270848285016131e8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b60006132c583856132a8565b93506132d2838584612a6f565b6132db836129b2565b840190509392505050565b60006040820190506132fb6000830186612e44565b818103602083015261330e8184866132b9565b9050949350505050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613385602c83613318565b915061339082613329565b604082019050919050565b600060208201905081810360008301526133b481613378565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613417602c83613318565b9150613422826133bb565b604082019050919050565b600060208201905081810360008301526134468161340a565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b60006134a9603883613318565b91506134b48261344d565b604082019050919050565b600060208201905081810360008301526134d88161349c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061352657607f821691505b602082108103613539576135386134df565b5b50919050565b61354881612cf8565b811461355357600080fd5b50565b6000813590506135658161353f565b92915050565b600060408284031215613581576135806131be565b5b61358b6040612a23565b9050600061359b84828501612b95565b60008301525060206135af84828501613556565b60208301525092915050565b6000604082840312156135d1576135d0612765565b5b60006135df8482850161356b565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613644602e83613318565b915061364f826135e8565b604082019050919050565b6000602082019050818103600083015261367381613637565b9050919050565b6000819050919050565b6000819050919050565b60006136a96136a461369f8461367a565b613684565b612b71565b9050919050565b6136b98161368e565b82525050565b60006020820190506136d460008301846136b0565b92915050565b600060a082840312156136f0576136ef6131be565b5b6136fa60a0612a23565b9050600061370a848285016131d3565b600083015250602061371e848285016128a7565b6020830152506040613732848285016128a7565b6040830152506060613746848285016128a7565b606083015250608061375a84828501612998565b60808301525092915050565b600060a0828403121561377c5761377b612765565b5b600061378a848285016136da565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006137cd82612b71565b91506137d883612b71565b9250828203905060ff8111156137f1576137f0613793565b5b92915050565b600060408201905061380c6000830185612e44565b6138196020830184612e44565b9392505050565b61382981612cf8565b82525050565b6138388161287e565b82525050565b60006060820190506138536000830186612e44565b6138606020830185613820565b61386d604083018461382f565b949350505050565b600061388082612cf8565b915061ffff820361389457613893613793565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026139017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826138c4565b61390b86836138c4565b95508019841693508086168417925050509392505050565b600061393e61393961393484613011565b613684565b613011565b9050919050565b6000819050919050565b61395883613923565b61396c61396482613945565b8484546138d1565b825550505050565b600090565b613981613974565b61398c81848461394f565b505050565b5b818110156139b0576139a5600082613979565b600181019050613992565b5050565b601f8211156139f5576139c68161389f565b6139cf846138b4565b810160208510156139de578190505b6139f26139ea856138b4565b830182613991565b50505b505050565b600082821c905092915050565b6000613a18600019846008026139fa565b1980831691505092915050565b6000613a318383613a07565b9150826002028217905092915050565b613a4a82612d53565b67ffffffffffffffff811115613a6357613a626129c3565b5b613a6d825461350e565b613a788282856139b4565b600060209050601f831160018114613aab5760008415613a99578287015190505b613aa38582613a25565b865550613b0b565b601f198416613ab98661389f565b60005b82811015613ae157848901518255600182019150602085019450602081019050613abc565b86831015613afe5784890151613afa601f891682613a07565b8355505b6001600288020188555050505b505050505050565b6000606082019050613b286000830187612e44565b613b356020830186613820565b8181036040830152613b488184866132b9565b905095945050505050565b6000606082019050613b68600083018661382f565b613b75602083018561382f565b613b826040830184612834565b949350505050565b6000602082019050613b9f600083018461382f565b92915050565b6000613bb082612d53565b613bba81856132a8565b9350613bca818560208601612d6f565b613bd3816129b2565b840191505092915050565b6000608082019050613bf3600083018761382f565b613c00602083018661382f565b613c0d6040830185612834565b8181036060830152613c1f8184613ba5565b905095945050505050565b613c33816127f4565b8114613c3e57600080fd5b50565b600081519050613c5081613c2a565b92915050565b600060208284031215613c6c57613c6b612765565b5b6000613c7a84828501613c41565b91505092915050565b600081519050613c9281612981565b92915050565b600060208284031215613cae57613cad612765565b5b6000613cbc84828501613c83565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000613d21602e83613318565b9150613d2c82613cc5565b604082019050919050565b60006020820190508181036000830152613d5081613d14565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000613db3602983613318565b9150613dbe82613d57565b604082019050919050565b60006020820190508181036000830152613de281613da6565b9050919050565b60008160f81b9050919050565b6000613e0182613de9565b9050919050565b613e19613e1482612b71565b613df6565b82525050565b60008160f01b9050919050565b6000613e3782613e1f565b9050919050565b613e4f613e4a82612cf8565b613e2c565b82525050565b6000613e618285613e08565b600182019150613e718284613e3e565b6002820191508190509392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613edd602b83613318565b9150613ee882613e81565b604082019050919050565b60006020820190508181036000830152613f0c81613ed0565b9050919050565b6000613f2e613f29613f248461285e565b613684565b61285e565b9050919050565b6000613f4082613f13565b9050919050565b6000613f5282613f35565b9050919050565b613f6281613f47565b82525050565b6000604082019050613f7d600083018561382f565b613f8a6020830184613f59565b9392505050565b600060a082019050613fa6600083018861382f565b613fb3602083018761382f565b613fc06040830186612834565b613fcd606083018561382f565b613fda608083018461382f565b9695505050505050565b600081905092915050565b7f5045524d495353494f4e00000000000000000000000000000000000000000000600082015250565b6000614025600a83613fe4565b915061403082613fef565b600a82019050919050565b60008160601b9050919050565b60006140538261403b565b9050919050565b600061406582614048565b9050919050565b61407d6140788261287e565b61405a565b82525050565b6000819050919050565b61409e6140998261282a565b614083565b82525050565b60006140af82614018565b91506140bb828661406c565b6014820191506140cb828561406c565b6014820191506140db828461408d565b602082019150819050949350505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000614148602d83613318565b9150614153826140ec565b604082019050919050565b600060208201905081810360008301526141778161413b565b9050919050565b6141878161276f565b82525050565b60006020820190506141a2600083018461417e565b92915050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000614204602683613318565b915061420f826141a8565b604082019050919050565b60006020820190508181036000830152614233816141f7565b9050919050565b600081905092915050565b600061425082612d53565b61425a818561423a565b935061426a818560208601612d6f565b80840191505092915050565b60006142828284614245565b915081905092915050565b600081519050919050565b60006142a38261428d565b6142ad8185613318565b93506142bd818560208601612d6f565b6142c6816129b2565b840191505092915050565b600060208201905081810360008301526142eb8184614298565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208eb603bc6c3375733ae58bcb5c035bbaec5d9c4b61a384e532a22bc1b4aea3a164736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000525760003560e01c80630b36f03c146200005757806322d66e581462000079578063797a554314620000af578063d222cb1e14620000e5575b600080fd5b6200006162000107565b60405162000070919062000919565b60405180910390f35b6200009760048036038101906200009191906200098f565b6200012b565b604051620000a69190620009e6565b60405180910390f35b620000cd6004803603810190620000c7919062000b65565b6200013f565b604051620000dc9190620009e6565b60405180910390f35b620000ef620001d8565b604051620000fe919062000c26565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006200013882620001fe565b9050919050565b60006200014c30620001fe565b90508073ffffffffffffffffffffffffffffffffffffffff1663fc05442760018785876040518563ffffffff1660e01b815260040162000190949392919062000d1c565b600060405180830381600087803b158015620001ab57600080fd5b505af1158015620001c0573d6000803e3d6000fd5b50505050620001d081856200033b565b949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000620002a5600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1663c4d66de860e01b8460405160240162000242919062000c26565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620007ec565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e852f16826040518263ffffffff1660e01b815260040162000302919062000c26565b600060405180830381600087803b1580156200031d57600080fd5b505af115801562000332573d6000803e3d6000fd5b50505050919050565b6000600667ffffffffffffffff8111156200035b576200035a62000a1e565b5b6040519080825280602002602001820160405280156200039857816020015b6200038462000831565b8152602001906001900390816200037a5790505b50905060008373ffffffffffffffffffffffffffffffffffffffff166309e56b146040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200040f919062000db2565b905060008473ffffffffffffffffffffffffffffffffffffffff1663afe5eb786040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200045f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000485919062000db2565b905060008573ffffffffffffffffffffffffffffffffffffffff1663cc98b8f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015620004d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004fb919062000db2565b90506040518060600160405280600060028111156200051f576200051e62000de4565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815260200183815250846000815181106200055b576200055a62000e13565b5b602002602001018190525060405180606001604052806000600281111562000588576200058762000de4565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018281525084600181518110620005c457620005c362000e13565b5b6020026020010181905250604051806060016040528060006002811115620005f157620005f062000de4565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815260200184815250846002815181106200062d576200062c62000e13565b5b60200260200101819052506040518060600160405280600160028111156200065a576200065962000de4565b5b81526020013073ffffffffffffffffffffffffffffffffffffffff168152602001848152508460038151811062000696576200069562000e13565b5b6020026020010181905250604051806060016040528060016002811115620006c357620006c262000de4565b5b81526020013073ffffffffffffffffffffffffffffffffffffffff1681526020018381525084600481518110620006ff57620006fe62000e13565b5b60200260200101819052506040518060600160405280600160028111156200072c576200072b62000de4565b5b81526020013073ffffffffffffffffffffffffffffffffffffffff168152602001828152508460058151811062000768576200076762000e13565b5b60200260200101819052508573ffffffffffffffffffffffffffffffffffffffff166322844d0487866040518363ffffffff1660e01b8152600401620007b092919062000fba565b600060405180830381600087803b158015620007cb57600080fd5b505af1158015620007e0573d6000803e3d6000fd5b50505050505050505050565b60008282604051620007fe9062000880565b6200080b92919062000fee565b604051809103906000f08015801562000828573d6000803e3d6000fd5b50905092915050565b60405180606001604052806000600281111562000853576200085262000de4565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681525090565b610c51806200102383390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620008d9620008d3620008cd846200088e565b620008ae565b6200088e565b9050919050565b6000620008ed82620008b8565b9050919050565b60006200090182620008e0565b9050919050565b6200091381620008f4565b82525050565b600060208201905062000930600083018462000908565b92915050565b6000604051905090565b600080fd5b600080fd5b600062000957826200088e565b9050919050565b62000969816200094a565b81146200097557600080fd5b50565b60008135905062000989816200095e565b92915050565b600060208284031215620009a857620009a762000940565b5b6000620009b88482850162000978565b91505092915050565b6000620009ce82620008e0565b9050919050565b620009e081620009c1565b82525050565b6000602082019050620009fd6000830184620009d5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000a588262000a0d565b810181811067ffffffffffffffff8211171562000a7a5762000a7962000a1e565b5b80604052505050565b600062000a8f62000936565b905062000a9d828262000a4d565b919050565b600067ffffffffffffffff82111562000ac05762000abf62000a1e565b5b62000acb8262000a0d565b9050602081019050919050565b82818337600083830152505050565b600062000afe62000af88462000aa2565b62000a83565b90508281526020810184848401111562000b1d5762000b1c62000a08565b5b62000b2a84828562000ad8565b509392505050565b600082601f83011262000b4a5762000b4962000a03565b5b813562000b5c84826020860162000ae7565b91505092915050565b6000806000806080858703121562000b825762000b8162000940565b5b600062000b928782880162000978565b945050602062000ba58782880162000978565b935050604085013567ffffffffffffffff81111562000bc95762000bc862000945565b5b62000bd78782880162000b32565b925050606085013567ffffffffffffffff81111562000bfb5762000bfa62000945565b5b62000c098782880162000b32565b91505092959194509250565b62000c20816200094a565b82525050565b600060208201905062000c3d600083018462000c15565b92915050565b6000819050919050565b600060ff82169050919050565b600062000c7b62000c7562000c6f8462000c43565b620008ae565b62000c4d565b9050919050565b62000c8d8162000c5a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000ccf57808201518184015260208101905062000cb2565b60008484015250505050565b600062000ce88262000c93565b62000cf4818562000c9e565b935062000d0681856020860162000caf565b62000d118162000a0d565b840191505092915050565b600060808201905062000d33600083018762000c82565b62000d42602083018662000c15565b818103604083015262000d56818562000cdb565b9050818103606083015262000d6c818462000cdb565b905095945050505050565b6000819050919050565b62000d8c8162000d77565b811462000d9857600080fd5b50565b60008151905062000dac8162000d81565b92915050565b60006020828403121562000dcb5762000dca62000940565b5b600062000ddb8482850162000d9b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6003811062000e825762000e8162000de4565b5b50565b600081905062000e958262000e6e565b919050565b600062000ea78262000e85565b9050919050565b62000eb98162000e9a565b82525050565b62000eca816200094a565b82525050565b62000edb8162000d77565b82525050565b60608201600082015162000ef9600085018262000eae565b50602082015162000f0e602085018262000ebf565b50604082015162000f23604085018262000ed0565b50505050565b600062000f37838362000ee1565b60608301905092915050565b6000602082019050919050565b600062000f5d8262000e42565b62000f69818562000e4d565b935062000f768362000e5e565b8060005b8381101562000fad57815162000f91888262000f29565b975062000f9e8362000f43565b92505060018101905062000f7a565b5085935050505092915050565b600060408201905062000fd1600083018562000c15565b818103602083015262000fe5818462000f50565b90509392505050565b600060408201905062001005600083018562000c15565b818103602083015262001019818462000cdb565b9050939250505056fe608060405260405162000c5138038062000c51833981810160405281019062000029919062000580565b6200003d828260006200004560201b60201c565b5050620007d7565b62000056836200008860201b60201c565b600082511180620000645750805b156200008357620000818383620000df60201b620000371760201c565b505b505050565b62000099816200011560201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606200010d838360405180606001604052806027815260200162000c2a60279139620001eb60201b60201c565b905092915050565b6200012b816200027d60201b620000641760201c565b6200016d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000164906200066d565b60405180910390fd5b80620001a77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620002a060201b620000871760201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051620002179190620006dc565b600060405180830381855af49150503d806000811462000254576040519150601f19603f3d011682016040523d82523d6000602084013e62000259565b606091505b50915091506200027286838387620002aa60201b60201c565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b606083156200031a5760008351036200031157620002ce856200027d60201b60201c565b62000310576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003079062000745565b60405180910390fd5b5b8290506200032d565b6200032c83836200033560201b60201c565b5b949350505050565b600082511115620003495781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200037f9190620007b3565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003c9826200039c565b9050919050565b620003db81620003bc565b8114620003e757600080fd5b50565b600081519050620003fb81620003d0565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000456826200040b565b810181811067ffffffffffffffff821117156200047857620004776200041c565b5b80604052505050565b60006200048d62000388565b90506200049b82826200044b565b919050565b600067ffffffffffffffff821115620004be57620004bd6200041c565b5b620004c9826200040b565b9050602081019050919050565b60005b83811015620004f6578082015181840152602081019050620004d9565b60008484015250505050565b6000620005196200051384620004a0565b62000481565b90508281526020810184848401111562000538576200053762000406565b5b62000545848285620004d6565b509392505050565b600082601f83011262000565576200056462000401565b5b81516200057784826020860162000502565b91505092915050565b600080604083850312156200059a576200059962000392565b5b6000620005aa85828601620003ea565b925050602083015167ffffffffffffffff811115620005ce57620005cd62000397565b5b620005dc858286016200054d565b9150509250929050565b600082825260208201905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b600062000655602d83620005e6565b91506200066282620005f7565b604082019050919050565b60006020820190508181036000830152620006888162000646565b9050919050565b600081519050919050565b600081905092915050565b6000620006b2826200068f565b620006be81856200069a565b9350620006d0818560208601620004d6565b80840191505092915050565b6000620006ea8284620006a5565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006200072d601d83620005e6565b91506200073a82620006f5565b602082019050919050565b6000602082019050818103600083015262000760816200071e565b9050919050565b600081519050919050565b60006200077f8262000767565b6200078b8185620005e6565b93506200079d818560208601620004d6565b620007a8816200040b565b840191505092915050565b60006020820190508181036000830152620007cf818462000772565b905092915050565b61044380620007e76000396000f3fe6080604052366100135761001161001d565b005b61001b61001d565b005b610025610091565b610035610030610093565b6100a2565b565b606061005c83836040518060600160405280602781526020016103e7602791396100c8565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b565b600061009d61014e565b905090565b3660008037600080366000845af43d6000803e80600081146100c3573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516100f291906102db565b600060405180830381855af49150503d806000811461012d576040519150601f19603f3d011682016040523d82523d6000602084013e610132565b606091505b5091509150610143868383876101a5565b925050509392505050565b600061017c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610087565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606083156102075760008351036101ff576101bf85610064565b6101fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f59061034f565b60405180910390fd5b5b829050610212565b610211838361021a565b5b949350505050565b60008251111561022d5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026191906103c4565b60405180910390fd5b600081519050919050565b600081905092915050565b60005b8381101561029e578082015181840152602081019050610283565b60008484015250505050565b60006102b58261026a565b6102bf8185610275565b93506102cf818560208601610280565b80840191505092915050565b60006102e782846102aa565b915081905092915050565b600082825260208201905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610339601d836102f2565b915061034482610303565b602082019050919050565b600060208201905081810360008301526103688161032c565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006103968261036f565b6103a081856102f2565b93506103b0818560208601610280565b6103b98161037a565b840191505092915050565b600060208201905081810360008301526103de818461038b565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d7c51eae9d52e7ae8a67059446a6cb47ecf507c5f20d13ab7a7f05707d9806e064736f6c63430008110033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e9bbe671b34727a5cbd55aaf6acfc4914df5ebac16fa5216cfa401702a1cdeac64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_pluginRepoRegistry": "The plugin registry address."
        }
      },
      "createPluginRepo(address)": {
        "params": {
          "_initialOwner": "The plugin maintainer address."
        }
      },
      "createPluginRepoWithFirstVersion(address,address,bytes,bytes)": {
        "details": "After the creation of the `PluginRepo` and release of the first version by the factory, ownership is transferred to the `_maintainer` address.",
        "params": {
          "_buildMetadata": "The build metadata URI.",
          "_maintainer": "The maintainer of the plugin repo. This address has permission to update metadata, upgrade the repo logic, and manage the repo permissions.",
          "_pluginSetup": "The plugin factory contract associated with the plugin version.",
          "_releaseMetadata": "The release metadata URI."
        }
      }
    },
    "title": "PluginRepoFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initializes the addresses of the `PluginRepo` base contract to proxy to."
      },
      "createPluginRepo(address)": {
        "notice": "Creates a plugin repository proxy pointing to the `pluginRepoBase` implementation."
      },
      "createPluginRepoWithFirstVersion(address,address,bytes,bytes)": {
        "notice": "Creates a `PluginRepo` and publishes an initial version `1.0`."
      },
      "pluginRepoBase()": {
        "notice": "The address of the `PluginRepo` base contract."
      },
      "pluginRepoRegistry()": {
        "notice": "The plugin registry contract."
      }
    },
    "notice": "This contract creates `PluginRepo` proxies and registers them on an `PluginRepoRegistry` contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4113,
        "contract": "contracts/factory/plugin/repo/PluginRepoFactory.sol:PluginRepoFactory",
        "label": "pluginRepoRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(PluginRepoRegistry)4440"
      },
      {
        "astId": 4116,
        "contract": "contracts/factory/plugin/repo/PluginRepoFactory.sol:PluginRepoFactory",
        "label": "pluginRepoBase",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(PluginRepoRegistry)4440": {
        "encoding": "inplace",
        "label": "contract PluginRepoRegistry",
        "numberOfBytes": "20"
      }
    }
  }
}