{
  "address": "0xcc291844029e50834b35E292BeCE7708075739AC",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "ActionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AnyAddressDisallowedForWhoAndWhere",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ConditionNotPresentForAnyAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "NativeTokenDepositAmountMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "permissionId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "currentCondition",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newCondition",
          "type": "address"
        }
      ],
      "name": "PermissionAlreadyGrantedForDifferentCondition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermissionsForAnyAddressDisallowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyActions",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "permissionId",
          "type": "bytes32"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "callbackSelector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes4",
          "name": "magicNumber",
          "type": "bytes4"
        }
      ],
      "name": "UnknownCallback",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "CallbackReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "daoAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "daoURI",
          "type": "string"
        }
      ],
      "name": "DAOURIUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_reference",
          "type": "string"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "callId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct IDAO.Action[]",
          "name": "actions",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "failureMap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "execResults",
          "type": "bytes[]"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "permissionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "here",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "where",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPermissionCondition",
          "name": "condition",
          "type": "address"
        }
      ],
      "name": "Granted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "MetadataSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NativeTokenDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "daoURI",
          "type": "string"
        }
      ],
      "name": "NewURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "permissionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "here",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "where",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "signatureValidator",
          "type": "address"
        }
      ],
      "name": "SignatureValidatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "callbackSelector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "magicNumber",
          "type": "bytes4"
        }
      ],
      "name": "StandardCallbackRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "EXECUTE_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REGISTER_STANDARD_CALLBACK_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_METADATA_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_SIGNATURE_VALIDATOR_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_TRUSTED_FORWARDER_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_DAO_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum PermissionLib.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "where",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "who",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "condition",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "permissionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermissionLib.MultiTargetPermission[]",
          "name": "_items",
          "type": "tuple[]"
        }
      ],
      "name": "applyMultiTargetPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_where",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum PermissionLib.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "who",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "permissionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermissionLib.SingleTargetPermission[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "applySingleTargetPermissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_reference",
          "type": "string"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_callId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IDAO.Action[]",
          "name": "_actions",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_allowFailureMap",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "execResults",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "failureMap",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_permissionId",
          "type": "bytes32"
        }
      ],
      "name": "grant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_permissionId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IPermissionCondition",
          "name": "_condition",
          "type": "address"
        }
      ],
      "name": "grantWithCondition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_permissionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "daoURI_",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_permissionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "isGranted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        },
        {
          "internalType": "bytes4",
          "name": "_callbackSelector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes4",
          "name": "_magicNumber",
          "type": "bytes4"
        }
      ],
      "name": "registerStandardCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_permissionId",
          "type": "bytes32"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newDaoURI",
          "type": "string"
        }
      ],
      "name": "setDaoURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        }
      ],
      "name": "setMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signatureValidator",
          "type": "address"
        }
      ],
      "name": "setSignatureValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTrustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signatureValidator",
      "outputs": [
        {
          "internalType": "contract IERC1271",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf3b730eed422eea34439823e6491dfe28a9771a1db470ecb15d9838799fe4416",
  "receipt": {
    "to": null,
    "from": "0x90ad449DEb987A1f34D5127751874E9BBD223F2f",
    "contractAddress": "0xcc291844029e50834b35E292BeCE7708075739AC",
    "transactionIndex": 1,
    "gasUsed": "4628278",
    "logsBloom": "0x
    "blockHash": "0xf36524c95c86ada9a8581b6bbf8287c2f85003222db98bbde10b35b8282f6cab",
    "transactionHash": "0xf3b730eed422eea34439823e6491dfe28a9771a1db470ecb15d9838799fe4416",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 30724009,
        "transactionHash": "0xf3b730eed422eea34439823e6491dfe28a9771a1db470ecb15d9838799fe4416",
        "address": "0xcc291844029e50834b35E292BeCE7708075739AC",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 4,
        "blockHash": "0xf36524c95c86ada9a8581b6bbf8287c2f85003222db98bbde10b35b8282f6cab"
      }
    ],
    "blockNumber": 30724009,
    "cumulativeGasUsed": "4936797",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0436994da4f1886ef7ba0eafc5c461be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ActionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AnyAddressDisallowedForWhoAndWhere\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConditionNotPresentForAnyAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"NativeTokenDepositAmountMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currentCondition\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newCondition\",\"type\":\"address\"}],\"name\":\"PermissionAlreadyGrantedForDifferentCondition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermissionsForAnyAddressDisallowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyActions\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"callbackSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"magicNumber\",\"type\":\"bytes4\"}],\"name\":\"UnknownCallback\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallbackReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"daoURI\",\"type\":\"string\"}],\"name\":\"DAOURIUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"callId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IDAO.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"failureMap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"execResults\",\"type\":\"bytes[]\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"here\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPermissionCondition\",\"name\":\"condition\",\"type\":\"address\"}],\"name\":\"Granted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"MetadataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeTokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"daoURI\",\"type\":\"string\"}],\"name\":\"NewURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"here\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signatureValidator\",\"type\":\"address\"}],\"name\":\"SignatureValidatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"callbackSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"magicNumber\",\"type\":\"bytes4\"}],\"name\":\"StandardCallbackRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"EXECUTE_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTER_STANDARD_CALLBACK_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_METADATA_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_SIGNATURE_VALIDATOR_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_TRUSTED_FORWARDER_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_DAO_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"_items\",\"type\":\"tuple[]\"}],\"name\":\"applyMultiTargetPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_where\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.SingleTargetPermission[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"applySingleTargetPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_callId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDAO.Action[]\",\"name\":\"_actions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_allowFailureMap\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"execResults\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"failureMap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_permissionId\",\"type\":\"bytes32\"}],\"name\":\"grant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_permissionId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IPermissionCondition\",\"name\":\"_condition\",\"type\":\"address\"}],\"name\":\"grantWithCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_permissionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"daoURI_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_permissionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"isGranted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"_magicNumber\",\"type\":\"bytes4\"}],\"name\":\"registerStandardCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_permissionId\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newDaoURI\",\"type\":\"string\"}],\"name\":\"setDaoURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signatureValidator\",\"type\":\"address\"}],\"name\":\"setSignatureValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTrustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatureValidator\",\"outputs\":[{\"internalType\":\"contract IERC1271\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ActionFailed(uint256)\":[{\"params\":{\"index\":\"The index of the action in the action array that failed.\"}}],\"NativeTokenDepositAmountMismatch(uint256,uint256)\":[{\"params\":{\"actual\":\"The actual native token amount deposited.\",\"expected\":\"The expected native token amount.\"}}],\"PermissionAlreadyGrantedForDifferentCondition(address,address,bytes32,address,address)\":[{\"details\":\"This makes sure that condition on the same permission can not be overwriten by a different condition.\",\"params\":{\"currentCondition\":\"The current condition set for permissionId.\",\"newCondition\":\"The new condition it tries to set for permissionId.\",\"permissionId\":\"The permission identifier.\",\"where\":\"The address of the target contract to grant `_who` permission to.\",\"who\":\"The address (EOA or contract) to which the permission has already been granted.\"}}],\"Unauthorized(address,address,bytes32)\":[{\"params\":{\"permissionId\":\"The permission identifier.\",\"where\":\"The context in which the authorization reverted.\",\"who\":\"The address (EOA or contract) missing the permission.\"}}],\"UnknownCallback(bytes4,bytes4)\":[{\"params\":{\"callbackSelector\":\"The selector of the callback function.\",\"magicNumber\":\"The magic number to be registered for the callback function selector.\"}}]},\"events\":{\"NewURI(string)\":{\"params\":{\"daoURI\":\"The new uri.\"}}},\"kind\":\"dev\",\"methods\":{\"applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])\":{\"params\":{\"_items\":\"The array of multi-targeted permission operations to apply.\"}},\"applySingleTargetPermissions(address,(uint8,address,bytes32)[])\":{\"params\":{\"_where\":\"The address of the single target contract.\",\"items\":\"The array of single-targeted permission operations to apply.\"}},\"deposit(address,uint256,string)\":{\"params\":{\"_amount\":\"The amount of tokens to deposit.\",\"_reference\":\"The reference describing the deposit reason.\",\"_token\":\"The address of the token or address(0) in case of the native token.\"}},\"execute(bytes32,(address,uint256,bytes)[],uint256)\":{\"params\":{\"_actions\":\"The array of actions.\",\"_allowFailureMap\":\"A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\",\"_callId\":\"The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\"},\"returns\":{\"execResults\":\"The array of results obtained from the executed actions in `bytes`.\",\"failureMap\":\"The constructed failureMap which contains which actions have actually failed.\"}},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"The trusted forwarder address.\"}},\"grant(address,address,bytes32)\":{\"details\":\"Requires the `ROOT_PERMISSION_ID` permission.Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\",\"params\":{\"_permissionId\":\"The permission identifier.\",\"_where\":\"The address of the target contract for which `_who` recieves permission.\",\"_who\":\"The address (EOA or contract) receiving the permission.\"}},\"grantWithCondition(address,address,bytes32,address)\":{\"details\":\"Requires the `ROOT_PERMISSION_ID` permissionNote, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\",\"params\":{\"_condition\":\"The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\",\"_permissionId\":\"The permission identifier.\",\"_where\":\"The address of the target contract for which `_who` recieves permission.\",\"_who\":\"The address (EOA or contract) receiving the permission.\"}},\"hasPermission(address,address,bytes32,bytes)\":{\"params\":{\"_data\":\"The optional data passed to the `PermissionCondition` registered.\",\"_permissionId\":\"The permission identifier.\",\"_where\":\"The address of the contract.\",\"_who\":\"The address of a EOA or contract to give the permissions.\"},\"returns\":{\"_0\":\"Returns true if the address has permission, false if not.\"}},\"initialize(bytes,address,address,string)\":{\"details\":\"This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).\",\"params\":{\"_initialOwner\":\"The initial owner of the DAO having the `ROOT_PERMISSION_ID` permission.\",\"_metadata\":\"IPFS hash that points to all the metadata (logo, description, tags, etc.) of a DAO.\",\"_trustedForwarder\":\"The trusted forwarder responsible for verifying meta transactions.\"}},\"isGranted(address,address,bytes32,bytes)\":{\"params\":{\"_data\":\"The optional data passed to the `PermissionCondition` registered.\",\"_permissionId\":\"The permission identifier.\",\"_where\":\"The address of the target contract for which `_who` recieves permission.\",\"_who\":\"The address (EOA or contract) for which the permission is checked.\"},\"returns\":{\"_0\":\"Returns true if `_who` has the permissions on the target contract via the specified permission identifier.\"}},\"isValidSignature(bytes32,bytes)\":{\"params\":{\"_hash\":\"The hash of the data to be signed.\",\"_signature\":\"The signature byte array associated with `_hash`.\"},\"returns\":{\"_0\":\"Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"registerStandardCallback(bytes4,bytes4,bytes4)\":{\"params\":{\"_callbackSelector\":\"The selector of the callback function.\",\"_interfaceId\":\"The ID of the interface.\",\"_magicNumber\":\"The magic number to be registered for the function signature.\"}},\"revoke(address,address,bytes32)\":{\"details\":\"Requires the `ROOT_PERMISSION_ID` permission.Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that exist in parallel.\",\"params\":{\"_permissionId\":\"The permission identifier.\",\"_where\":\"The address of the target contract for which `_who` loses permission.\",\"_who\":\"The address (EOA or contract) losing the permission.\"}},\"setDaoURI(string)\":{\"params\":{\"newDaoURI\":\"The new DAO uri to be set.\"}},\"setMetadata(bytes)\":{\"params\":{\"_metadata\":\"The IPFS hash of the new metadata object.\"}},\"setSignatureValidator(address)\":{\"params\":{\"_signatureValidator\":\"The address of the signature validator.\"}},\"setTrustedForwarder(address)\":{\"params\":{\"_trustedForwarder\":\"The trusted forwarder address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"DAO\",\"version\":1},\"userdoc\":{\"errors\":{\"ActionFailed(uint256)\":[{\"notice\":\"Thrown if action execution has failed.\"}],\"AnyAddressDisallowedForWhoAndWhere()\":[{\"notice\":\"Thrown for permission grants where `who` and `where` are both `ANY_ADDR`.\"}],\"ConditionNotPresentForAnyAddress()\":[{\"notice\":\"Thrown for permission grants where `who` or `where` is `ANY_ADDR`, but no condition is present.\"}],\"NativeTokenDepositAmountMismatch(uint256,uint256)\":[{\"notice\":\"Thrown if there is a mismatch between the expected and actually deposited amount of native tokens.\"}],\"PermissionAlreadyGrantedForDifferentCondition(address,address,bytes32,address,address)\":[{\"notice\":\"Thrown if a permission has been already granted with a different condition.\"}],\"PermissionsForAnyAddressDisallowed()\":[{\"notice\":\"Thrown for `ROOT_PERMISSION_ID` or `EXECUTE_PERMISSION_ID` permission grants where `who` or `where` is `ANY_ADDR`.\"}],\"TooManyActions()\":[{\"notice\":\"Thrown if the action array length is larger than `MAX_ACTIONS`.\"}],\"Unauthorized(address,address,bytes32)\":[{\"notice\":\"Thrown if a call is unauthorized.\"}],\"UnknownCallback(bytes4,bytes4)\":[{\"notice\":\"Thrown if the callback function is not registered.\"}],\"ZeroAmount()\":[{\"notice\":\"Thrown if the deposit amount is zero.\"}]},\"events\":{\"CallbackReceived(address,bytes4,bytes)\":{\"notice\":\"Emitted when `_handleCallback` is called.\"},\"Deposited(address,address,uint256,string)\":{\"notice\":\"Emitted when a token deposit has been made to the DAO.\"},\"Executed(address,bytes32,(address,uint256,bytes)[],uint256,bytes[])\":{\"notice\":\"Emitted when a proposal is executed.\"},\"Granted(bytes32,address,address,address,address)\":{\"notice\":\"Emitted when a permission `permission` is granted in the context `here` to the address `_who` for the contract `_where`.\"},\"MetadataSet(bytes)\":{\"notice\":\"Emitted when the DAO metadata is updated.\"},\"NativeTokenDeposited(address,uint256)\":{\"notice\":\"Emitted when a native token deposit has been made to the DAO.\"},\"NewURI(string)\":{\"notice\":\"Emitted when a new DAO uri is set.\"},\"Revoked(bytes32,address,address,address)\":{\"notice\":\"Emitted when a permission `permission` is revoked in the context `here` from the address `_who` for the contract `_where`.\"},\"SignatureValidatorSet(address)\":{\"notice\":\"Emitted when the signature validator address is updated.\"},\"StandardCallbackRegistered(bytes4,bytes4,bytes4)\":{\"notice\":\"Emitted when a standard callback is registered.\"},\"TrustedForwarderSet(address)\":{\"notice\":\"Emitted when a new TrustedForwarder is set on the DAO.\"}},\"kind\":\"user\",\"methods\":{\"EXECUTE_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `execute` function.\"},\"REGISTER_STANDARD_CALLBACK_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `registerStandardCallback` function.\"},\"ROOT_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `grant`, `grantWithCondition`, `revoke`, and `bulk` function.\"},\"SET_METADATA_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `setMetadata` function.\"},\"SET_SIGNATURE_VALIDATOR_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `setSignatureValidator` function.\"},\"SET_TRUSTED_FORWARDER_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `setTrustedForwarder` function.\"},\"UPGRADE_DAO_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `_authorizeUpgrade` function.\"},\"applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])\":{\"notice\":\"Applies an array of permission operations on multiple target contracts `items[i].where`.\"},\"applySingleTargetPermissions(address,(uint8,address,bytes32)[])\":{\"notice\":\"Applies an array of permission operations on a single target contracts `_where`.\"},\"constructor\":{\"notice\":\"Disables the initializers on the implementation contract to prevent it from being left uninitialized.\"},\"daoURI()\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) pointing to a JSON object following the \\\"ERC-4824 DAO JSON-LD Schema\\\". This JSON file splits into four URIs: membersURI, proposalsURI, activityLogURI, and governanceURI. The membersURI should point to a JSON file that conforms to the \\\"ERC-4824 Members JSON-LD Schema\\\". The proposalsURI should point to a JSON file that conforms to the \\\"ERC-4824 Proposals JSON-LD Schema\\\". The activityLogURI should point to a JSON file that conforms to the \\\"ERC-4824 Activity Log JSON-LD Schema\\\". The governanceURI should point to a flatfile, normatively a .md file. Each of the JSON files named above can be statically-hosted or dynamically-generated.\"},\"deposit(address,uint256,string)\":{\"notice\":\"Deposits (native) tokens to the DAO contract with a reference string.\"},\"execute(bytes32,(address,uint256,bytes)[],uint256)\":{\"notice\":\"Executes a list of actions. If no failure map is provided, one failing action results in the entire excution to be reverted. If a non-zero failure map is provided, allowed actions can fail without the remaining actions being reverted.\"},\"getTrustedForwarder()\":{\"notice\":\"Getter for the trusted forwarder verifying the meta transaction.\"},\"grant(address,address,bytes32)\":{\"notice\":\"Grants permission to an address to call methods in a contract guarded by an auth modifier with the specified permission identifier.\"},\"grantWithCondition(address,address,bytes32,address)\":{\"notice\":\"Grants permission to an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier if the referenced condition permits it.\"},\"hasPermission(address,address,bytes32,bytes)\":{\"notice\":\"Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\"},\"initialize(bytes,address,address,string)\":{\"notice\":\"Initializes the DAO by - registering the [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID - setting the trusted forwarder for meta transactions - giving the `ROOT_PERMISSION_ID` permission to the initial owner (that should be revoked and transferred to the DAO after setup).\"},\"isGranted(address,address,bytes32,bytes)\":{\"notice\":\"Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\"},\"registerStandardCallback(bytes4,bytes4,bytes4)\":{\"notice\":\"Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\"},\"revoke(address,address,bytes32)\":{\"notice\":\"Revokes permission from an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier.\"},\"setDaoURI(string)\":{\"notice\":\"Updates the set DAO uri to a new value.\"},\"setMetadata(bytes)\":{\"notice\":\"Updates the DAO metadata (e.g., an IPFS hash).\"},\"setSignatureValidator(address)\":{\"notice\":\"Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\"},\"setTrustedForwarder(address)\":{\"notice\":\"Setter for the trusted forwarder verifying the meta transaction.\"},\"signatureValidator()\":{\"notice\":\"The [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\"}},\"notice\":\"This contract contains the logic for a DAO\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/dao/DAO.sol\":\"DAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165StorageUpgradeable is Initializable, ERC165Upgradeable {\\n    function __ERC165Storage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165Storage_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8abf30b22b9f34c48c1101400a3172483cfa4fdc5e4de6d040309463e6faee4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"contracts/core/dao/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\nimport {PermissionManager} from \\\"../permission/PermissionManager.sol\\\";\\nimport {CallbackHandler} from \\\"../utils/CallbackHandler.sol\\\";\\nimport {hasBit, flipBit} from \\\"../utils/BitMap.sol\\\";\\nimport {IEIP4824} from \\\"./IEIP4824.sol\\\";\\nimport {IDAO} from \\\"./IDAO.sol\\\";\\n\\n/// @title DAO\\n/// @notice This contract contains the logic for a DAO\\ncontract DAO is\\n    IEIP4824,\\n    Initializable,\\n    IERC1271,\\n    ERC165StorageUpgradeable,\\n    IDAO,\\n    UUPSUpgradeable,\\n    PermissionManager,\\n    CallbackHandler\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n\\n    /// @notice The ID of the permission required to call the `execute` function.\\n    bytes32 public constant EXECUTE_PERMISSION_ID = keccak256(\\\"EXECUTE_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `_authorizeUpgrade` function.\\n    bytes32 public constant UPGRADE_DAO_PERMISSION_ID = keccak256(\\\"UPGRADE_DAO_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `setMetadata` function.\\n    bytes32 public constant SET_METADATA_PERMISSION_ID = keccak256(\\\"SET_METADATA_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `setTrustedForwarder` function.\\n    bytes32 public constant SET_TRUSTED_FORWARDER_PERMISSION_ID =\\n        keccak256(\\\"SET_TRUSTED_FORWARDER_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `setSignatureValidator` function.\\n    bytes32 public constant SET_SIGNATURE_VALIDATOR_PERMISSION_ID =\\n        keccak256(\\\"SET_SIGNATURE_VALIDATOR_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `registerStandardCallback` function.\\n    bytes32 public constant REGISTER_STANDARD_CALLBACK_PERMISSION_ID =\\n        keccak256(\\\"REGISTER_STANDARD_CALLBACK_PERMISSION\\\");\\n\\n    /// @notice The internal constant storing the maximal action array length.\\n    uint256 internal constant MAX_ACTIONS = 256;\\n\\n    /// @notice The [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    IERC1271 public signatureValidator;\\n\\n    /// @notice The address of the trusted forwarder verifying meta transactions.\\n    address private trustedForwarder;\\n\\n    /// @notice The [EIP-4824](https://eips.ethereum.org/EIPS/eip-4824) DAO uri.\\n    string private _daoURI;\\n\\n    /// @notice Thrown if the action array length is larger than `MAX_ACTIONS`.\\n    error TooManyActions();\\n\\n    /// @notice Thrown if action execution has failed.\\n    /// @param index The index of the action in the action array that failed.\\n    error ActionFailed(uint256 index);\\n\\n    /// @notice Thrown if the deposit amount is zero.\\n    error ZeroAmount();\\n\\n    /// @notice Thrown if there is a mismatch between the expected and actually deposited amount of native tokens.\\n    /// @param expected The expected native token amount.\\n    /// @param actual The actual native token amount deposited.\\n    error NativeTokenDepositAmountMismatch(uint256 expected, uint256 actual);\\n\\n    /// @notice Emitted when a new DAO uri is set.\\n    /// @param daoURI The new uri.\\n    event NewURI(string daoURI);\\n\\n    /// @notice Disables the initializers on the implementation contract to prevent it from being left uninitialized.\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the DAO by\\n    /// - registering the [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID\\n    /// - setting the trusted forwarder for meta transactions\\n    /// - giving the `ROOT_PERMISSION_ID` permission to the initial owner (that should be revoked and transferred to the DAO after setup).\\n    /// @dev This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).\\n    /// @param _metadata IPFS hash that points to all the metadata (logo, description, tags, etc.) of a DAO.\\n    /// @param _initialOwner The initial owner of the DAO having the `ROOT_PERMISSION_ID` permission.\\n    /// @param _trustedForwarder The trusted forwarder responsible for verifying meta transactions.\\n    function initialize(\\n        bytes calldata _metadata,\\n        address _initialOwner,\\n        address _trustedForwarder,\\n        string calldata daoURI_\\n    ) external initializer {\\n        _registerInterface(type(IDAO).interfaceId);\\n        _registerInterface(type(IERC1271).interfaceId);\\n        _registerInterface(type(IEIP4824).interfaceId);\\n        _registerTokenInterfaces();\\n\\n        _setMetadata(_metadata);\\n        _setTrustedForwarder(_trustedForwarder);\\n        _setDaoURI(daoURI_);\\n        __PermissionManager_init(_initialOwner);\\n    }\\n\\n    /// @inheritdoc PermissionManager\\n    function isPermissionRestrictedForAnyAddr(\\n        bytes32 _permissionId\\n    ) internal pure override returns (bool) {\\n        return\\n            _permissionId == EXECUTE_PERMISSION_ID ||\\n            _permissionId == UPGRADE_DAO_PERMISSION_ID ||\\n            _permissionId == SET_METADATA_PERMISSION_ID ||\\n            _permissionId == SET_TRUSTED_FORWARDER_PERMISSION_ID ||\\n            _permissionId == SET_SIGNATURE_VALIDATOR_PERMISSION_ID ||\\n            _permissionId == REGISTER_STANDARD_CALLBACK_PERMISSION_ID;\\n    }\\n\\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeabilty mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    /// @dev The caller must have the `UPGRADE_DAO_PERMISSION_ID` permission.\\n    function _authorizeUpgrade(address) internal virtual override auth(UPGRADE_DAO_PERMISSION_ID) {}\\n\\n    /// @inheritdoc IDAO\\n    function setTrustedForwarder(\\n        address _newTrustedForwarder\\n    ) external override auth(SET_TRUSTED_FORWARDER_PERMISSION_ID) {\\n        _setTrustedForwarder(_newTrustedForwarder);\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function getTrustedForwarder() external view virtual override returns (address) {\\n        return trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view override returns (bool) {\\n        return isGranted(_where, _who, _permissionId, _data);\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function setMetadata(\\n        bytes calldata _metadata\\n    ) external override auth(SET_METADATA_PERMISSION_ID) {\\n        _setMetadata(_metadata);\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function execute(\\n        bytes32 _callId,\\n        Action[] calldata _actions,\\n        uint256 _allowFailureMap\\n    )\\n        external\\n        override\\n        auth(EXECUTE_PERMISSION_ID)\\n        returns (bytes[] memory execResults, uint256 failureMap)\\n    {\\n        if (_actions.length > MAX_ACTIONS) {\\n            revert TooManyActions();\\n        }\\n\\n        execResults = new bytes[](_actions.length);\\n\\n        for (uint256 i = 0; i < _actions.length; ) {\\n            address to = _actions[i].to;\\n            (bool success, bytes memory response) = to.call{value: _actions[i].value}(\\n                _actions[i].data\\n            );\\n\\n            if (!success) {\\n                // If the call failed and wasn't allowed in allowFailureMap, revert.\\n                if (!hasBit(_allowFailureMap, uint8(i))) {\\n                    revert ActionFailed(i);\\n                }\\n\\n                // If the call failed, but was allowed in allowFailureMap, store that\\n                // this specific action has actually failed.\\n                failureMap = flipBit(failureMap, uint8(i));\\n            }\\n\\n            execResults[i] = response;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit Executed({\\n            actor: msg.sender,\\n            callId: _callId,\\n            actions: _actions,\\n            failureMap: failureMap,\\n            execResults: execResults\\n        });\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        string calldata _reference\\n    ) external payable override {\\n        if (_amount == 0) revert ZeroAmount();\\n\\n        if (_token == address(0)) {\\n            if (msg.value != _amount)\\n                revert NativeTokenDepositAmountMismatch({expected: _amount, actual: msg.value});\\n        } else {\\n            if (msg.value != 0)\\n                revert NativeTokenDepositAmountMismatch({expected: 0, actual: msg.value});\\n\\n            IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        }\\n\\n        emit Deposited(msg.sender, _token, _amount, _reference);\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function setSignatureValidator(\\n        address _signatureValidator\\n    ) external override auth(SET_SIGNATURE_VALIDATOR_PERMISSION_ID) {\\n        signatureValidator = IERC1271(_signatureValidator);\\n\\n        emit SignatureValidatorSet({signatureValidator: _signatureValidator});\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function isValidSignature(\\n        bytes32 _hash,\\n        bytes memory _signature\\n    ) external view override(IDAO, IERC1271) returns (bytes4) {\\n        if (address(signatureValidator) == address(0)) {\\n            // Return the invalid magic number\\n            return bytes4(0);\\n        }\\n        // Forward the call to the set signature validator contract\\n        return signatureValidator.isValidSignature(_hash, _signature);\\n    }\\n\\n    /// @notice Emits the `NativeTokenDeposited` event to track native token deposits that weren't made via the deposit method.\\n    /// @dev This call is bound by the gas limitations for `send`/`transfer` calls introduced by EIP-2929.\\n    /// Gas cost increases in future hard forks might break this function. As an alternative, EIP-2930-type transactions using access lists can be employed.\\n    receive() external payable {\\n        emit NativeTokenDeposited(msg.sender, msg.value);\\n    }\\n\\n    /// @notice Fallback to handle future versions of the [ERC-165](https://eips.ethereum.org/EIPS/eip-165) standard.\\n    /// @param _input An alias being equivalent to `msg.data`. This feature of the fallback function was introduced with the [solidity compiler version 0.7.6](https://github.com/ethereum/solidity/releases/tag/v0.7.6)\\n    /// @return The magic number registered for the function selector triggering the fallback.\\n    fallback(bytes calldata _input) external returns (bytes memory) {\\n        bytes4 magicNumber = _handleCallback(msg.sig, _input);\\n        return abi.encode(magicNumber);\\n    }\\n\\n    /// @notice Emits the MetadataSet event if new metadata is set.\\n    /// @param _metadata Hash of the IPFS metadata object.\\n    function _setMetadata(bytes calldata _metadata) internal {\\n        emit MetadataSet(_metadata);\\n    }\\n\\n    /// @notice Sets the trusted forwarder on the DAO and emits the associated event.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function _setTrustedForwarder(address _trustedForwarder) internal {\\n        trustedForwarder = _trustedForwarder;\\n\\n        emit TrustedForwarderSet(_trustedForwarder);\\n    }\\n\\n    /// @notice Registers the ERC721/ERC1155 interfaces and callbacks.\\n    function _registerTokenInterfaces() private {\\n        _registerInterface(type(IERC721ReceiverUpgradeable).interfaceId);\\n        _registerInterface(type(IERC1155ReceiverUpgradeable).interfaceId);\\n\\n        _registerCallback(\\n            IERC721ReceiverUpgradeable.onERC721Received.selector,\\n            IERC721ReceiverUpgradeable.onERC721Received.selector\\n        );\\n        _registerCallback(\\n            IERC1155ReceiverUpgradeable.onERC1155Received.selector,\\n            IERC1155ReceiverUpgradeable.onERC1155Received.selector\\n        );\\n        _registerCallback(\\n            IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector,\\n            IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector\\n        );\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external override auth(REGISTER_STANDARD_CALLBACK_PERMISSION_ID) {\\n        _registerInterface(_interfaceId);\\n        _registerCallback(_callbackSelector, _magicNumber);\\n        emit StandardCallbackRegistered(_interfaceId, _callbackSelector, _magicNumber);\\n    }\\n\\n    /// @inheritdoc IEIP4824\\n    function daoURI() external view returns (string memory) {\\n        return _daoURI;\\n    }\\n\\n    /// @notice Updates the set DAO uri to a new value.\\n    /// @param newDaoURI The new DAO uri to be set.\\n    function setDaoURI(string calldata newDaoURI) external auth(SET_METADATA_PERMISSION_ID) {\\n        _setDaoURI(newDaoURI);\\n    }\\n\\n    /// @notice Sets the new DAO uri and emits the associated event.\\n    /// @param daoURI_ The new DAO uri.\\n    function _setDaoURI(string calldata daoURI_) internal {\\n        _daoURI = daoURI_;\\n\\n        emit NewURI(daoURI_);\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[47] private __gap;\\n}\",\"keccak256\":\"0x60d2a2bdf3de9553e33413ba8b29cb484a601bde594bb9104d282b963c106036\",\"license\":\"MIT\"},\"contracts/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title IDAO\\n/// @notice The interface required for DAOs\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If no failure map is provided, one failing action results in the entire excution to be reverted. If a non-zero failure map is provided, allowed actions can fail without the remaining actions being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The constructed failureMap which contains which actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external;\\n}\",\"keccak256\":\"0xd5b4cb2fab92eb9953f41ea15be8b857a484d1f10b6b219c94ed3fa89c482e41\",\"license\":\"MIT\"},\"contracts/core/dao/IEIP4824.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title ERC-4824 DAOs\\n/// @dev See <https://eips.ethereum.org/EIPS/eip-4824>\\ninterface IEIP4824 {\\n    event DAOURIUpdate(address daoAddress, string daoURI);\\n    /// @notice A distinct Uniform Resource Identifier (URI) pointing to a JSON object following the \\\"ERC-4824 DAO JSON-LD Schema\\\". This JSON file splits into four URIs: membersURI, proposalsURI, activityLogURI, and governanceURI. The membersURI should point to a JSON file that conforms to the \\\"ERC-4824 Members JSON-LD Schema\\\". The proposalsURI should point to a JSON file that conforms to the \\\"ERC-4824 Proposals JSON-LD Schema\\\". The activityLogURI should point to a JSON file that conforms to the \\\"ERC-4824 Activity Log JSON-LD Schema\\\". The governanceURI should point to a flatfile, normatively a .md file. Each of the JSON files named above can be statically-hosted or dynamically-generated.\\n    function daoURI() external view returns (string memory _daoURI);\\n}\",\"keccak256\":\"0x6d5bf76bf003aded8f37a15c2200b35c1111946ad6474868d0509082f1ba1629\",\"license\":\"MIT\"},\"contracts/core/permission/IPermissionCondition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title IPermissionCondition\\n/// @notice This interface can be implemented to support more customary permissions depending on on- or off-chain state, e.g., by querying token ownership or a secondary condition, respectively.\\ninterface IPermissionCondition {\\n    /// @notice This method is used to check if a call is permitted.\\n    /// @param _where The address of the target contract.\\n    /// @param _who The address (EOA or contract) for which the permission are checked.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data Optional data passed to the `PermissionCondition` implementation.\\n    /// @return allowed Returns true if the call is permitted.\\n    function isGranted(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes calldata _data\\n    ) external view returns (bool allowed);\\n}\",\"keccak256\":\"0x63e728afbb589ce6241f73540acb95cf32bbddfd9fdadf1f8d2e141778d49c19\",\"license\":\"MIT\"},\"contracts/core/permission/PermissionLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title PermissionLib\\n/// @notice A library containing objects for permission processing.\\nlibrary PermissionLib {\\n    /// @notice A constant expressing that no condition is applied to a permission.\\n    address public constant NO_CONDITION = address(0);\\n\\n    /// @notice The types of permission operations available in the `PermissionManager`.\\n    /// @param Grant The grant operation setting a permission without a condition.\\n    /// @param Revoke The revoke operation removing a permission (that was granted with or without a condition).\\n    /// @param GrantWithCondition The grant operation setting a permission with a condition.\\n    enum Operation {\\n        Grant,\\n        Revoke,\\n        GrantWithCondition\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on a single target contract without a condition.\\n    /// @param operation The permission operation type.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param permissionId The permission identifier.\\n    struct SingleTargetPermission {\\n        Operation operation;\\n        address who;\\n        bytes32 permissionId;\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on multiple target contracts, optionally, with a conditon.\\n    /// @param operation The permission operation type.\\n    /// @param where The address of the target contract for which `who` recieves permission.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\\n    /// @param permissionId The permission identifier.\\n    struct MultiTargetPermission {\\n        Operation operation;\\n        address where;\\n        address who;\\n        address condition;\\n        bytes32 permissionId;\\n    }\\n}\",\"keccak256\":\"0x31335c9b3ab11e985b996ad3f2548890d2b3b08c72bb92cba19c7c94bdcf6d05\",\"license\":\"MIT\"},\"contracts/core/permission/PermissionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./IPermissionCondition.sol\\\";\\nimport \\\"./PermissionLib.sol\\\";\\n\\n/// @title PermissionManager\\n/// @notice The abstract permission manager used in a DAO.\\nabstract contract PermissionManager is Initializable {\\n    /// @notice The ID of the permission required to call the `grant`, `grantWithCondition`, `revoke`, and `bulk` function.\\n    bytes32 public constant ROOT_PERMISSION_ID = keccak256(\\\"ROOT_PERMISSION\\\");\\n\\n    /// @notice A special address encoding permissions that are valid for any address `who` or `where`.\\n    address internal constant ANY_ADDR = address(type(uint160).max);\\n\\n    /// @notice A special address encoding if a permissions is not set and therefore not allowed.\\n    address internal constant UNSET_FLAG = address(0);\\n\\n    /// @notice A special address encoding if a permission is allowed.\\n    address internal constant ALLOW_FLAG = address(2);\\n\\n    /// @notice A mapping storing permissions as hashes (i.e., `permissionHash(where, who, permissionId)`) and their status encoded by an address (unset, allowed, or redirecting to a `PermissionCondition`).\\n    mapping(bytes32 => address) internal permissionsHashed;\\n\\n    /// @notice Thrown if a call is unauthorized.\\n    /// @param where The context in which the authorization reverted.\\n    /// @param who The address (EOA or contract) missing the permission.\\n    /// @param permissionId The permission identifier.\\n    error Unauthorized(address where, address who, bytes32 permissionId);\\n\\n    /// @notice Thrown if a permission has been already granted with a different condition.\\n    /// @dev This makes sure that condition on the same permission can not be overwriten by a different condition.\\n    /// @param where The address of the target contract to grant `_who` permission to.\\n    /// @param who The address (EOA or contract) to which the permission has already been granted.\\n    /// @param permissionId The permission identifier.\\n    /// @param currentCondition The current condition set for permissionId.\\n    /// @param newCondition The new condition it tries to set for permissionId.\\n    error PermissionAlreadyGrantedForDifferentCondition(\\n        address where,\\n        address who,\\n        bytes32 permissionId,\\n        address currentCondition,\\n        address newCondition\\n    );\\n\\n    /// @notice Thrown for permission grants where `who` or `where` is `ANY_ADDR`, but no condition is present.\\n    error ConditionNotPresentForAnyAddress();\\n\\n    /// @notice Thrown for `ROOT_PERMISSION_ID` or `EXECUTE_PERMISSION_ID` permission grants where `who` or `where` is `ANY_ADDR`.\\n    error PermissionsForAnyAddressDisallowed();\\n\\n    /// @notice Thrown for permission grants where `who` and `where` are both `ANY_ADDR`.\\n    error AnyAddressDisallowedForWhoAndWhere();\\n\\n    /// @notice Emitted when a permission `permission` is granted in the context `here` to the address `_who` for the contract `_where`.\\n    /// @param permissionId The permission identifier.\\n    /// @param here The address of the context in which the permission is granted.\\n    /// @param where The address of the target contract for which `_who` receives permission.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param condition The address `ALLOW_FLAG` for regular permissions or, alternatively, the `PermissionCondition` to be used.\\n    event Granted(\\n        bytes32 indexed permissionId,\\n        address indexed here,\\n        address where,\\n        address indexed who,\\n        IPermissionCondition condition\\n    );\\n\\n    /// @notice Emitted when a permission `permission` is revoked in the context `here` from the address `_who` for the contract `_where`.\\n    /// @param permissionId The permission identifier.\\n    /// @param here The address of the context in which the permission is revoked.\\n    /// @param where The address of the target contract for which `_who` loses permission.\\n    /// @param who The address (EOA or contract) losing the permission.\\n    event Revoked(\\n        bytes32 indexed permissionId,\\n        address indexed here,\\n        address where,\\n        address indexed who\\n    );\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through this permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(_permissionId);\\n        _;\\n    }\\n\\n    /// @notice Initialization method to set the initial owner of the permission manager.\\n    /// @dev The initial owner is granted the `ROOT_PERMISSION_ID` permission.\\n    /// @param _initialOwner The initial owner of the permission manager.\\n    function __PermissionManager_init(address _initialOwner) internal onlyInitializing {\\n        _initializePermissionManager(_initialOwner);\\n    }\\n\\n    /// @notice Grants permission to an address to call methods in a contract guarded by an auth modifier with the specified permission identifier.\\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) receiving the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function grant(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        _grant(_where, _who, _permissionId);\\n    }\\n\\n    /// @notice Grants permission to an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier if the referenced condition permits it.\\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) receiving the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function grantWithCondition(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        IPermissionCondition _condition\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        _grantWithCondition(_where, _who, _permissionId, _condition);\\n    }\\n\\n    /// @notice Revokes permission from an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier.\\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission.\\n    /// @param _where The address of the target contract for which `_who` loses permission.\\n    /// @param _who The address (EOA or contract) losing the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @dev Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function revoke(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        _revoke(_where, _who, _permissionId);\\n    }\\n\\n    /// @notice Applies an array of permission operations on a single target contracts `_where`.\\n    /// @param _where The address of the single target contract.\\n    /// @param items The array of single-targeted permission operations to apply.\\n    function applySingleTargetPermissions(\\n        address _where,\\n        PermissionLib.SingleTargetPermission[] calldata items\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        for (uint256 i; i < items.length; ) {\\n            PermissionLib.SingleTargetPermission memory item = items[i];\\n\\n            if (item.operation == PermissionLib.Operation.Grant) {\\n                _grant(_where, item.who, item.permissionId);\\n            } else if (item.operation == PermissionLib.Operation.Revoke) {\\n                _revoke(_where, item.who, item.permissionId);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Applies an array of permission operations on multiple target contracts `items[i].where`.\\n    /// @param _items The array of multi-targeted permission operations to apply.\\n    function applyMultiTargetPermissions(\\n        PermissionLib.MultiTargetPermission[] calldata _items\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        for (uint256 i; i < _items.length; ) {\\n            PermissionLib.MultiTargetPermission memory item = _items[i];\\n\\n            if (item.operation == PermissionLib.Operation.Grant) {\\n                _grant(item.where, item.who, item.permissionId);\\n            } else if (item.operation == PermissionLib.Operation.Revoke) {\\n                _revoke(item.where, item.who, item.permissionId);\\n            } else if (item.operation == PermissionLib.Operation.GrantWithCondition) {\\n                _grantWithCondition(\\n                    item.where,\\n                    item.who,\\n                    item.permissionId,\\n                    IPermissionCondition(item.condition)\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) for which the permission is checked.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if `_who` has the permissions on the target contract via the specified permission identifier.\\n    function isGranted(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) public view virtual returns (bool) {\\n        return\\n            _isGranted(_where, _who, _permissionId, _data) || // check if `_who` has permission for `_permissionId` on `_where`\\n            _isGranted(_where, ANY_ADDR, _permissionId, _data) || // check if anyone has permission for `_permissionId` on `_where`\\n            _isGranted(ANY_ADDR, _who, _permissionId, _data); // check if `_who` has permission for `_permissionI` on any contract\\n    }\\n\\n    /// @notice Grants the `ROOT_PERMISSION_ID` permission to the initial owner during initialization of the permission manager.\\n    /// @param _initialOwner The initial owner of the permission manager.\\n    function _initializePermissionManager(address _initialOwner) internal {\\n        _grant(address(this), _initialOwner, ROOT_PERMISSION_ID);\\n    }\\n\\n    /// @notice This method is used in the public `grant` method of the permission manager.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    function _grant(address _where, address _who, bytes32 _permissionId) internal virtual {\\n        _grantWithCondition(_where, _who, _permissionId, IPermissionCondition(ALLOW_FLAG));\\n    }\\n\\n    /// @notice This method is used in the internal `_grant` method of the permission manager.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _condition An address either resolving to a `PermissionCondition` contract address or being the `ALLOW_FLAG` address (`address(2)`).\\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function _grantWithCondition(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        IPermissionCondition _condition\\n    ) internal virtual {\\n        if (_where == ANY_ADDR && _who == ANY_ADDR) {\\n            revert AnyAddressDisallowedForWhoAndWhere();\\n        }\\n\\n        if (_where == ANY_ADDR || _who == ANY_ADDR) {\\n            bool isRestricted = isPermissionRestrictedForAnyAddr(_permissionId);\\n            if (_permissionId == ROOT_PERMISSION_ID || isRestricted) {\\n                revert PermissionsForAnyAddressDisallowed();\\n            }\\n\\n            if (address(_condition) == ALLOW_FLAG) {\\n                revert ConditionNotPresentForAnyAddress();\\n            }\\n        }\\n\\n        bytes32 permHash = permissionHash(_where, _who, _permissionId);\\n\\n        address currentCondition = permissionsHashed[permHash];\\n        address newCondition = address(_condition);\\n\\n        // Means permHash is not currently set.\\n        if (currentCondition == UNSET_FLAG) {\\n            permissionsHashed[permHash] = newCondition;\\n\\n            emit Granted(_permissionId, msg.sender, _where, _who, _condition);\\n        } else if (currentCondition != newCondition) {\\n            // Revert if `permHash` is already granted, but uses a different condition.\\n            // If we don't revert, we either should:\\n            //   - allow overriding the condition on the same permission\\n            //     which could be confusing whoever granted the same permission first\\n            //   - or do nothing and succeed silently which could be confusing for the caller.\\n            revert PermissionAlreadyGrantedForDifferentCondition({\\n                where: _where,\\n                who: _who,\\n                permissionId: _permissionId,\\n                currentCondition: currentCondition,\\n                newCondition: newCondition\\n            });\\n        }\\n    }\\n\\n    /// @notice This method is used in the public `revoke` method of the permission manager.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @dev Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that might have been granted in parallel.\\n    function _revoke(address _where, address _who, bytes32 _permissionId) internal virtual {\\n        bytes32 permHash = permissionHash(_where, _who, _permissionId);\\n        if (permissionsHashed[permHash] != UNSET_FLAG) {\\n            permissionsHashed[permHash] = UNSET_FLAG;\\n\\n            emit Revoked(_permissionId, msg.sender, _where, _who);\\n        }\\n    }\\n\\n    /// @notice Checks if a caller is granted permissions on a target contract via a permission identifier and redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if `_who` has the permissions on the contract via the specified permissionId identifier.\\n    function _isGranted(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) internal view virtual returns (bool) {\\n        address accessFlagOrCondition = permissionsHashed[\\n            permissionHash(_where, _who, _permissionId)\\n        ];\\n\\n        if (accessFlagOrCondition == UNSET_FLAG) return false;\\n        if (accessFlagOrCondition == ALLOW_FLAG) return true;\\n\\n        // Since it's not a flag, assume it's a PermissionCondition and try-catch to skip failures\\n        try\\n            IPermissionCondition(accessFlagOrCondition).isGranted(\\n                _where,\\n                _who,\\n                _permissionId,\\n                _data\\n            )\\n        returns (bool allowed) {\\n            if (allowed) return true;\\n        } catch {}\\n\\n        return false;\\n    }\\n\\n    /// @notice A private function to be used to check permissions on the permission manager contract (`address(this)`) itself.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    function _auth(bytes32 _permissionId) internal view virtual {\\n        if (!isGranted(address(this), msg.sender, _permissionId, msg.data)) {\\n            revert Unauthorized({\\n                where: address(this),\\n                who: msg.sender,\\n                permissionId: _permissionId\\n            });\\n        }\\n    }\\n\\n    /// @notice Generates the hash for the `permissionsHashed` mapping obtained from the word \\\"PERMISSION\\\", the contract address, the address owning the permission, and the permission identifier.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @return The permission hash.\\n    function permissionHash(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId\\n    ) internal pure virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PERMISSION\\\", _who, _where, _permissionId));\\n    }\\n\\n    /// @notice Decides if the granting permissionId is restricted when `_who = ANY_ADDR` or `_where = ANY_ADDR`.\\n    /// @param _permissionId The permission identifier.\\n    /// @return Whether or not the permission is restricted.\\n    /// @dev By default, every permission is unrestricted and it is the derived contract's responsibility to override it. Note, that the `ROOT_PERMISSION_ID` is included not required to be set it again.\\n    function isPermissionRestrictedForAnyAddr(\\n        bytes32 _permissionId\\n    ) internal view virtual returns (bool) {\\n        (_permissionId); // silence the warning.\\n        return false;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0x69b2d8ae34bc058f47f8eb2d142d703fd16c44bbeac203bdef55b6ee552e315d\",\"license\":\"MIT\"},\"contracts/core/utils/BitMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @param bitmap The `uint256` representation of bits.\\n/// @param index The index number to check whether 1 or 0 is set.\\n/// @return Returns `true` whether the bit is set at `index` on `bitmap`.\\nfunction hasBit(uint256 bitmap, uint8 index) pure returns (bool) {\\n    uint256 bitValue = bitmap & (1 << index);\\n    return bitValue > 0;\\n}\\n\\n/// @param bitmap The `uint256` representation of bits.\\n/// @param index The index number to set the bit.\\n/// @return Returns a new number on which the bit is set at `index`.\\nfunction flipBit(uint256 bitmap, uint8 index) pure returns (uint256) {\\n    return bitmap ^ (1 << index);\\n}\",\"keccak256\":\"0x686a09942031c0c970e56bee6241f10022d8ac5a544ba5faecf56a8befa92788\",\"license\":\"MIT\"},\"contracts/core/utils/CallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title CallbackHandler\\n/// @notice This contract handles callbacks by registering a magic number together with the callback function's selector. It provides the `_handleCallback` function that inherting have to call inside their `fallback()` function  (`_handleCallback(msg.callbackSelector, msg.data)`).  This allows to adaptively register ERC standards (e.g., [ERC-721](https://eips.ethereum.org/EIPS/eip-721), [ERC-1115](https://eips.ethereum.org/EIPS/eip-1155), or future versions of [ERC-165](https://eips.ethereum.org/EIPS/eip-165)) and returning the required magic numbers for the associated callback functions for the inheriting contract so that it doesn't need to be upgraded.\\n/// @dev This callback handling functionality is intented to be used by executor contracts (i.e., `DAO.sol`).\\nabstract contract CallbackHandler {\\n    /// @notice A mapping between callback function selectors and magic return numbers.\\n    mapping(bytes4 => bytes4) internal callbackMagicNumbers;\\n\\n    /// @notice The magic number refering to unregistered callbacks.\\n    bytes4 internal constant UNREGISTERED_CALLBACK = bytes4(0);\\n\\n    /// @notice Thrown if the callback function is not registered.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    error UnknownCallback(bytes4 callbackSelector, bytes4 magicNumber);\\n\\n    /// @notice Emitted when `_handleCallback` is called.\\n    /// @param sender Who called the callback.\\n    /// @param sig The function signature.\\n    /// @param data The calldata for the function signature.\\n    event CallbackReceived(address sender, bytes4 indexed sig, bytes data);\\n\\n    /// @notice Handles callbacks to adaptively support ERC standards.\\n    /// @dev This function is supposed to be called via `_handleCallback(msg.sig, msg.data)` in the `fallback()` function of the inheriting contract.\\n    /// @param _callbackSelector The function selector of the callback function.\\n    /// @return The magic number registered for the function selector triggering the fallback.\\n    function _handleCallback(\\n        bytes4 _callbackSelector,\\n        bytes memory _data\\n    ) internal virtual returns (bytes4) {\\n        bytes4 magicNumber = callbackMagicNumbers[_callbackSelector];\\n        if (magicNumber == UNREGISTERED_CALLBACK) {\\n            revert UnknownCallback({callbackSelector: _callbackSelector, magicNumber: magicNumber});\\n        }\\n\\n        emit CallbackReceived({sender: msg.sender, sig: _callbackSelector, data: _data});\\n\\n        return magicNumber;\\n    }\\n\\n    /// @notice Registers a magic number for a callback function selector.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the callback function selector.\\n    function _registerCallback(bytes4 _callbackSelector, bytes4 _magicNumber) internal virtual {\\n        callbackMagicNumbers[_callbackSelector] = _magicNumber;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xd41f30df075cf18e8ce3c8a8f97b5645c2031b70be134bc170faf93cb50dda8b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50620000556200005b60201b60201c565b62000206565b600060019054906101000a900460ff1615620000ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a590620001a9565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff161015620001205760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620001179190620001e9565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200019160278362000122565b91506200019e8262000133565b604082019050919050565b60006020820190508181036000830152620001c48162000182565b9050919050565b600060ff82169050919050565b620001e381620001cb565b82525050565b6000602082019050620002006000830184620001d8565b92915050565b60805161527d6200023e60003960008181610cff01528181610d8d01528181610f5501528181610fe30152611093015261527d6000f3fe6080604052600436106101d15760003560e01c8063829331a1116100f7578063d96054c411610095578063e978afe511610064578063e978afe51461073e578063eafb8b0614610767578063ee57e36f14610790578063fdef9106146107b957610211565b8063d96054c414610696578063da742228146106bf578063e2e35563146106e8578063e306bee71461071357610211565b8063c71bf324116100d1578063c71bf324146105db578063c9dbc2a414610619578063ce1b815f14610642578063d68bad2c1461066d57610211565b8063829331a11461056b578063bfe07da614610596578063c4a50145146105b257610211565b80632675fdd01161016f5780633e2ab0d91161013e5780633e2ab0d9146104d05780634f1ef286146104f957806352d1902d146105155780637034731b1461054057610211565b80632675fdd01461041457806326875b1f146104515780633659cfe61461047c578063388da934146104a557610211565b80631080f99b116101ab5780631080f99b1461035a5780631626ba7e1461038357806322844d04146103c057806324b4d73f146103e957610211565b806301ffc9a7146102c75780630729d0541461030457806309e56b141461032f57610211565b36610211577f62c2c8e34665db7c56b2cabd7f5fb9702ccd352ffa8150147e450797e9f8e8f33334604051610207929190612fa3565b60405180910390a1005b34801561021d57600080fd5b50600036606060006102976000357fffffffff000000000000000000000000000000000000000000000000000000001685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107f6565b9050806040516020016102aa9190613007565b604051602081830303815290604052915050915050805190602001f35b3480156102d357600080fd5b506102ee60048036038101906102e99190613062565b610945565b6040516102fb91906130aa565b60405180910390f35b34801561031057600080fd5b506103196109bd565b60405161032691906130de565b60405180910390f35b34801561033b57600080fd5b506103446109e1565b60405161035191906130de565b60405180910390f35b34801561036657600080fd5b50610381600480360381019061037c919061315e565b610a05565b005b34801561038f57600080fd5b506103aa60048036038101906103a59190613318565b610a3e565b6040516103b79190613007565b60405180910390f35b3480156103cc57600080fd5b506103e760048036038101906103e291906133f6565b610b4a565b005b3480156103f557600080fd5b506103fe610c4f565b60405161040b91906130de565b60405180910390f35b34801561042057600080fd5b5061043b60048036038101906104369190613456565b610c73565b60405161044891906130aa565b60405180910390f35b34801561045d57600080fd5b50610466610cd9565b60405161047391906130de565b60405180910390f35b34801561048857600080fd5b506104a3600480360381019061049e91906134d9565b610cfd565b005b3480156104b157600080fd5b506104ba610e85565b6040516104c79190613565565b60405180910390f35b3480156104dc57600080fd5b506104f760048036038101906104f291906134d9565b610eac565b005b610513600480360381019061050e9190613580565b610f53565b005b34801561052157600080fd5b5061052a61108f565b60405161053791906130de565b60405180910390f35b34801561054c57600080fd5b50610555611148565b604051610562919061365b565b60405180910390f35b34801561057757600080fd5b506105806111db565b60405161058d91906130de565b60405180910390f35b6105b060048036038101906105ab91906136a9565b6111ff565b005b3480156105be57600080fd5b506105d960048036038101906105d4919061371d565b61139d565b005b3480156105e757600080fd5b5061060260048036038101906105fd91906137c6565b61141b565b604051610610929190613951565b60405180910390f35b34801561062557600080fd5b50610640600480360381019061063b91906139bf565b6116db565b005b34801561064e57600080fd5b50610657611718565b6040516106649190613a26565b60405180910390f35b34801561067957600080fd5b50610694600480360381019061068f9190613a41565b611743565b005b3480156106a257600080fd5b506106bd60048036038101906106b89190613a41565b61177e565b005b3480156106cb57600080fd5b506106e660048036038101906106e191906134d9565b6117b9565b005b3480156106f457600080fd5b506106fd6117f0565b60405161070a91906130de565b60405180910390f35b34801561071f57600080fd5b50610728611814565b60405161073591906130de565b60405180910390f35b34801561074a57600080fd5b5061076560048036038101906107609190613aea565b611838565b005b34801561077357600080fd5b5061078e60048036038101906107899190613b8d565b611995565b005b34801561079c57600080fd5b506107b760048036038101906107b29190613c34565b611b7a565b005b3480156107c557600080fd5b506107e060048036038101906107db9190613456565b611bb3565b6040516107ed91906130aa565b60405180910390f35b60008060fb6000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460e01b9050600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036108e25783816040517f4aa318c30000000000000000000000000000000000000000000000000000000081526004016108d9929190613c81565b60405180910390fd5b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f4792cb6e46e49876374bea490ba23274bacea6b84c216a64f47abab54027589b3385604051610933929190613cf4565b60405180910390a28091505092915050565b600061095082611bcb565b806109b6575060336000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff165b9050919050565b7fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d81565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b610a2f81611c35565b610a398383611cce565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff1661012d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610aa257600060e01b9050610b44565b61012d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631626ba7e84846040518363ffffffff1660e01b8152600401610b00929190613d24565b602060405180830381865afa158015610b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b419190613d69565b90505b92915050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610b7481611c35565b60005b83839050811015610c48576000848483818110610b9757610b96613d96565b5b905060600201803603810190610bad9190613e53565b905060006002811115610bc357610bc2613e80565b5b81600001516002811115610bda57610bd9613e80565b5b03610bf757610bf28682602001518360400151611d1e565b610c3c565b60016002811115610c0b57610c0a613e80565b5b81600001516002811115610c2257610c21613e80565b5b03610c3b57610c3a8682602001518360400151611d30565b5b5b81600101915050610b77565b5050505050565b7f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc81565b6000610c8185858585611e66565b80610ca85750610ca78573ffffffffffffffffffffffffffffffffffffffff8585611e66565b5b80610ccf5750610cce73ffffffffffffffffffffffffffffffffffffffff858585611e66565b5b9050949350505050565b7ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc81565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8290613f21565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610dca611fc4565b73ffffffffffffffffffffffffffffffffffffffff1614610e20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1790613fb3565b60405180910390fd5b610e298161201b565b610e8281600067ffffffffffffffff811115610e4857610e476131ed565b5b6040519080825280601f01601f191660200182016040528015610e7a5781602001600182028036833780820191505090505b506000612049565b50565b61012d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e778088372610ed681611c35565b8161012d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3b25c5d3870ec0eac28822b177f18c9130233ade5b7f857c6a224a507c37fc4e82604051610f479190613a26565b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610fe1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd890613f21565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611020611fc4565b73ffffffffffffffffffffffffffffffffffffffff1614611076576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106d90613fb3565b60405180910390fd5b61107f8261201b565b61108b82826001612049565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461111f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111690614045565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b606061012f805461115890614094565b80601f016020809104026020016040519081016040528092919081815260200182805461118490614094565b80156111d15780601f106111a6576101008083540402835291602001916111d1565b820191906000526020600020905b8154815290600101906020018083116111b457829003601f168201915b5050505050905090565b7f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c81565b60008303611239576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036112b8578234146112b35782346040517f1abd56100000000000000000000000000000000000000000000000000000000081526004016112aa9291906140c5565b60405180910390fd5b61132e565b60003414611300576000346040517f1abd56100000000000000000000000000000000000000000000000000000000081526004016112f7929190614129565b60405180910390fd5b61132d3330858773ffffffffffffffffffffffffffffffffffffffff166121b7909392919063ffffffff16565b5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2bc500cf071be2d1c1458ed6ff484cd4db4345ada8943dee7ff29e7af3558f7685858560405161138f9392919061417f565b60405180910390a350505050565b7ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc6113c781611c35565b6113d084612240565b6113da8383612315565b7ffc72fd547553f7a663e0048e590afc9c47b56a4242e960f31cf4c62e23d308b984848460405161140d939291906141b1565b60405180910390a150505050565b606060007fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d61144981611c35565b610100868690501115611488576040517f11c763d600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8585905067ffffffffffffffff8111156114a5576114a46131ed565b5b6040519080825280602002602001820160405280156114d857816020015b60608152602001906001900390816114c35790505b50925060005b8686905081101561167a5760008787838181106114fe576114fd613d96565b5b905060200281019061151091906141f7565b600001602081019061152291906134d9565b90506000808273ffffffffffffffffffffffffffffffffffffffff168a8a8681811061155157611550613d96565b5b905060200281019061156391906141f7565b602001358b8b8781811061157a57611579613d96565b5b905060200281019061158c91906141f7565b806040019061159b919061421f565b6040516115a99291906142b2565b60006040518083038185875af1925050503d80600081146115e6576040519150601f19603f3d011682016040523d82523d6000602084013e6115eb565b606091505b50915091508161164d576115ff8885612386565b61164057836040517fa6a7dbbd00000000000000000000000000000000000000000000000000000000815260040161163791906142cb565b60405180910390fd5b61164a86856123a2565b95505b8087858151811061166157611660613d96565b5b60200260200101819052508360010193505050506114de565b503373ffffffffffffffffffffffffffffffffffffffff167fd0de18eab8dc7532aab0fc4eb308477031cabf9fd312ea3b3a5fe9aa45ac8ed788888886886040516116c9959493929190614513565b60405180910390a25094509492505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361170581611c35565b611711858585856123b6565b5050505050565b600061012e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361176d81611c35565b611778848484611d1e565b50505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336117a881611c35565b6117b3848484611d30565b50505050565b7f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c6117e381611c35565b6117ec82612755565b5050565b7f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e77808837281565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b81565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361186281611c35565b60005b8383905081101561198f57600084848381811061188557611884613d96565b5b905060a0020180360381019061189b91906145f4565b9050600060028111156118b1576118b0613e80565b5b816000015160028111156118c8576118c7613e80565b5b036118e9576118e4816020015182604001518360800151611d1e565b611983565b600160028111156118fd576118fc613e80565b5b8160000151600281111561191457611913613e80565b5b0361193557611930816020015182604001518360800151611d30565b611982565b60028081111561194857611947613e80565b5b8160000151600281111561195f5761195e613e80565b5b036119815761198081602001518260400151836080015184606001516123b6565b5b5b5b81600101915050611865565b50505050565b60008060019054906101000a900460ff161590508080156119c65750600160008054906101000a900460ff1660ff16105b806119f357506119d5306127d1565b1580156119f25750600160008054906101000a900460ff1660ff16145b5b611a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2990614693565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611a6f576001600060016101000a81548160ff0219169083151502179055505b611a987f9385547e00000000000000000000000000000000000000000000000000000000612240565b611ac17f1626ba7e00000000000000000000000000000000000000000000000000000000612240565b611aea7f7034731b00000000000000000000000000000000000000000000000000000000612240565b611af26127f4565b611afc8787612890565b611b0584612755565b611b0f8383611cce565b611b18856128cd565b8015611b715760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611b6891906146fb565b60405180910390a15b50505050505050565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b611ba481611c35565b611bae8383612890565b505050565b6000611bc185858585610c73565b9050949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611c863033836000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610c73565b611ccb573033826040517f1e09743f000000000000000000000000000000000000000000000000000000008152600401611cc293929190614716565b60405180910390fd5b50565b818161012f9182611ce09291906148fa565b507fe9b617ecb5f63f6a9ccd8d4d5fa0d7b2ef9b17ce3f48e6b135808d6a40e677428282604051611d129291906149ca565b60405180910390a15050565b611d2b83838360026123b6565b505050565b6000611d3d848484612928565b9050600073ffffffffffffffffffffffffffffffffffffffff1660c9600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e6057600060c9600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16837f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f6752487604051611e579190613a26565b60405180910390a45b50505050565b60008060c96000611e78888888612928565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ee7576000915050611fbc565b600273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611f25576001915050611fbc565b8073ffffffffffffffffffffffffffffffffffffffff16632675fdd0878787876040518563ffffffff1660e01b8152600401611f6494939291906149ee565b602060405180830381865afa925050508015611f9e57506040513d601f19601f82011682018060405250810190611f9b9190614a66565b60015b15611fb6578015611fb457600192505050611fbc565b505b60009150505b949350505050565b6000611ff27f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61295e565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc61204581611c35565b5050565b6120757f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612968565b60000160009054906101000a900460ff16156120995761209483612972565b6121b2565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561210157506040513d601f19601f820116820180604052508101906120fe9190614aa8565b60015b612140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213790614b47565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146121a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219c90614bd9565b60405180910390fd5b506121b1838383612a2b565b5b505050565b61223a846323b872dd60e01b8585856040516024016121d893929190614bf9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612a57565b50505050565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036122a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229f90614c7c565b60405180910390fd5b600160336000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b8060fb6000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548163ffffffff021916908360e01c02179055505050565b6000808260ff166001901b841690506000811191505092915050565b60008160ff166001901b8318905092915050565b73ffffffffffffffffffffffffffffffffffffffff80168473ffffffffffffffffffffffffffffffffffffffff1614801561241c575073ffffffffffffffffffffffffffffffffffffffff80168373ffffffffffffffffffffffffffffffffffffffff16145b15612453576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff80168473ffffffffffffffffffffffffffffffffffffffff1614806124b8575073ffffffffffffffffffffffffffffffffffffffff80168373ffffffffffffffffffffffffffffffffffffffff16145b156125945760006124c883612b1e565b90507f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada338314806124f55750805b1561252c576040517f24159e5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612592576040517f92ab7d0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b60006125a1858585612928565b9050600060c9600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000839050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036126d3578060c9600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16867f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e8076448a886040516126c6929190614cbd565b60405180910390a461274c565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461274b5786868684846040517f0b98789e000000000000000000000000000000000000000000000000000000008152600401612742959493929190614ce6565b60405180910390fd5b5b50505050505050565b8061012e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea2816040516127c69190613a26565b60405180910390a150565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61281d7f150b7a0200000000000000000000000000000000000000000000000000000000612240565b6128467f4e2312e000000000000000000000000000000000000000000000000000000000612240565b61285e63150b7a0260e01b63150b7a0260e01b612315565b61287663f23a6e6160e01b63f23a6e6160e01b612315565b61288e63bc197c8160e01b63bc197c8160e01b612315565b565b7fbb39ebb37e60fb5d606ffdb749d2336e56b88e6c88c4bd6513b308f643186eed82826040516128c1929190614d66565b60405180910390a15050565b600060019054906101000a900460ff1661291c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291390614dfc565b60405180910390fd5b61292581612c1c565b50565b600082848360405160200161293f93929190614edc565b6040516020818303038152906040528051906020012090509392505050565b6000819050919050565b6000819050919050565b61297b816127d1565b6129ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b190614f96565b60405180910390fd5b806129e77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61295e565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612a3483612c4a565b600082511180612a415750805b15612a5257612a508383612c99565b505b505050565b6000612ab9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612d7d9092919063ffffffff16565b9050600081511115612b195780806020019051810190612ad99190614a66565b612b18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0f90615028565b60405180910390fd5b5b505050565b60007fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d821480612b6d57507f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc82145b80612b9757507f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b82145b80612bc157507f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c82145b80612beb57507f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e77808837282145b80612c1557507ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc82145b9050919050565b612c4730827f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33611d1e565b50565b612c5381612972565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060612ca4836127d1565b612ce3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cda906150ba565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051612d0b919061510b565b600060405180830381855af49150503d8060008114612d46576040519150601f19603f3d011682016040523d82523d6000602084013e612d4b565b606091505b5091509150612d73828260405180606001604052806027815260200161522160279139612d95565b9250505092915050565b6060612d8c8484600085612db7565b90509392505050565b60608315612da557829050612db0565b612daf8383612e84565b5b9392505050565b606082471015612dfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df390615194565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e25919061510b565b60006040518083038185875af1925050503d8060008114612e62576040519150601f19603f3d011682016040523d82523d6000602084013e612e67565b606091505b5091509150612e7887838387612ed4565b92505050949350505050565b600082511115612e975781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ecb919061365b565b60405180910390fd5b60608315612f36576000835103612f2e57612eee856127d1565b612f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2490615200565b60405180910390fd5b5b829050612f41565b612f408383612e84565b5b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f7482612f49565b9050919050565b612f8481612f69565b82525050565b6000819050919050565b612f9d81612f8a565b82525050565b6000604082019050612fb86000830185612f7b565b612fc56020830184612f94565b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61300181612fcc565b82525050565b600060208201905061301c6000830184612ff8565b92915050565b6000604051905090565b600080fd5b600080fd5b61303f81612fcc565b811461304a57600080fd5b50565b60008135905061305c81613036565b92915050565b6000602082840312156130785761307761302c565b5b60006130868482850161304d565b91505092915050565b60008115159050919050565b6130a48161308f565b82525050565b60006020820190506130bf600083018461309b565b92915050565b6000819050919050565b6130d8816130c5565b82525050565b60006020820190506130f360008301846130cf565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261311e5761311d6130f9565b5b8235905067ffffffffffffffff81111561313b5761313a6130fe565b5b60208301915083600182028301111561315757613156613103565b5b9250929050565b600080602083850312156131755761317461302c565b5b600083013567ffffffffffffffff81111561319357613192613031565b5b61319f85828601613108565b92509250509250929050565b6131b4816130c5565b81146131bf57600080fd5b50565b6000813590506131d1816131ab565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613225826131dc565b810181811067ffffffffffffffff82111715613244576132436131ed565b5b80604052505050565b6000613257613022565b9050613263828261321c565b919050565b600067ffffffffffffffff821115613283576132826131ed565b5b61328c826131dc565b9050602081019050919050565b82818337600083830152505050565b60006132bb6132b684613268565b61324d565b9050828152602081018484840111156132d7576132d66131d7565b5b6132e2848285613299565b509392505050565b600082601f8301126132ff576132fe6130f9565b5b813561330f8482602086016132a8565b91505092915050565b6000806040838503121561332f5761332e61302c565b5b600061333d858286016131c2565b925050602083013567ffffffffffffffff81111561335e5761335d613031565b5b61336a858286016132ea565b9150509250929050565b61337d81612f69565b811461338857600080fd5b50565b60008135905061339a81613374565b92915050565b60008083601f8401126133b6576133b56130f9565b5b8235905067ffffffffffffffff8111156133d3576133d26130fe565b5b6020830191508360608202830111156133ef576133ee613103565b5b9250929050565b60008060006040848603121561340f5761340e61302c565b5b600061341d8682870161338b565b935050602084013567ffffffffffffffff81111561343e5761343d613031565b5b61344a868287016133a0565b92509250509250925092565b600080600080608085870312156134705761346f61302c565b5b600061347e8782880161338b565b945050602061348f8782880161338b565b93505060406134a0878288016131c2565b925050606085013567ffffffffffffffff8111156134c1576134c0613031565b5b6134cd878288016132ea565b91505092959194509250565b6000602082840312156134ef576134ee61302c565b5b60006134fd8482850161338b565b91505092915050565b6000819050919050565b600061352b61352661352184612f49565b613506565b612f49565b9050919050565b600061353d82613510565b9050919050565b600061354f82613532565b9050919050565b61355f81613544565b82525050565b600060208201905061357a6000830184613556565b92915050565b600080604083850312156135975761359661302c565b5b60006135a58582860161338b565b925050602083013567ffffffffffffffff8111156135c6576135c5613031565b5b6135d2858286016132ea565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156136165780820151818401526020810190506135fb565b60008484015250505050565b600061362d826135dc565b61363781856135e7565b93506136478185602086016135f8565b613650816131dc565b840191505092915050565b600060208201905081810360008301526136758184613622565b905092915050565b61368681612f8a565b811461369157600080fd5b50565b6000813590506136a38161367d565b92915050565b600080600080606085870312156136c3576136c261302c565b5b60006136d18782880161338b565b94505060206136e287828801613694565b935050604085013567ffffffffffffffff81111561370357613702613031565b5b61370f87828801613108565b925092505092959194509250565b6000806000606084860312156137365761373561302c565b5b60006137448682870161304d565b93505060206137558682870161304d565b92505060406137668682870161304d565b9150509250925092565b60008083601f840112613786576137856130f9565b5b8235905067ffffffffffffffff8111156137a3576137a26130fe565b5b6020830191508360208202830111156137bf576137be613103565b5b9250929050565b600080600080606085870312156137e0576137df61302c565b5b60006137ee878288016131c2565b945050602085013567ffffffffffffffff81111561380f5761380e613031565b5b61381b87828801613770565b9350935050604061382e87828801613694565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b600061388d82613866565b6138978185613871565b93506138a78185602086016135f8565b6138b0816131dc565b840191505092915050565b60006138c78383613882565b905092915050565b6000602082019050919050565b60006138e78261383a565b6138f18185613845565b93508360208202850161390385613856565b8060005b8581101561393f578484038952815161392085826138bb565b945061392b836138cf565b925060208a01995050600181019050613907565b50829750879550505050505092915050565b6000604082019050818103600083015261396b81856138dc565b905061397a6020830184612f94565b9392505050565b600061398c82612f69565b9050919050565b61399c81613981565b81146139a757600080fd5b50565b6000813590506139b981613993565b92915050565b600080600080608085870312156139d9576139d861302c565b5b60006139e78782880161338b565b94505060206139f88782880161338b565b9350506040613a09878288016131c2565b9250506060613a1a878288016139aa565b91505092959194509250565b6000602082019050613a3b6000830184612f7b565b92915050565b600080600060608486031215613a5a57613a5961302c565b5b6000613a688682870161338b565b9350506020613a798682870161338b565b9250506040613a8a868287016131c2565b9150509250925092565b60008083601f840112613aaa57613aa96130f9565b5b8235905067ffffffffffffffff811115613ac757613ac66130fe565b5b6020830191508360a0820283011115613ae357613ae2613103565b5b9250929050565b60008060208385031215613b0157613b0061302c565b5b600083013567ffffffffffffffff811115613b1f57613b1e613031565b5b613b2b85828601613a94565b92509250509250929050565b60008083601f840112613b4d57613b4c6130f9565b5b8235905067ffffffffffffffff811115613b6a57613b696130fe565b5b602083019150836001820283011115613b8657613b85613103565b5b9250929050565b60008060008060008060808789031215613baa57613ba961302c565b5b600087013567ffffffffffffffff811115613bc857613bc7613031565b5b613bd489828a01613b37565b96509650506020613be789828a0161338b565b9450506040613bf889828a0161338b565b935050606087013567ffffffffffffffff811115613c1957613c18613031565b5b613c2589828a01613108565b92509250509295509295509295565b60008060208385031215613c4b57613c4a61302c565b5b600083013567ffffffffffffffff811115613c6957613c68613031565b5b613c7585828601613b37565b92509250509250929050565b6000604082019050613c966000830185612ff8565b613ca36020830184612ff8565b9392505050565b600082825260208201905092915050565b6000613cc682613866565b613cd08185613caa565b9350613ce08185602086016135f8565b613ce9816131dc565b840191505092915050565b6000604082019050613d096000830185612f7b565b8181036020830152613d1b8184613cbb565b90509392505050565b6000604082019050613d3960008301856130cf565b8181036020830152613d4b8184613cbb565b90509392505050565b600081519050613d6381613036565b92915050565b600060208284031215613d7f57613d7e61302c565b5b6000613d8d84828501613d54565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b60038110613dd757600080fd5b50565b600081359050613de981613dca565b92915050565b600060608284031215613e0557613e04613dc5565b5b613e0f606061324d565b90506000613e1f84828501613dda565b6000830152506020613e338482850161338b565b6020830152506040613e47848285016131c2565b60408301525092915050565b600060608284031215613e6957613e6861302c565b5b6000613e7784828501613def565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613f0b602c836135e7565b9150613f1682613eaf565b604082019050919050565b60006020820190508181036000830152613f3a81613efe565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613f9d602c836135e7565b9150613fa882613f41565b604082019050919050565b60006020820190508181036000830152613fcc81613f90565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b600061402f6038836135e7565b915061403a82613fd3565b604082019050919050565b6000602082019050818103600083015261405e81614022565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806140ac57607f821691505b6020821081036140bf576140be614065565b5b50919050565b60006040820190506140da6000830185612f94565b6140e76020830184612f94565b9392505050565b6000819050919050565b600061411361410e614109846140ee565b613506565b612f8a565b9050919050565b614123816140f8565b82525050565b600060408201905061413e600083018561411a565b61414b6020830184612f94565b9392505050565b600061415e83856135e7565b935061416b838584613299565b614174836131dc565b840190509392505050565b60006040820190506141946000830186612f94565b81810360208301526141a7818486614152565b9050949350505050565b60006060820190506141c66000830186612ff8565b6141d36020830185612ff8565b6141e06040830184612ff8565b949350505050565b600080fd5b600080fd5b600080fd5b600082356001606003833603038112614213576142126141e8565b5b80830191505092915050565b6000808335600160200384360303811261423c5761423b6141e8565b5b80840192508235915067ffffffffffffffff82111561425e5761425d6141ed565b5b60208301925060018202360383131561427a576142796141f2565b5b509250929050565b600081905092915050565b60006142998385614282565b93506142a6838584613299565b82840190509392505050565b60006142bf82848661428d565b91508190509392505050565b60006020820190506142e06000830184612f94565b92915050565b600082825260208201905092915050565b6000819050919050565b6000614310602084018461338b565b905092915050565b61432181612f69565b82525050565b60006143366020840184613694565b905092915050565b61434781612f8a565b82525050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261437957614378614357565b5b83810192508235915060208301925067ffffffffffffffff8211156143a1576143a061434d565b5b6001820236038313156143b7576143b6614352565b5b509250929050565b60006143cb8385613871565b93506143d8838584613299565b6143e1836131dc565b840190509392505050565b6000606083016143ff6000840184614301565b61440c6000860182614318565b5061441a6020840184614327565b614427602086018261433e565b50614435604084018461435c565b85830360408701526144488382846143bf565b925050508091505092915050565b600061446283836143ec565b905092915050565b60008235600160600383360303811261448657614485614357565b5b82810191505092915050565b6000602082019050919050565b60006144ab83856142e6565b9350836020840285016144bd846142f7565b8060005b878110156145015784840389526144d8828461446a565b6144e28582614456565b94506144ed83614492565b925060208a019950506001810190506144c1565b50829750879450505050509392505050565b600060808201905061452860008301886130cf565b818103602083015261453b81868861449f565b905061454a6040830185612f94565b818103606083015261455c81846138dc565b90509695505050505050565b600060a0828403121561457e5761457d613dc5565b5b61458860a061324d565b9050600061459884828501613dda565b60008301525060206145ac8482850161338b565b60208301525060406145c08482850161338b565b60408301525060606145d48482850161338b565b60608301525060806145e8848285016131c2565b60808301525092915050565b600060a0828403121561460a5761460961302c565b5b600061461884828501614568565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061467d602e836135e7565b915061468882614621565b604082019050919050565b600060208201905081810360008301526146ac81614670565b9050919050565b6000819050919050565b600060ff82169050919050565b60006146e56146e06146db846146b3565b613506565b6146bd565b9050919050565b6146f5816146ca565b82525050565b600060208201905061471060008301846146ec565b92915050565b600060608201905061472b6000830186612f7b565b6147386020830185612f7b565b61474560408301846130cf565b949350505050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026147ba7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261477d565b6147c4868361477d565b95508019841693508086168417925050509392505050565b60006147f76147f26147ed84612f8a565b613506565b612f8a565b9050919050565b6000819050919050565b614811836147dc565b61482561481d826147fe565b84845461478a565b825550505050565b600090565b61483a61482d565b614845818484614808565b505050565b5b818110156148695761485e600082614832565b60018101905061484b565b5050565b601f8211156148ae5761487f81614758565b6148888461476d565b81016020851015614897578190505b6148ab6148a38561476d565b83018261484a565b50505b505050565b600082821c905092915050565b60006148d1600019846008026148b3565b1980831691505092915050565b60006148ea83836148c0565b9150826002028217905092915050565b614904838361474d565b67ffffffffffffffff81111561491d5761491c6131ed565b5b6149278254614094565b61493282828561486d565b6000601f831160018114614961576000841561494f578287013590505b61495985826148de565b8655506149c1565b601f19841661496f86614758565b60005b8281101561499757848901358255600182019150602085019450602081019050614972565b868310156149b457848901356149b0601f8916826148c0565b8355505b6001600288020188555050505b50505050505050565b600060208201905081810360008301526149e5818486614152565b90509392505050565b6000608082019050614a036000830187612f7b565b614a106020830186612f7b565b614a1d60408301856130cf565b8181036060830152614a2f8184613cbb565b905095945050505050565b614a438161308f565b8114614a4e57600080fd5b50565b600081519050614a6081614a3a565b92915050565b600060208284031215614a7c57614a7b61302c565b5b6000614a8a84828501614a51565b91505092915050565b600081519050614aa2816131ab565b92915050565b600060208284031215614abe57614abd61302c565b5b6000614acc84828501614a93565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000614b31602e836135e7565b9150614b3c82614ad5565b604082019050919050565b60006020820190508181036000830152614b6081614b24565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000614bc36029836135e7565b9150614bce82614b67565b604082019050919050565b60006020820190508181036000830152614bf281614bb6565b9050919050565b6000606082019050614c0e6000830186612f7b565b614c1b6020830185612f7b565b614c286040830184612f94565b949350505050565b7f4552433136353a20696e76616c696420696e7465726661636520696400000000600082015250565b6000614c66601c836135e7565b9150614c7182614c30565b602082019050919050565b60006020820190508181036000830152614c9581614c59565b9050919050565b6000614ca782613532565b9050919050565b614cb781614c9c565b82525050565b6000604082019050614cd26000830185612f7b565b614cdf6020830184614cae565b9392505050565b600060a082019050614cfb6000830188612f7b565b614d086020830187612f7b565b614d1560408301866130cf565b614d226060830185612f7b565b614d2f6080830184612f7b565b9695505050505050565b6000614d458385613caa565b9350614d52838584613299565b614d5b836131dc565b840190509392505050565b60006020820190508181036000830152614d81818486614d39565b90509392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614de6602b836135e7565b9150614df182614d8a565b604082019050919050565b60006020820190508181036000830152614e1581614dd9565b9050919050565b600081905092915050565b7f5045524d495353494f4e00000000000000000000000000000000000000000000600082015250565b6000614e5d600a83614e1c565b9150614e6882614e27565b600a82019050919050565b60008160601b9050919050565b6000614e8b82614e73565b9050919050565b6000614e9d82614e80565b9050919050565b614eb5614eb082612f69565b614e92565b82525050565b6000819050919050565b614ed6614ed1826130c5565b614ebb565b82525050565b6000614ee782614e50565b9150614ef38286614ea4565b601482019150614f038285614ea4565b601482019150614f138284614ec5565b602082019150819050949350505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000614f80602d836135e7565b9150614f8b82614f24565b604082019050919050565b60006020820190508181036000830152614faf81614f73565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000615012602a836135e7565b915061501d82614fb6565b604082019050919050565b6000602082019050818103600083015261504181615005565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006150a46026836135e7565b91506150af82615048565b604082019050919050565b600060208201905081810360008301526150d381615097565b9050919050565b60006150e582613866565b6150ef8185614282565b93506150ff8185602086016135f8565b80840191505092915050565b600061511782846150da565b915081905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061517e6026836135e7565b915061518982615122565b604082019050919050565b600060208201905081810360008301526151ad81615171565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006151ea601d836135e7565b91506151f5826151b4565b602082019050919050565b60006020820190508181036000830152615219816151dd565b905091905056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202875c77036cbfd8f2ae56fecd11c9260ef48c7d25a25e4f7c086291d5978eec664736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101d15760003560e01c8063829331a1116100f7578063d96054c411610095578063e978afe511610064578063e978afe51461073e578063eafb8b0614610767578063ee57e36f14610790578063fdef9106146107b957610211565b8063d96054c414610696578063da742228146106bf578063e2e35563146106e8578063e306bee71461071357610211565b8063c71bf324116100d1578063c71bf324146105db578063c9dbc2a414610619578063ce1b815f14610642578063d68bad2c1461066d57610211565b8063829331a11461056b578063bfe07da614610596578063c4a50145146105b257610211565b80632675fdd01161016f5780633e2ab0d91161013e5780633e2ab0d9146104d05780634f1ef286146104f957806352d1902d146105155780637034731b1461054057610211565b80632675fdd01461041457806326875b1f146104515780633659cfe61461047c578063388da934146104a557610211565b80631080f99b116101ab5780631080f99b1461035a5780631626ba7e1461038357806322844d04146103c057806324b4d73f146103e957610211565b806301ffc9a7146102c75780630729d0541461030457806309e56b141461032f57610211565b36610211577f62c2c8e34665db7c56b2cabd7f5fb9702ccd352ffa8150147e450797e9f8e8f33334604051610207929190612fa3565b60405180910390a1005b34801561021d57600080fd5b50600036606060006102976000357fffffffff000000000000000000000000000000000000000000000000000000001685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506107f6565b9050806040516020016102aa9190613007565b604051602081830303815290604052915050915050805190602001f35b3480156102d357600080fd5b506102ee60048036038101906102e99190613062565b610945565b6040516102fb91906130aa565b60405180910390f35b34801561031057600080fd5b506103196109bd565b60405161032691906130de565b60405180910390f35b34801561033b57600080fd5b506103446109e1565b60405161035191906130de565b60405180910390f35b34801561036657600080fd5b50610381600480360381019061037c919061315e565b610a05565b005b34801561038f57600080fd5b506103aa60048036038101906103a59190613318565b610a3e565b6040516103b79190613007565b60405180910390f35b3480156103cc57600080fd5b506103e760048036038101906103e291906133f6565b610b4a565b005b3480156103f557600080fd5b506103fe610c4f565b60405161040b91906130de565b60405180910390f35b34801561042057600080fd5b5061043b60048036038101906104369190613456565b610c73565b60405161044891906130aa565b60405180910390f35b34801561045d57600080fd5b50610466610cd9565b60405161047391906130de565b60405180910390f35b34801561048857600080fd5b506104a3600480360381019061049e91906134d9565b610cfd565b005b3480156104b157600080fd5b506104ba610e85565b6040516104c79190613565565b60405180910390f35b3480156104dc57600080fd5b506104f760048036038101906104f291906134d9565b610eac565b005b610513600480360381019061050e9190613580565b610f53565b005b34801561052157600080fd5b5061052a61108f565b60405161053791906130de565b60405180910390f35b34801561054c57600080fd5b50610555611148565b604051610562919061365b565b60405180910390f35b34801561057757600080fd5b506105806111db565b60405161058d91906130de565b60405180910390f35b6105b060048036038101906105ab91906136a9565b6111ff565b005b3480156105be57600080fd5b506105d960048036038101906105d4919061371d565b61139d565b005b3480156105e757600080fd5b5061060260048036038101906105fd91906137c6565b61141b565b604051610610929190613951565b60405180910390f35b34801561062557600080fd5b50610640600480360381019061063b91906139bf565b6116db565b005b34801561064e57600080fd5b50610657611718565b6040516106649190613a26565b60405180910390f35b34801561067957600080fd5b50610694600480360381019061068f9190613a41565b611743565b005b3480156106a257600080fd5b506106bd60048036038101906106b89190613a41565b61177e565b005b3480156106cb57600080fd5b506106e660048036038101906106e191906134d9565b6117b9565b005b3480156106f457600080fd5b506106fd6117f0565b60405161070a91906130de565b60405180910390f35b34801561071f57600080fd5b50610728611814565b60405161073591906130de565b60405180910390f35b34801561074a57600080fd5b5061076560048036038101906107609190613aea565b611838565b005b34801561077357600080fd5b5061078e60048036038101906107899190613b8d565b611995565b005b34801561079c57600080fd5b506107b760048036038101906107b29190613c34565b611b7a565b005b3480156107c557600080fd5b506107e060048036038101906107db9190613456565b611bb3565b6040516107ed91906130aa565b60405180910390f35b60008060fb6000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460e01b9050600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036108e25783816040517f4aa318c30000000000000000000000000000000000000000000000000000000081526004016108d9929190613c81565b60405180910390fd5b837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f4792cb6e46e49876374bea490ba23274bacea6b84c216a64f47abab54027589b3385604051610933929190613cf4565b60405180910390a28091505092915050565b600061095082611bcb565b806109b6575060336000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff165b9050919050565b7fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d81565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3381565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b610a2f81611c35565b610a398383611cce565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff1661012d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610aa257600060e01b9050610b44565b61012d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631626ba7e84846040518363ffffffff1660e01b8152600401610b00929190613d24565b602060405180830381865afa158015610b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b419190613d69565b90505b92915050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33610b7481611c35565b60005b83839050811015610c48576000848483818110610b9757610b96613d96565b5b905060600201803603810190610bad9190613e53565b905060006002811115610bc357610bc2613e80565b5b81600001516002811115610bda57610bd9613e80565b5b03610bf757610bf28682602001518360400151611d1e565b610c3c565b60016002811115610c0b57610c0a613e80565b5b81600001516002811115610c2257610c21613e80565b5b03610c3b57610c3a8682602001518360400151611d30565b5b5b81600101915050610b77565b5050505050565b7f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc81565b6000610c8185858585611e66565b80610ca85750610ca78573ffffffffffffffffffffffffffffffffffffffff8585611e66565b5b80610ccf5750610cce73ffffffffffffffffffffffffffffffffffffffff858585611e66565b5b9050949350505050565b7ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc81565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610d8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8290613f21565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610dca611fc4565b73ffffffffffffffffffffffffffffffffffffffff1614610e20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1790613fb3565b60405180910390fd5b610e298161201b565b610e8281600067ffffffffffffffff811115610e4857610e476131ed565b5b6040519080825280601f01601f191660200182016040528015610e7a5781602001600182028036833780820191505090505b506000612049565b50565b61012d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e778088372610ed681611c35565b8161012d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3b25c5d3870ec0eac28822b177f18c9130233ade5b7f857c6a224a507c37fc4e82604051610f479190613a26565b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610fe1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd890613f21565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611020611fc4565b73ffffffffffffffffffffffffffffffffffffffff1614611076576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106d90613fb3565b60405180910390fd5b61107f8261201b565b61108b82826001612049565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461111f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111690614045565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b606061012f805461115890614094565b80601f016020809104026020016040519081016040528092919081815260200182805461118490614094565b80156111d15780601f106111a6576101008083540402835291602001916111d1565b820191906000526020600020905b8154815290600101906020018083116111b457829003601f168201915b5050505050905090565b7f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c81565b60008303611239576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036112b8578234146112b35782346040517f1abd56100000000000000000000000000000000000000000000000000000000081526004016112aa9291906140c5565b60405180910390fd5b61132e565b60003414611300576000346040517f1abd56100000000000000000000000000000000000000000000000000000000081526004016112f7929190614129565b60405180910390fd5b61132d3330858773ffffffffffffffffffffffffffffffffffffffff166121b7909392919063ffffffff16565b5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2bc500cf071be2d1c1458ed6ff484cd4db4345ada8943dee7ff29e7af3558f7685858560405161138f9392919061417f565b60405180910390a350505050565b7ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc6113c781611c35565b6113d084612240565b6113da8383612315565b7ffc72fd547553f7a663e0048e590afc9c47b56a4242e960f31cf4c62e23d308b984848460405161140d939291906141b1565b60405180910390a150505050565b606060007fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d61144981611c35565b610100868690501115611488576040517f11c763d600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8585905067ffffffffffffffff8111156114a5576114a46131ed565b5b6040519080825280602002602001820160405280156114d857816020015b60608152602001906001900390816114c35790505b50925060005b8686905081101561167a5760008787838181106114fe576114fd613d96565b5b905060200281019061151091906141f7565b600001602081019061152291906134d9565b90506000808273ffffffffffffffffffffffffffffffffffffffff168a8a8681811061155157611550613d96565b5b905060200281019061156391906141f7565b602001358b8b8781811061157a57611579613d96565b5b905060200281019061158c91906141f7565b806040019061159b919061421f565b6040516115a99291906142b2565b60006040518083038185875af1925050503d80600081146115e6576040519150601f19603f3d011682016040523d82523d6000602084013e6115eb565b606091505b50915091508161164d576115ff8885612386565b61164057836040517fa6a7dbbd00000000000000000000000000000000000000000000000000000000815260040161163791906142cb565b60405180910390fd5b61164a86856123a2565b95505b8087858151811061166157611660613d96565b5b60200260200101819052508360010193505050506114de565b503373ffffffffffffffffffffffffffffffffffffffff167fd0de18eab8dc7532aab0fc4eb308477031cabf9fd312ea3b3a5fe9aa45ac8ed788888886886040516116c9959493929190614513565b60405180910390a25094509492505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361170581611c35565b611711858585856123b6565b5050505050565b600061012e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361176d81611c35565b611778848484611d1e565b50505050565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada336117a881611c35565b6117b3848484611d30565b50505050565b7f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c6117e381611c35565b6117ec82612755565b5050565b7f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e77808837281565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b81565b7f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada3361186281611c35565b60005b8383905081101561198f57600084848381811061188557611884613d96565b5b905060a0020180360381019061189b91906145f4565b9050600060028111156118b1576118b0613e80565b5b816000015160028111156118c8576118c7613e80565b5b036118e9576118e4816020015182604001518360800151611d1e565b611983565b600160028111156118fd576118fc613e80565b5b8160000151600281111561191457611913613e80565b5b0361193557611930816020015182604001518360800151611d30565b611982565b60028081111561194857611947613e80565b5b8160000151600281111561195f5761195e613e80565b5b036119815761198081602001518260400151836080015184606001516123b6565b5b5b5b81600101915050611865565b50505050565b60008060019054906101000a900460ff161590508080156119c65750600160008054906101000a900460ff1660ff16105b806119f357506119d5306127d1565b1580156119f25750600160008054906101000a900460ff1660ff16145b5b611a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2990614693565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611a6f576001600060016101000a81548160ff0219169083151502179055505b611a987f9385547e00000000000000000000000000000000000000000000000000000000612240565b611ac17f1626ba7e00000000000000000000000000000000000000000000000000000000612240565b611aea7f7034731b00000000000000000000000000000000000000000000000000000000612240565b611af26127f4565b611afc8787612890565b611b0584612755565b611b0f8383611cce565b611b18856128cd565b8015611b715760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611b6891906146fb565b60405180910390a15b50505050505050565b7f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b611ba481611c35565b611bae8383612890565b505050565b6000611bc185858585610c73565b9050949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611c863033836000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610c73565b611ccb573033826040517f1e09743f000000000000000000000000000000000000000000000000000000008152600401611cc293929190614716565b60405180910390fd5b50565b818161012f9182611ce09291906148fa565b507fe9b617ecb5f63f6a9ccd8d4d5fa0d7b2ef9b17ce3f48e6b135808d6a40e677428282604051611d129291906149ca565b60405180910390a15050565b611d2b83838360026123b6565b505050565b6000611d3d848484612928565b9050600073ffffffffffffffffffffffffffffffffffffffff1660c9600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e6057600060c9600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16837f3ca48185ec3f6e47e24db18b13f1c65b1ce05da1659f9c1c4fe717dda5f6752487604051611e579190613a26565b60405180910390a45b50505050565b60008060c96000611e78888888612928565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611ee7576000915050611fbc565b600273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611f25576001915050611fbc565b8073ffffffffffffffffffffffffffffffffffffffff16632675fdd0878787876040518563ffffffff1660e01b8152600401611f6494939291906149ee565b602060405180830381865afa925050508015611f9e57506040513d601f19601f82011682018060405250810190611f9b9190614a66565b60015b15611fb6578015611fb457600192505050611fbc565b505b60009150505b949350505050565b6000611ff27f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61295e565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc61204581611c35565b5050565b6120757f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612968565b60000160009054906101000a900460ff16156120995761209483612972565b6121b2565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561210157506040513d601f19601f820116820180604052508101906120fe9190614aa8565b60015b612140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213790614b47565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146121a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219c90614bd9565b60405180910390fd5b506121b1838383612a2b565b5b505050565b61223a846323b872dd60e01b8585856040516024016121d893929190614bf9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612a57565b50505050565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036122a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229f90614c7c565b60405180910390fd5b600160336000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b8060fb6000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548163ffffffff021916908360e01c02179055505050565b6000808260ff166001901b841690506000811191505092915050565b60008160ff166001901b8318905092915050565b73ffffffffffffffffffffffffffffffffffffffff80168473ffffffffffffffffffffffffffffffffffffffff1614801561241c575073ffffffffffffffffffffffffffffffffffffffff80168373ffffffffffffffffffffffffffffffffffffffff16145b15612453576040517f85f1ba9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff80168473ffffffffffffffffffffffffffffffffffffffff1614806124b8575073ffffffffffffffffffffffffffffffffffffffff80168373ffffffffffffffffffffffffffffffffffffffff16145b156125945760006124c883612b1e565b90507f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada338314806124f55750805b1561252c576040517f24159e5b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612592576040517f92ab7d0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b60006125a1858585612928565b9050600060c9600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000839050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036126d3578060c9600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16867f0f579ad49235a8c1fd9041427e7067b1eb10926bbed380bf6fabc73e0e8076448a886040516126c6929190614cbd565b60405180910390a461274c565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461274b5786868684846040517f0b98789e000000000000000000000000000000000000000000000000000000008152600401612742959493929190614ce6565b60405180910390fd5b5b50505050505050565b8061012e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea2816040516127c69190613a26565b60405180910390a150565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b61281d7f150b7a0200000000000000000000000000000000000000000000000000000000612240565b6128467f4e2312e000000000000000000000000000000000000000000000000000000000612240565b61285e63150b7a0260e01b63150b7a0260e01b612315565b61287663f23a6e6160e01b63f23a6e6160e01b612315565b61288e63bc197c8160e01b63bc197c8160e01b612315565b565b7fbb39ebb37e60fb5d606ffdb749d2336e56b88e6c88c4bd6513b308f643186eed82826040516128c1929190614d66565b60405180910390a15050565b600060019054906101000a900460ff1661291c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291390614dfc565b60405180910390fd5b61292581612c1c565b50565b600082848360405160200161293f93929190614edc565b6040516020818303038152906040528051906020012090509392505050565b6000819050919050565b6000819050919050565b61297b816127d1565b6129ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b190614f96565b60405180910390fd5b806129e77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61295e565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612a3483612c4a565b600082511180612a415750805b15612a5257612a508383612c99565b505b505050565b6000612ab9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612d7d9092919063ffffffff16565b9050600081511115612b195780806020019051810190612ad99190614a66565b612b18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0f90615028565b60405180910390fd5b5b505050565b60007fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d821480612b6d57507f1f53edd44352e5d15bad2b29233baa93bcd595e09457780bc7c5445bbbe751cc82145b80612b9757507f4707e94b25cfce1a7c363508fbb838c35864388ad77284b248282b9746982b9b82145b80612bc157507f06d294bc8cbad2e393408b20dd019a772661f60b8d633e56761157cb1ec85f8c82145b80612beb57507f0dcbfb19b09fb8ff4e9af583d4b8e9c8127cc1b26529b4d96dd3b7e77808837282145b80612c1557507ffaf505be9907aa6951c2ebe5b0312f4980e14f21912ed355372103cc8bd683bc82145b9050919050565b612c4730827f815fe80e4b37c8582a3b773d1d7071f983eacfd56b5965db654f3087c25ada33611d1e565b50565b612c5381612972565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060612ca4836127d1565b612ce3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cda906150ba565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051612d0b919061510b565b600060405180830381855af49150503d8060008114612d46576040519150601f19603f3d011682016040523d82523d6000602084013e612d4b565b606091505b5091509150612d73828260405180606001604052806027815260200161522160279139612d95565b9250505092915050565b6060612d8c8484600085612db7565b90509392505050565b60608315612da557829050612db0565b612daf8383612e84565b5b9392505050565b606082471015612dfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df390615194565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612e25919061510b565b60006040518083038185875af1925050503d8060008114612e62576040519150601f19603f3d011682016040523d82523d6000602084013e612e67565b606091505b5091509150612e7887838387612ed4565b92505050949350505050565b600082511115612e975781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ecb919061365b565b60405180910390fd5b60608315612f36576000835103612f2e57612eee856127d1565b612f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2490615200565b60405180910390fd5b5b829050612f41565b612f408383612e84565b5b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f7482612f49565b9050919050565b612f8481612f69565b82525050565b6000819050919050565b612f9d81612f8a565b82525050565b6000604082019050612fb86000830185612f7b565b612fc56020830184612f94565b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61300181612fcc565b82525050565b600060208201905061301c6000830184612ff8565b92915050565b6000604051905090565b600080fd5b600080fd5b61303f81612fcc565b811461304a57600080fd5b50565b60008135905061305c81613036565b92915050565b6000602082840312156130785761307761302c565b5b60006130868482850161304d565b91505092915050565b60008115159050919050565b6130a48161308f565b82525050565b60006020820190506130bf600083018461309b565b92915050565b6000819050919050565b6130d8816130c5565b82525050565b60006020820190506130f360008301846130cf565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261311e5761311d6130f9565b5b8235905067ffffffffffffffff81111561313b5761313a6130fe565b5b60208301915083600182028301111561315757613156613103565b5b9250929050565b600080602083850312156131755761317461302c565b5b600083013567ffffffffffffffff81111561319357613192613031565b5b61319f85828601613108565b92509250509250929050565b6131b4816130c5565b81146131bf57600080fd5b50565b6000813590506131d1816131ab565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613225826131dc565b810181811067ffffffffffffffff82111715613244576132436131ed565b5b80604052505050565b6000613257613022565b9050613263828261321c565b919050565b600067ffffffffffffffff821115613283576132826131ed565b5b61328c826131dc565b9050602081019050919050565b82818337600083830152505050565b60006132bb6132b684613268565b61324d565b9050828152602081018484840111156132d7576132d66131d7565b5b6132e2848285613299565b509392505050565b600082601f8301126132ff576132fe6130f9565b5b813561330f8482602086016132a8565b91505092915050565b6000806040838503121561332f5761332e61302c565b5b600061333d858286016131c2565b925050602083013567ffffffffffffffff81111561335e5761335d613031565b5b61336a858286016132ea565b9150509250929050565b61337d81612f69565b811461338857600080fd5b50565b60008135905061339a81613374565b92915050565b60008083601f8401126133b6576133b56130f9565b5b8235905067ffffffffffffffff8111156133d3576133d26130fe565b5b6020830191508360608202830111156133ef576133ee613103565b5b9250929050565b60008060006040848603121561340f5761340e61302c565b5b600061341d8682870161338b565b935050602084013567ffffffffffffffff81111561343e5761343d613031565b5b61344a868287016133a0565b92509250509250925092565b600080600080608085870312156134705761346f61302c565b5b600061347e8782880161338b565b945050602061348f8782880161338b565b93505060406134a0878288016131c2565b925050606085013567ffffffffffffffff8111156134c1576134c0613031565b5b6134cd878288016132ea565b91505092959194509250565b6000602082840312156134ef576134ee61302c565b5b60006134fd8482850161338b565b91505092915050565b6000819050919050565b600061352b61352661352184612f49565b613506565b612f49565b9050919050565b600061353d82613510565b9050919050565b600061354f82613532565b9050919050565b61355f81613544565b82525050565b600060208201905061357a6000830184613556565b92915050565b600080604083850312156135975761359661302c565b5b60006135a58582860161338b565b925050602083013567ffffffffffffffff8111156135c6576135c5613031565b5b6135d2858286016132ea565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156136165780820151818401526020810190506135fb565b60008484015250505050565b600061362d826135dc565b61363781856135e7565b93506136478185602086016135f8565b613650816131dc565b840191505092915050565b600060208201905081810360008301526136758184613622565b905092915050565b61368681612f8a565b811461369157600080fd5b50565b6000813590506136a38161367d565b92915050565b600080600080606085870312156136c3576136c261302c565b5b60006136d18782880161338b565b94505060206136e287828801613694565b935050604085013567ffffffffffffffff81111561370357613702613031565b5b61370f87828801613108565b925092505092959194509250565b6000806000606084860312156137365761373561302c565b5b60006137448682870161304d565b93505060206137558682870161304d565b92505060406137668682870161304d565b9150509250925092565b60008083601f840112613786576137856130f9565b5b8235905067ffffffffffffffff8111156137a3576137a26130fe565b5b6020830191508360208202830111156137bf576137be613103565b5b9250929050565b600080600080606085870312156137e0576137df61302c565b5b60006137ee878288016131c2565b945050602085013567ffffffffffffffff81111561380f5761380e613031565b5b61381b87828801613770565b9350935050604061382e87828801613694565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b600061388d82613866565b6138978185613871565b93506138a78185602086016135f8565b6138b0816131dc565b840191505092915050565b60006138c78383613882565b905092915050565b6000602082019050919050565b60006138e78261383a565b6138f18185613845565b93508360208202850161390385613856565b8060005b8581101561393f578484038952815161392085826138bb565b945061392b836138cf565b925060208a01995050600181019050613907565b50829750879550505050505092915050565b6000604082019050818103600083015261396b81856138dc565b905061397a6020830184612f94565b9392505050565b600061398c82612f69565b9050919050565b61399c81613981565b81146139a757600080fd5b50565b6000813590506139b981613993565b92915050565b600080600080608085870312156139d9576139d861302c565b5b60006139e78782880161338b565b94505060206139f88782880161338b565b9350506040613a09878288016131c2565b9250506060613a1a878288016139aa565b91505092959194509250565b6000602082019050613a3b6000830184612f7b565b92915050565b600080600060608486031215613a5a57613a5961302c565b5b6000613a688682870161338b565b9350506020613a798682870161338b565b9250506040613a8a868287016131c2565b9150509250925092565b60008083601f840112613aaa57613aa96130f9565b5b8235905067ffffffffffffffff811115613ac757613ac66130fe565b5b6020830191508360a0820283011115613ae357613ae2613103565b5b9250929050565b60008060208385031215613b0157613b0061302c565b5b600083013567ffffffffffffffff811115613b1f57613b1e613031565b5b613b2b85828601613a94565b92509250509250929050565b60008083601f840112613b4d57613b4c6130f9565b5b8235905067ffffffffffffffff811115613b6a57613b696130fe565b5b602083019150836001820283011115613b8657613b85613103565b5b9250929050565b60008060008060008060808789031215613baa57613ba961302c565b5b600087013567ffffffffffffffff811115613bc857613bc7613031565b5b613bd489828a01613b37565b96509650506020613be789828a0161338b565b9450506040613bf889828a0161338b565b935050606087013567ffffffffffffffff811115613c1957613c18613031565b5b613c2589828a01613108565b92509250509295509295509295565b60008060208385031215613c4b57613c4a61302c565b5b600083013567ffffffffffffffff811115613c6957613c68613031565b5b613c7585828601613b37565b92509250509250929050565b6000604082019050613c966000830185612ff8565b613ca36020830184612ff8565b9392505050565b600082825260208201905092915050565b6000613cc682613866565b613cd08185613caa565b9350613ce08185602086016135f8565b613ce9816131dc565b840191505092915050565b6000604082019050613d096000830185612f7b565b8181036020830152613d1b8184613cbb565b90509392505050565b6000604082019050613d3960008301856130cf565b8181036020830152613d4b8184613cbb565b90509392505050565b600081519050613d6381613036565b92915050565b600060208284031215613d7f57613d7e61302c565b5b6000613d8d84828501613d54565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b60038110613dd757600080fd5b50565b600081359050613de981613dca565b92915050565b600060608284031215613e0557613e04613dc5565b5b613e0f606061324d565b90506000613e1f84828501613dda565b6000830152506020613e338482850161338b565b6020830152506040613e47848285016131c2565b60408301525092915050565b600060608284031215613e6957613e6861302c565b5b6000613e7784828501613def565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613f0b602c836135e7565b9150613f1682613eaf565b604082019050919050565b60006020820190508181036000830152613f3a81613efe565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613f9d602c836135e7565b9150613fa882613f41565b604082019050919050565b60006020820190508181036000830152613fcc81613f90565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b600061402f6038836135e7565b915061403a82613fd3565b604082019050919050565b6000602082019050818103600083015261405e81614022565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806140ac57607f821691505b6020821081036140bf576140be614065565b5b50919050565b60006040820190506140da6000830185612f94565b6140e76020830184612f94565b9392505050565b6000819050919050565b600061411361410e614109846140ee565b613506565b612f8a565b9050919050565b614123816140f8565b82525050565b600060408201905061413e600083018561411a565b61414b6020830184612f94565b9392505050565b600061415e83856135e7565b935061416b838584613299565b614174836131dc565b840190509392505050565b60006040820190506141946000830186612f94565b81810360208301526141a7818486614152565b9050949350505050565b60006060820190506141c66000830186612ff8565b6141d36020830185612ff8565b6141e06040830184612ff8565b949350505050565b600080fd5b600080fd5b600080fd5b600082356001606003833603038112614213576142126141e8565b5b80830191505092915050565b6000808335600160200384360303811261423c5761423b6141e8565b5b80840192508235915067ffffffffffffffff82111561425e5761425d6141ed565b5b60208301925060018202360383131561427a576142796141f2565b5b509250929050565b600081905092915050565b60006142998385614282565b93506142a6838584613299565b82840190509392505050565b60006142bf82848661428d565b91508190509392505050565b60006020820190506142e06000830184612f94565b92915050565b600082825260208201905092915050565b6000819050919050565b6000614310602084018461338b565b905092915050565b61432181612f69565b82525050565b60006143366020840184613694565b905092915050565b61434781612f8a565b82525050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261437957614378614357565b5b83810192508235915060208301925067ffffffffffffffff8211156143a1576143a061434d565b5b6001820236038313156143b7576143b6614352565b5b509250929050565b60006143cb8385613871565b93506143d8838584613299565b6143e1836131dc565b840190509392505050565b6000606083016143ff6000840184614301565b61440c6000860182614318565b5061441a6020840184614327565b614427602086018261433e565b50614435604084018461435c565b85830360408701526144488382846143bf565b925050508091505092915050565b600061446283836143ec565b905092915050565b60008235600160600383360303811261448657614485614357565b5b82810191505092915050565b6000602082019050919050565b60006144ab83856142e6565b9350836020840285016144bd846142f7565b8060005b878110156145015784840389526144d8828461446a565b6144e28582614456565b94506144ed83614492565b925060208a019950506001810190506144c1565b50829750879450505050509392505050565b600060808201905061452860008301886130cf565b818103602083015261453b81868861449f565b905061454a6040830185612f94565b818103606083015261455c81846138dc565b90509695505050505050565b600060a0828403121561457e5761457d613dc5565b5b61458860a061324d565b9050600061459884828501613dda565b60008301525060206145ac8482850161338b565b60208301525060406145c08482850161338b565b60408301525060606145d48482850161338b565b60608301525060806145e8848285016131c2565b60808301525092915050565b600060a0828403121561460a5761460961302c565b5b600061461884828501614568565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061467d602e836135e7565b915061468882614621565b604082019050919050565b600060208201905081810360008301526146ac81614670565b9050919050565b6000819050919050565b600060ff82169050919050565b60006146e56146e06146db846146b3565b613506565b6146bd565b9050919050565b6146f5816146ca565b82525050565b600060208201905061471060008301846146ec565b92915050565b600060608201905061472b6000830186612f7b565b6147386020830185612f7b565b61474560408301846130cf565b949350505050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026147ba7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261477d565b6147c4868361477d565b95508019841693508086168417925050509392505050565b60006147f76147f26147ed84612f8a565b613506565b612f8a565b9050919050565b6000819050919050565b614811836147dc565b61482561481d826147fe565b84845461478a565b825550505050565b600090565b61483a61482d565b614845818484614808565b505050565b5b818110156148695761485e600082614832565b60018101905061484b565b5050565b601f8211156148ae5761487f81614758565b6148888461476d565b81016020851015614897578190505b6148ab6148a38561476d565b83018261484a565b50505b505050565b600082821c905092915050565b60006148d1600019846008026148b3565b1980831691505092915050565b60006148ea83836148c0565b9150826002028217905092915050565b614904838361474d565b67ffffffffffffffff81111561491d5761491c6131ed565b5b6149278254614094565b61493282828561486d565b6000601f831160018114614961576000841561494f578287013590505b61495985826148de565b8655506149c1565b601f19841661496f86614758565b60005b8281101561499757848901358255600182019150602085019450602081019050614972565b868310156149b457848901356149b0601f8916826148c0565b8355505b6001600288020188555050505b50505050505050565b600060208201905081810360008301526149e5818486614152565b90509392505050565b6000608082019050614a036000830187612f7b565b614a106020830186612f7b565b614a1d60408301856130cf565b8181036060830152614a2f8184613cbb565b905095945050505050565b614a438161308f565b8114614a4e57600080fd5b50565b600081519050614a6081614a3a565b92915050565b600060208284031215614a7c57614a7b61302c565b5b6000614a8a84828501614a51565b91505092915050565b600081519050614aa2816131ab565b92915050565b600060208284031215614abe57614abd61302c565b5b6000614acc84828501614a93565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000614b31602e836135e7565b9150614b3c82614ad5565b604082019050919050565b60006020820190508181036000830152614b6081614b24565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b6000614bc36029836135e7565b9150614bce82614b67565b604082019050919050565b60006020820190508181036000830152614bf281614bb6565b9050919050565b6000606082019050614c0e6000830186612f7b565b614c1b6020830185612f7b565b614c286040830184612f94565b949350505050565b7f4552433136353a20696e76616c696420696e7465726661636520696400000000600082015250565b6000614c66601c836135e7565b9150614c7182614c30565b602082019050919050565b60006020820190508181036000830152614c9581614c59565b9050919050565b6000614ca782613532565b9050919050565b614cb781614c9c565b82525050565b6000604082019050614cd26000830185612f7b565b614cdf6020830184614cae565b9392505050565b600060a082019050614cfb6000830188612f7b565b614d086020830187612f7b565b614d1560408301866130cf565b614d226060830185612f7b565b614d2f6080830184612f7b565b9695505050505050565b6000614d458385613caa565b9350614d52838584613299565b614d5b836131dc565b840190509392505050565b60006020820190508181036000830152614d81818486614d39565b90509392505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614de6602b836135e7565b9150614df182614d8a565b604082019050919050565b60006020820190508181036000830152614e1581614dd9565b9050919050565b600081905092915050565b7f5045524d495353494f4e00000000000000000000000000000000000000000000600082015250565b6000614e5d600a83614e1c565b9150614e6882614e27565b600a82019050919050565b60008160601b9050919050565b6000614e8b82614e73565b9050919050565b6000614e9d82614e80565b9050919050565b614eb5614eb082612f69565b614e92565b82525050565b6000819050919050565b614ed6614ed1826130c5565b614ebb565b82525050565b6000614ee782614e50565b9150614ef38286614ea4565b601482019150614f038285614ea4565b601482019150614f138284614ec5565b602082019150819050949350505050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000614f80602d836135e7565b9150614f8b82614f24565b604082019050919050565b60006020820190508181036000830152614faf81614f73565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000615012602a836135e7565b915061501d82614fb6565b604082019050919050565b6000602082019050818103600083015261504181615005565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006150a46026836135e7565b91506150af82615048565b604082019050919050565b600060208201905081810360008301526150d381615097565b9050919050565b60006150e582613866565b6150ef8185614282565b93506150ff8185602086016135f8565b80840191505092915050565b600061511782846150da565b915081905092915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061517e6026836135e7565b915061518982615122565b604082019050919050565b600060208201905081810360008301526151ad81615171565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006151ea601d836135e7565b91506151f5826151b4565b602082019050919050565b60006020820190508181036000830152615219816151dd565b905091905056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202875c77036cbfd8f2ae56fecd11c9260ef48c7d25a25e4f7c086291d5978eec664736f6c63430008110033",
  "devdoc": {
    "errors": {
      "ActionFailed(uint256)": [
        {
          "params": {
            "index": "The index of the action in the action array that failed."
          }
        }
      ],
      "NativeTokenDepositAmountMismatch(uint256,uint256)": [
        {
          "params": {
            "actual": "The actual native token amount deposited.",
            "expected": "The expected native token amount."
          }
        }
      ],
      "PermissionAlreadyGrantedForDifferentCondition(address,address,bytes32,address,address)": [
        {
          "details": "This makes sure that condition on the same permission can not be overwriten by a different condition.",
          "params": {
            "currentCondition": "The current condition set for permissionId.",
            "newCondition": "The new condition it tries to set for permissionId.",
            "permissionId": "The permission identifier.",
            "where": "The address of the target contract to grant `_who` permission to.",
            "who": "The address (EOA or contract) to which the permission has already been granted."
          }
        }
      ],
      "Unauthorized(address,address,bytes32)": [
        {
          "params": {
            "permissionId": "The permission identifier.",
            "where": "The context in which the authorization reverted.",
            "who": "The address (EOA or contract) missing the permission."
          }
        }
      ],
      "UnknownCallback(bytes4,bytes4)": [
        {
          "params": {
            "callbackSelector": "The selector of the callback function.",
            "magicNumber": "The magic number to be registered for the callback function selector."
          }
        }
      ]
    },
    "events": {
      "NewURI(string)": {
        "params": {
          "daoURI": "The new uri."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])": {
        "params": {
          "_items": "The array of multi-targeted permission operations to apply."
        }
      },
      "applySingleTargetPermissions(address,(uint8,address,bytes32)[])": {
        "params": {
          "_where": "The address of the single target contract.",
          "items": "The array of single-targeted permission operations to apply."
        }
      },
      "deposit(address,uint256,string)": {
        "params": {
          "_amount": "The amount of tokens to deposit.",
          "_reference": "The reference describing the deposit reason.",
          "_token": "The address of the token or address(0) in case of the native token."
        }
      },
      "execute(bytes32,(address,uint256,bytes)[],uint256)": {
        "params": {
          "_actions": "The array of actions.",
          "_allowFailureMap": "A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.",
          "_callId": "The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce."
        },
        "returns": {
          "execResults": "The array of results obtained from the executed actions in `bytes`.",
          "failureMap": "The constructed failureMap which contains which actions have actually failed."
        }
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "The trusted forwarder address."
        }
      },
      "grant(address,address,bytes32)": {
        "details": "Requires the `ROOT_PERMISSION_ID` permission.Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.",
        "params": {
          "_permissionId": "The permission identifier.",
          "_where": "The address of the target contract for which `_who` recieves permission.",
          "_who": "The address (EOA or contract) receiving the permission."
        }
      },
      "grantWithCondition(address,address,bytes32,address)": {
        "details": "Requires the `ROOT_PERMISSION_ID` permissionNote, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.",
        "params": {
          "_condition": "The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.",
          "_permissionId": "The permission identifier.",
          "_where": "The address of the target contract for which `_who` recieves permission.",
          "_who": "The address (EOA or contract) receiving the permission."
        }
      },
      "hasPermission(address,address,bytes32,bytes)": {
        "params": {
          "_data": "The optional data passed to the `PermissionCondition` registered.",
          "_permissionId": "The permission identifier.",
          "_where": "The address of the contract.",
          "_who": "The address of a EOA or contract to give the permissions."
        },
        "returns": {
          "_0": "Returns true if the address has permission, false if not."
        }
      },
      "initialize(bytes,address,address,string)": {
        "details": "This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).",
        "params": {
          "_initialOwner": "The initial owner of the DAO having the `ROOT_PERMISSION_ID` permission.",
          "_metadata": "IPFS hash that points to all the metadata (logo, description, tags, etc.) of a DAO.",
          "_trustedForwarder": "The trusted forwarder responsible for verifying meta transactions."
        }
      },
      "isGranted(address,address,bytes32,bytes)": {
        "params": {
          "_data": "The optional data passed to the `PermissionCondition` registered.",
          "_permissionId": "The permission identifier.",
          "_where": "The address of the target contract for which `_who` recieves permission.",
          "_who": "The address (EOA or contract) for which the permission is checked."
        },
        "returns": {
          "_0": "Returns true if `_who` has the permissions on the target contract via the specified permission identifier."
        }
      },
      "isValidSignature(bytes32,bytes)": {
        "params": {
          "_hash": "The hash of the data to be signed.",
          "_signature": "The signature byte array associated with `_hash`."
        },
        "returns": {
          "_0": "Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "registerStandardCallback(bytes4,bytes4,bytes4)": {
        "params": {
          "_callbackSelector": "The selector of the callback function.",
          "_interfaceId": "The ID of the interface.",
          "_magicNumber": "The magic number to be registered for the function signature."
        }
      },
      "revoke(address,address,bytes32)": {
        "details": "Requires the `ROOT_PERMISSION_ID` permission.Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that exist in parallel.",
        "params": {
          "_permissionId": "The permission identifier.",
          "_where": "The address of the target contract for which `_who` loses permission.",
          "_who": "The address (EOA or contract) losing the permission."
        }
      },
      "setDaoURI(string)": {
        "params": {
          "newDaoURI": "The new DAO uri to be set."
        }
      },
      "setMetadata(bytes)": {
        "params": {
          "_metadata": "The IPFS hash of the new metadata object."
        }
      },
      "setSignatureValidator(address)": {
        "params": {
          "_signatureValidator": "The address of the signature validator."
        }
      },
      "setTrustedForwarder(address)": {
        "params": {
          "_trustedForwarder": "The trusted forwarder address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "DAO",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ActionFailed(uint256)": [
        {
          "notice": "Thrown if action execution has failed."
        }
      ],
      "AnyAddressDisallowedForWhoAndWhere()": [
        {
          "notice": "Thrown for permission grants where `who` and `where` are both `ANY_ADDR`."
        }
      ],
      "ConditionNotPresentForAnyAddress()": [
        {
          "notice": "Thrown for permission grants where `who` or `where` is `ANY_ADDR`, but no condition is present."
        }
      ],
      "NativeTokenDepositAmountMismatch(uint256,uint256)": [
        {
          "notice": "Thrown if there is a mismatch between the expected and actually deposited amount of native tokens."
        }
      ],
      "PermissionAlreadyGrantedForDifferentCondition(address,address,bytes32,address,address)": [
        {
          "notice": "Thrown if a permission has been already granted with a different condition."
        }
      ],
      "PermissionsForAnyAddressDisallowed()": [
        {
          "notice": "Thrown for `ROOT_PERMISSION_ID` or `EXECUTE_PERMISSION_ID` permission grants where `who` or `where` is `ANY_ADDR`."
        }
      ],
      "TooManyActions()": [
        {
          "notice": "Thrown if the action array length is larger than `MAX_ACTIONS`."
        }
      ],
      "Unauthorized(address,address,bytes32)": [
        {
          "notice": "Thrown if a call is unauthorized."
        }
      ],
      "UnknownCallback(bytes4,bytes4)": [
        {
          "notice": "Thrown if the callback function is not registered."
        }
      ],
      "ZeroAmount()": [
        {
          "notice": "Thrown if the deposit amount is zero."
        }
      ]
    },
    "events": {
      "CallbackReceived(address,bytes4,bytes)": {
        "notice": "Emitted when `_handleCallback` is called."
      },
      "Deposited(address,address,uint256,string)": {
        "notice": "Emitted when a token deposit has been made to the DAO."
      },
      "Executed(address,bytes32,(address,uint256,bytes)[],uint256,bytes[])": {
        "notice": "Emitted when a proposal is executed."
      },
      "Granted(bytes32,address,address,address,address)": {
        "notice": "Emitted when a permission `permission` is granted in the context `here` to the address `_who` for the contract `_where`."
      },
      "MetadataSet(bytes)": {
        "notice": "Emitted when the DAO metadata is updated."
      },
      "NativeTokenDeposited(address,uint256)": {
        "notice": "Emitted when a native token deposit has been made to the DAO."
      },
      "NewURI(string)": {
        "notice": "Emitted when a new DAO uri is set."
      },
      "Revoked(bytes32,address,address,address)": {
        "notice": "Emitted when a permission `permission` is revoked in the context `here` from the address `_who` for the contract `_where`."
      },
      "SignatureValidatorSet(address)": {
        "notice": "Emitted when the signature validator address is updated."
      },
      "StandardCallbackRegistered(bytes4,bytes4,bytes4)": {
        "notice": "Emitted when a standard callback is registered."
      },
      "TrustedForwarderSet(address)": {
        "notice": "Emitted when a new TrustedForwarder is set on the DAO."
      }
    },
    "kind": "user",
    "methods": {
      "EXECUTE_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `execute` function."
      },
      "REGISTER_STANDARD_CALLBACK_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `registerStandardCallback` function."
      },
      "ROOT_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `grant`, `grantWithCondition`, `revoke`, and `bulk` function."
      },
      "SET_METADATA_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `setMetadata` function."
      },
      "SET_SIGNATURE_VALIDATOR_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `setSignatureValidator` function."
      },
      "SET_TRUSTED_FORWARDER_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `setTrustedForwarder` function."
      },
      "UPGRADE_DAO_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `_authorizeUpgrade` function."
      },
      "applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])": {
        "notice": "Applies an array of permission operations on multiple target contracts `items[i].where`."
      },
      "applySingleTargetPermissions(address,(uint8,address,bytes32)[])": {
        "notice": "Applies an array of permission operations on a single target contracts `_where`."
      },
      "constructor": {
        "notice": "Disables the initializers on the implementation contract to prevent it from being left uninitialized."
      },
      "daoURI()": {
        "notice": "A distinct Uniform Resource Identifier (URI) pointing to a JSON object following the \"ERC-4824 DAO JSON-LD Schema\". This JSON file splits into four URIs: membersURI, proposalsURI, activityLogURI, and governanceURI. The membersURI should point to a JSON file that conforms to the \"ERC-4824 Members JSON-LD Schema\". The proposalsURI should point to a JSON file that conforms to the \"ERC-4824 Proposals JSON-LD Schema\". The activityLogURI should point to a JSON file that conforms to the \"ERC-4824 Activity Log JSON-LD Schema\". The governanceURI should point to a flatfile, normatively a .md file. Each of the JSON files named above can be statically-hosted or dynamically-generated."
      },
      "deposit(address,uint256,string)": {
        "notice": "Deposits (native) tokens to the DAO contract with a reference string."
      },
      "execute(bytes32,(address,uint256,bytes)[],uint256)": {
        "notice": "Executes a list of actions. If no failure map is provided, one failing action results in the entire excution to be reverted. If a non-zero failure map is provided, allowed actions can fail without the remaining actions being reverted."
      },
      "getTrustedForwarder()": {
        "notice": "Getter for the trusted forwarder verifying the meta transaction."
      },
      "grant(address,address,bytes32)": {
        "notice": "Grants permission to an address to call methods in a contract guarded by an auth modifier with the specified permission identifier."
      },
      "grantWithCondition(address,address,bytes32,address)": {
        "notice": "Grants permission to an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier if the referenced condition permits it."
      },
      "hasPermission(address,address,bytes32,bytes)": {
        "notice": "Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process."
      },
      "initialize(bytes,address,address,string)": {
        "notice": "Initializes the DAO by - registering the [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID - setting the trusted forwarder for meta transactions - giving the `ROOT_PERMISSION_ID` permission to the initial owner (that should be revoked and transferred to the DAO after setup)."
      },
      "isGranted(address,address,bytes32,bytes)": {
        "notice": "Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process."
      },
      "isValidSignature(bytes32,bytes)": {
        "notice": "Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract."
      },
      "registerStandardCallback(bytes4,bytes4,bytes4)": {
        "notice": "Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature."
      },
      "revoke(address,address,bytes32)": {
        "notice": "Revokes permission from an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier."
      },
      "setDaoURI(string)": {
        "notice": "Updates the set DAO uri to a new value."
      },
      "setMetadata(bytes)": {
        "notice": "Updates the DAO metadata (e.g., an IPFS hash)."
      },
      "setSignatureValidator(address)": {
        "notice": "Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract."
      },
      "setTrustedForwarder(address)": {
        "notice": "Setter for the trusted forwarder verifying the meta transaction."
      },
      "signatureValidator()": {
        "notice": "The [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract."
      }
    },
    "notice": "This contract contains the logic for a DAO",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 473,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 476,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5880,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5792,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 5836,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 455,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 770,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10588,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "permissionsHashed",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 11250,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11989,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "callbackMagicNumbers",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes4,t_bytes4)"
      },
      {
        "astId": 12068,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9692,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "signatureValidator",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IERC1271)8313"
      },
      {
        "astId": 9695,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "302",
        "type": "t_address"
      },
      {
        "astId": 9698,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "_daoURI",
        "offset": 0,
        "slot": "303",
        "type": "t_string_storage"
      },
      {
        "astId": 10320,
        "contract": "contracts/core/dao/DAO.sol:DAO",
        "label": "__gap",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)47_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IERC1271)8313": {
        "encoding": "inplace",
        "label": "contract IERC1271",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes4,t_bytes4)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bytes4)",
        "numberOfBytes": "32",
        "value": "t_bytes4"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}