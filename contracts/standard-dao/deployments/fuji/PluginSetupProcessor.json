{
  "address": "0x8396e3CB87ea207C05667F0AeF5BaaF0346F1148",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract PluginRepoRegistry",
          "name": "_repoRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "plugin",
          "type": "address"
        }
      ],
      "name": "IPluginNotSupported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "currentAppliedSetupId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "appliedSetupId",
          "type": "bytes32"
        }
      ],
      "name": "InvalidAppliedSetupId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "release",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "build",
              "type": "uint16"
            }
          ],
          "internalType": "struct PluginRepo.Tag",
          "name": "currentVersionTag",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "release",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "build",
              "type": "uint16"
            }
          ],
          "internalType": "struct PluginRepo.Tag",
          "name": "newVersionTag",
          "type": "tuple"
        }
      ],
      "name": "InvalidUpdateVersion",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PluginAlreadyInstalled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "plugin",
          "type": "address"
        }
      ],
      "name": "PluginNonupgradeable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        }
      ],
      "name": "PluginProxyUpgradeFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PluginRepoNonexistent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "preparedSetupId",
          "type": "bytes32"
        }
      ],
      "name": "SetupAlreadyPrepared",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "permissionId",
          "type": "bytes32"
        }
      ],
      "name": "SetupApplicationUnauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "preparedSetupId",
          "type": "bytes32"
        }
      ],
      "name": "SetupNotApplicable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "plugin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "preparedSetupId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "appliedSetupId",
          "type": "bytes32"
        }
      ],
      "name": "InstallationApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "preparedSetupId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract PluginRepo",
          "name": "pluginSetupRepo",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "release",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "build",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct PluginRepo.Tag",
          "name": "versionTag",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "plugin",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "helpers",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "enum PermissionLib.Operation",
                  "name": "operation",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "where",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "condition",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "permissionId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermissionLib.MultiTargetPermission[]",
              "name": "permissions",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IPluginSetup.PreparedSetupData",
          "name": "preparedSetupData",
          "type": "tuple"
        }
      ],
      "name": "InstallationPrepared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "plugin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "preparedSetupId",
          "type": "bytes32"
        }
      ],
      "name": "UninstallationApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "preparedSetupId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract PluginRepo",
          "name": "pluginSetupRepo",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "release",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "build",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct PluginRepo.Tag",
          "name": "versionTag",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "plugin",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "currentHelpers",
              "type": "address[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct IPluginSetup.SetupPayload",
          "name": "setupPayload",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum PermissionLib.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "where",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "who",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "condition",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "permissionId",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct PermissionLib.MultiTargetPermission[]",
          "name": "permissions",
          "type": "tuple[]"
        }
      ],
      "name": "UninstallationPrepared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "plugin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "preparedSetupId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "appliedSetupId",
          "type": "bytes32"
        }
      ],
      "name": "UpdateApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "preparedSetupId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract PluginRepo",
          "name": "pluginSetupRepo",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "release",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "build",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct PluginRepo.Tag",
          "name": "versionTag",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "plugin",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "currentHelpers",
              "type": "address[]"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct IPluginSetup.SetupPayload",
          "name": "setupPayload",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "helpers",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "enum PermissionLib.Operation",
                  "name": "operation",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "where",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "condition",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "permissionId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermissionLib.MultiTargetPermission[]",
              "name": "permissions",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IPluginSetup.PreparedSetupData",
          "name": "preparedSetupData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        }
      ],
      "name": "UpdatePrepared",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "APPLY_INSTALLATION_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APPLY_UNINSTALLATION_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APPLY_UPDATE_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "release",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint16",
                      "name": "build",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct PluginRepo.Tag",
                  "name": "versionTag",
                  "type": "tuple"
                },
                {
                  "internalType": "contract PluginRepo",
                  "name": "pluginSetupRepo",
                  "type": "address"
                }
              ],
              "internalType": "struct PluginSetupRef",
              "name": "pluginSetupRef",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "plugin",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "enum PermissionLib.Operation",
                  "name": "operation",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "where",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "condition",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "permissionId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermissionLib.MultiTargetPermission[]",
              "name": "permissions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32",
              "name": "helpersHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PluginSetupProcessor.ApplyInstallationParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "applyInstallation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "plugin",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "release",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint16",
                      "name": "build",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct PluginRepo.Tag",
                  "name": "versionTag",
                  "type": "tuple"
                },
                {
                  "internalType": "contract PluginRepo",
                  "name": "pluginSetupRepo",
                  "type": "address"
                }
              ],
              "internalType": "struct PluginSetupRef",
              "name": "pluginSetupRef",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum PermissionLib.Operation",
                  "name": "operation",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "where",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "condition",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "permissionId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermissionLib.MultiTargetPermission[]",
              "name": "permissions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PluginSetupProcessor.ApplyUninstallationParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "applyUninstallation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "plugin",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "release",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint16",
                      "name": "build",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct PluginRepo.Tag",
                  "name": "versionTag",
                  "type": "tuple"
                },
                {
                  "internalType": "contract PluginRepo",
                  "name": "pluginSetupRepo",
                  "type": "address"
                }
              ],
              "internalType": "struct PluginSetupRef",
              "name": "pluginSetupRef",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "initData",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "enum PermissionLib.Operation",
                  "name": "operation",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "where",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "condition",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "permissionId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermissionLib.MultiTargetPermission[]",
              "name": "permissions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32",
              "name": "helpersHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PluginSetupProcessor.ApplyUpdateParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "applyUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "release",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint16",
                      "name": "build",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct PluginRepo.Tag",
                  "name": "versionTag",
                  "type": "tuple"
                },
                {
                  "internalType": "contract PluginRepo",
                  "name": "pluginSetupRepo",
                  "type": "address"
                }
              ],
              "internalType": "struct PluginSetupRef",
              "name": "pluginSetupRef",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct PluginSetupProcessor.PrepareInstallationParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "prepareInstallation",
      "outputs": [
        {
          "internalType": "address",
          "name": "plugin",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "helpers",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "enum PermissionLib.Operation",
                  "name": "operation",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "where",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "condition",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "permissionId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermissionLib.MultiTargetPermission[]",
              "name": "permissions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IPluginSetup.PreparedSetupData",
          "name": "preparedSetupData",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint8",
                      "name": "release",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint16",
                      "name": "build",
                      "type": "uint16"
                    }
                  ],
                  "internalType": "struct PluginRepo.Tag",
                  "name": "versionTag",
                  "type": "tuple"
                },
                {
                  "internalType": "contract PluginRepo",
                  "name": "pluginSetupRepo",
                  "type": "address"
                }
              ],
              "internalType": "struct PluginSetupRef",
              "name": "pluginSetupRef",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "plugin",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "currentHelpers",
                  "type": "address[]"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IPluginSetup.SetupPayload",
              "name": "setupPayload",
              "type": "tuple"
            }
          ],
          "internalType": "struct PluginSetupProcessor.PrepareUninstallationParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "prepareUninstallation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum PermissionLib.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "where",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "who",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "condition",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "permissionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermissionLib.MultiTargetPermission[]",
          "name": "permissions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "release",
                  "type": "uint8"
                },
                {
                  "internalType": "uint16",
                  "name": "build",
                  "type": "uint16"
                }
              ],
              "internalType": "struct PluginRepo.Tag",
              "name": "currentVersionTag",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "release",
                  "type": "uint8"
                },
                {
                  "internalType": "uint16",
                  "name": "build",
                  "type": "uint16"
                }
              ],
              "internalType": "struct PluginRepo.Tag",
              "name": "newVersionTag",
              "type": "tuple"
            },
            {
              "internalType": "contract PluginRepo",
              "name": "pluginSetupRepo",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "plugin",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "currentHelpers",
                  "type": "address[]"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct IPluginSetup.SetupPayload",
              "name": "setupPayload",
              "type": "tuple"
            }
          ],
          "internalType": "struct PluginSetupProcessor.PrepareUpdateParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "prepareUpdate",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "helpers",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "enum PermissionLib.Operation",
                  "name": "operation",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "where",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "who",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "condition",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "permissionId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct PermissionLib.MultiTargetPermission[]",
              "name": "permissions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IPluginSetup.PreparedSetupData",
          "name": "preparedSetupData",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repoRegistry",
      "outputs": [
        {
          "internalType": "contract PluginRepoRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "states",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "currentAppliedSetupId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pluginInstallationId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "preparedSetupId",
          "type": "bytes32"
        }
      ],
      "name": "validatePreparedSetupId",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9fa63503ba33a5c98e925b82fb1316c9252369a9df8a84fa17e1235636dcc76e",
  "receipt": {
    "to": null,
    "from": "0x90ad449DEb987A1f34D5127751874E9BBD223F2f",
    "contractAddress": "0x8396e3CB87ea207C05667F0AeF5BaaF0346F1148",
    "transactionIndex": 1,
    "gasUsed": "3857573",
    "logsBloom": "0x
    "blockHash": "0x9d7904bbd9ebe895b835a7ea547b2573acbe42147ec99cc0689604d91b46b71d",
    "transactionHash": "0x9fa63503ba33a5c98e925b82fb1316c9252369a9df8a84fa17e1235636dcc76e",
    "logs": [],
    "blockNumber": 30726923,
    "cumulativeGasUsed": "3919732",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x565773023043b23C1c12D5fac68Ce8B5F219Bcc0"
  ],
  "numDeployments": 1,
  "solcInputHash": "0436994da4f1886ef7ba0eafc5c461be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract PluginRepoRegistry\",\"name\":\"_repoRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"IPluginNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currentAppliedSetupId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appliedSetupId\",\"type\":\"bytes32\"}],\"name\":\"InvalidAppliedSetupId\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"currentVersionTag\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"newVersionTag\",\"type\":\"tuple\"}],\"name\":\"InvalidUpdateVersion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PluginAlreadyInstalled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"PluginNonupgradeable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"PluginProxyUpgradeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PluginRepoNonexistent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"preparedSetupId\",\"type\":\"bytes32\"}],\"name\":\"SetupAlreadyPrepared\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"name\":\"SetupApplicationUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"preparedSetupId\",\"type\":\"bytes32\"}],\"name\":\"SetupNotApplicable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"preparedSetupId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"appliedSetupId\",\"type\":\"bytes32\"}],\"name\":\"InstallationApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"preparedSetupId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract PluginRepo\",\"name\":\"pluginSetupRepo\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"versionTag\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"helpers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct IPluginSetup.PreparedSetupData\",\"name\":\"preparedSetupData\",\"type\":\"tuple\"}],\"name\":\"InstallationPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"preparedSetupId\",\"type\":\"bytes32\"}],\"name\":\"UninstallationApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"preparedSetupId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract PluginRepo\",\"name\":\"pluginSetupRepo\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"versionTag\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"currentHelpers\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IPluginSetup.SetupPayload\",\"name\":\"setupPayload\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"name\":\"UninstallationPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"preparedSetupId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"appliedSetupId\",\"type\":\"bytes32\"}],\"name\":\"UpdateApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"preparedSetupId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract PluginRepo\",\"name\":\"pluginSetupRepo\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"versionTag\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"currentHelpers\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IPluginSetup.SetupPayload\",\"name\":\"setupPayload\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"helpers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct IPluginSetup.PreparedSetupData\",\"name\":\"preparedSetupData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"UpdatePrepared\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APPLY_INSTALLATION_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPLY_UNINSTALLATION_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPLY_UPDATE_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"versionTag\",\"type\":\"tuple\"},{\"internalType\":\"contract PluginRepo\",\"name\":\"pluginSetupRepo\",\"type\":\"address\"}],\"internalType\":\"struct PluginSetupRef\",\"name\":\"pluginSetupRef\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"helpersHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PluginSetupProcessor.ApplyInstallationParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"applyInstallation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"versionTag\",\"type\":\"tuple\"},{\"internalType\":\"contract PluginRepo\",\"name\":\"pluginSetupRepo\",\"type\":\"address\"}],\"internalType\":\"struct PluginSetupRef\",\"name\":\"pluginSetupRef\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PluginSetupProcessor.ApplyUninstallationParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"applyUninstallation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"versionTag\",\"type\":\"tuple\"},{\"internalType\":\"contract PluginRepo\",\"name\":\"pluginSetupRepo\",\"type\":\"address\"}],\"internalType\":\"struct PluginSetupRef\",\"name\":\"pluginSetupRef\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"helpersHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct PluginSetupProcessor.ApplyUpdateParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"applyUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"versionTag\",\"type\":\"tuple\"},{\"internalType\":\"contract PluginRepo\",\"name\":\"pluginSetupRepo\",\"type\":\"address\"}],\"internalType\":\"struct PluginSetupRef\",\"name\":\"pluginSetupRef\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct PluginSetupProcessor.PrepareInstallationParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"prepareInstallation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"helpers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPluginSetup.PreparedSetupData\",\"name\":\"preparedSetupData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"versionTag\",\"type\":\"tuple\"},{\"internalType\":\"contract PluginRepo\",\"name\":\"pluginSetupRepo\",\"type\":\"address\"}],\"internalType\":\"struct PluginSetupRef\",\"name\":\"pluginSetupRef\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"currentHelpers\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IPluginSetup.SetupPayload\",\"name\":\"setupPayload\",\"type\":\"tuple\"}],\"internalType\":\"struct PluginSetupProcessor.PrepareUninstallationParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"prepareUninstallation\",\"outputs\":[{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"currentVersionTag\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"release\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"build\",\"type\":\"uint16\"}],\"internalType\":\"struct PluginRepo.Tag\",\"name\":\"newVersionTag\",\"type\":\"tuple\"},{\"internalType\":\"contract PluginRepo\",\"name\":\"pluginSetupRepo\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"currentHelpers\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IPluginSetup.SetupPayload\",\"name\":\"setupPayload\",\"type\":\"tuple\"}],\"internalType\":\"struct PluginSetupProcessor.PrepareUpdateParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"prepareUpdate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"helpers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPluginSetup.PreparedSetupData\",\"name\":\"preparedSetupData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repoRegistry\",\"outputs\":[{\"internalType\":\"contract PluginRepoRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"states\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"currentAppliedSetupId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pluginInstallationId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"preparedSetupId\",\"type\":\"bytes32\"}],\"name\":\"validatePreparedSetupId\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is temporarily granted the `ROOT_PERMISSION_ID` permission on the applying DAO and therefore is highly security critical.\",\"errors\":{\"IPluginNotSupported(address)\":[{\"params\":{\"plugin\":\"The address of the contract.\"}}],\"InvalidAppliedSetupId(bytes32,bytes32)\":[{\"params\":{\"appliedSetupId\":\"The applied setup ID obtained from the data in the supplied setup payload.\",\"currentAppliedSetupId\":\"The current applied setup ID with which the data in the supplied payload must match.\"}}],\"InvalidUpdateVersion((uint8,uint16),(uint8,uint16))\":[{\"params\":{\"currentVersionTag\":\"The tag of the current version to update from.\",\"newVersionTag\":\"The tag of the new version to update to.\"}}],\"PluginNonupgradeable(address)\":[{\"params\":{\"plugin\":\"The address of the plugin contract.\"}}],\"PluginProxyUpgradeFailed(address,address,bytes)\":[{\"params\":{\"implementation\":\"The address of the implementation contract.\",\"initData\":\"The initialization data to be passed to the upgradeable plugin contract via `upgradeToAndCall`.\",\"proxy\":\"The address of the proxy.\"}}],\"SetupAlreadyPrepared(bytes32)\":[{\"params\":{\"preparedSetupId\":\"The prepared setup ID.\"}}],\"SetupApplicationUnauthorized(address,address,bytes32)\":[{\"details\":\"This is thrown if the `APPLY_INSTALLATION_PERMISSION_ID`, `APPLY_UPDATE_PERMISSION_ID`, or APPLY_UNINSTALLATION_PERMISSION_ID is missing.\",\"params\":{\"caller\":\"The address (EOA or contract) that requested the application of a setup on the associated DAO.\",\"dao\":\"The address of the DAO to which the plugin belongs.\",\"permissionId\":\"The permission identifier.\"}}],\"SetupNotApplicable(bytes32)\":[{\"params\":{\"preparedSetupId\":\"The prepared setup ID.\"}}]},\"events\":{\"InstallationApplied(address,address,bytes32,bytes32)\":{\"params\":{\"appliedSetupId\":\"The applied setup ID.\",\"dao\":\"The address of the DAO to which the plugin belongs.\",\"plugin\":\"The address of the plugin contract.\",\"preparedSetupId\":\"The prepared setup ID.\"}},\"InstallationPrepared(address,address,bytes32,address,(uint8,uint16),bytes,address,(address[],(uint8,address,address,address,bytes32)[]))\":{\"params\":{\"dao\":\"The address of the DAO to which the plugin belongs.\",\"data\":\"The bytes-encoded data containing the input parameters for the preparation as specified in the corresponding ABI on the version's metadata.\",\"plugin\":\"The address of the plugin contract.\",\"pluginSetupRepo\":\"The repository storing the `PluginSetup` contracts of all versions of a plugin.\",\"preparedSetupData\":\"The deployed plugin's relevant data which consists of helpers and permissions.\",\"preparedSetupId\":\"The prepared setup ID obtained from the supplied data.\",\"sender\":\"The sender that prepared the plugin installation.\",\"versionTag\":\"The version tag of the plugin setup of the prepared installation.\"}},\"UninstallationApplied(address,address,bytes32)\":{\"params\":{\"dao\":\"The address of the DAO to which the plugin belongs.\",\"plugin\":\"The address of the plugin contract.\",\"preparedSetupId\":\"The prepared setup ID.\"}},\"UninstallationPrepared(address,address,bytes32,address,(uint8,uint16),(address,address[],bytes),(uint8,address,address,address,bytes32)[])\":{\"params\":{\"dao\":\"The address of the DAO to which the plugin belongs.\",\"permissions\":\"The list of multi-targeted permission operations to be applied to the installing DAO.\",\"pluginSetupRepo\":\"The repository storing the `PluginSetup` contracts of all versions of a plugin.\",\"preparedSetupId\":\"The prepared setup ID.\",\"sender\":\"The sender that prepared the plugin uninstallation.\",\"setupPayload\":\"The payload containing the plugin and helper contract addresses deployed in a preparation step as well as optional data to be consumed by the plugin setup.\",\"versionTag\":\"The version tag of the plugin to used for install preparation.\"}},\"UpdateApplied(address,address,bytes32,bytes32)\":{\"params\":{\"appliedSetupId\":\"The applied setup ID.\",\"dao\":\"The address of the DAO to which the plugin belongs.\",\"plugin\":\"The address of the plugin contract.\",\"preparedSetupId\":\"The prepared setup ID.\"}},\"UpdatePrepared(address,address,bytes32,address,(uint8,uint16),(address,address[],bytes),(address[],(uint8,address,address,address,bytes32)[]),bytes)\":{\"params\":{\"dao\":\"The address of the DAO to which the plugin belongs.\",\"initData\":\"The initialization data to be passed to the upgradeable plugin contract.\",\"pluginSetupRepo\":\"The repository storing the `PluginSetup` contracts of all versions of a plugin.\",\"preparedSetupData\":\"The deployed plugin's relevant data which consists of helpers and permissions.\",\"preparedSetupId\":\"The prepared setup ID.\",\"sender\":\"The sender that prepared the plugin update.\",\"setupPayload\":\"The payload containing the plugin and helper contract addresses deployed in a preparation step as well as optional data to be consumed by the plugin setup.\",\"versionTag\":\"The version tag of the plugin setup of the prepared update.\"}}},\"kind\":\"dev\",\"methods\":{\"applyInstallation(address,(((uint8,uint16),address),address,(uint8,address,address,address,bytes32)[],bytes32))\":{\"params\":{\"_dao\":\"The address of the installing DAO.\",\"_params\":\"The struct containing the parameters for the `applyInstallation` function.\"}},\"applyUninstallation(address,(address,((uint8,uint16),address),(uint8,address,address,address,bytes32)[]))\":{\"details\":\"The list of `_params.setupPayload.currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which the uninstallation was prepared for.\",\"params\":{\"_dao\":\"The address of the installing DAO.\",\"_params\":\"The struct containing the parameters for the `applyUninstallation` function.\"}},\"applyUpdate(address,(address,((uint8,uint16),address),bytes,(uint8,address,address,address,bytes32)[],bytes32))\":{\"params\":{\"_dao\":\"The address of the updating DAO.\",\"_params\":\"The struct containing the parameters for the `applyInstallation` function.\"}},\"constructor\":{\"params\":{\"_repoRegistry\":\"The plugin repo registry contract.\"}},\"prepareInstallation(address,(((uint8,uint16),address),bytes))\":{\"params\":{\"_dao\":\"The address of the installing DAO.\",\"_params\":\"The struct containing the parameters for the `prepareInstallation` function.\"},\"returns\":{\"plugin\":\"The prepared plugin contract address.\",\"preparedSetupData\":\"The data struct containing the array of helper contracts and permissions that the setup has prepared.\"}},\"prepareUninstallation(address,(((uint8,uint16),address),(address,address[],bytes)))\":{\"details\":\"The list of `_params.setupPayload.currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which the uninstallation was prepared for.\",\"params\":{\"_dao\":\"The address of the installing DAO.\",\"_params\":\"The struct containing the parameters for the `prepareUninstallation` function.\"},\"returns\":{\"permissions\":\"The list of multi-targeted permission operations to be applied to the uninstalling DAO.\"}},\"prepareUpdate(address,((uint8,uint16),(uint8,uint16),address,(address,address[],bytes)))\":{\"details\":\"The list of `_params.setupPayload.currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which the update is prepared for.\",\"params\":{\"_dao\":\"The address of the DAO For which preparation of update happens.\",\"_params\":\"The struct containing the parameters for the `prepareUpdate` function.\"},\"returns\":{\"initData\":\"The initialization data to be passed to upgradeable contracts when the update is applied\",\"preparedSetupData\":\"The data struct containing the array of helper contracts and permissions that the setup has prepared.\"}},\"validatePreparedSetupId(bytes32,bytes32)\":{\"details\":\"If the block number stored in `states[pluginInstallationId].blockNumber` exceeds the one stored in `pluginState.preparedSetupIdToBlockNumber[preparedSetupId]`, the prepared setup with `preparedSetupId` is outdated and not applicable anymore.\",\"params\":{\"pluginInstallationId\":\"The plugin installation ID obtained from the hash of `abi.encode(daoAddress, pluginAddress)`.\",\"preparedSetupId\":\"The prepared setup ID to be validated.\"}}},\"stateVariables\":{\"EMPTY_ARRAY_HASH\":{\"details\":\"The hash is computed via `keccak256(abi.encode([]))`.\"},\"ZERO_BYTES_HASH\":{\"details\":\"The hash is computed via `keccak256(abi.encode(0))`.\"},\"states\":{\"details\":\"This variable is public on purpose to allow future versions to access and migrate the storage.\"}},\"title\":\"PluginSetupProcessor\",\"version\":1},\"userdoc\":{\"errors\":{\"IPluginNotSupported(address)\":[{\"notice\":\"Thrown if a contract does not support the `IPlugin` interface.\"}],\"InvalidAppliedSetupId(bytes32,bytes32)\":[{\"notice\":\"Thrown if the applied setup ID resulting from the supplied setup payload does not match with the current applied setup ID.\"}],\"InvalidUpdateVersion((uint8,uint16),(uint8,uint16))\":[{\"notice\":\"Thrown if the update version is invalid.\"}],\"PluginAlreadyInstalled()\":[{\"notice\":\"Thrown if plugin is already installed and one tries to prepare or apply install on it.\"}],\"PluginNonupgradeable(address)\":[{\"notice\":\"Thrown if a plugin is not upgradeable.\"}],\"PluginProxyUpgradeFailed(address,address,bytes)\":[{\"notice\":\"Thrown if the upgrade of an `UUPSUpgradeable` proxy contract (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)) failed.\"}],\"PluginRepoNonexistent()\":[{\"notice\":\"Thrown if a plugin repository does not exist on the plugin repo registry.\"}],\"SetupAlreadyPrepared(bytes32)\":[{\"notice\":\"Thrown if a plugin setup was already prepared inidcated by the prepared setup ID.\"}],\"SetupApplicationUnauthorized(address,address,bytes32)\":[{\"notice\":\"Thrown if a setup is unauthorized and cannot be applied because of a missing permission of the associated DAO.\"}],\"SetupNotApplicable(bytes32)\":[{\"notice\":\"Thrown if a prepared setup ID is not eligible to be applied. This can happen if another setup has been already applied or if the setup wasn't prepared in the first place.\"}]},\"events\":{\"InstallationApplied(address,address,bytes32,bytes32)\":{\"notice\":\"Emitted after a plugin installation was applied.\"},\"InstallationPrepared(address,address,bytes32,address,(uint8,uint16),bytes,address,(address[],(uint8,address,address,address,bytes32)[]))\":{\"notice\":\"Emitted with a prepared plugin installation to store data relevant for the application step.\"},\"UninstallationApplied(address,address,bytes32)\":{\"notice\":\"Emitted after a plugin installation was applied.\"},\"UninstallationPrepared(address,address,bytes32,address,(uint8,uint16),(address,address[],bytes),(uint8,address,address,address,bytes32)[])\":{\"notice\":\"Emitted with a prepared plugin uninstallation to store data relevant for the application step.\"},\"UpdateApplied(address,address,bytes32,bytes32)\":{\"notice\":\"Emitted after a plugin update was applied.\"},\"UpdatePrepared(address,address,bytes32,address,(uint8,uint16),(address,address[],bytes),(address[],(uint8,address,address,address,bytes32)[]),bytes)\":{\"notice\":\"Emitted with a prepared plugin update to store data relevant for the application step.\"}},\"kind\":\"user\",\"methods\":{\"APPLY_INSTALLATION_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `applyInstallation` function.\"},\"APPLY_UNINSTALLATION_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `applyUninstallation` function.\"},\"APPLY_UPDATE_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `applyUpdate` function.\"},\"applyInstallation(address,(((uint8,uint16),address),address,(uint8,address,address,address,bytes32)[],bytes32))\":{\"notice\":\"Applies the permissions of a prepared installation to a DAO.\"},\"applyUninstallation(address,(address,((uint8,uint16),address),(uint8,address,address,address,bytes32)[]))\":{\"notice\":\"Applies the permissions of a prepared uninstallation to a DAO.\"},\"applyUpdate(address,(address,((uint8,uint16),address),bytes,(uint8,address,address,address,bytes32)[],bytes32))\":{\"notice\":\"Applies the permissions of a prepared update of an UUPS upgradeable proxy contract to a DAO.\"},\"constructor\":{\"notice\":\"Constructs the plugin setup processor by setting the associated plugin repo registry.\"},\"prepareInstallation(address,(((uint8,uint16),address),bytes))\":{\"notice\":\"Prepares the installation of a plugin.\"},\"prepareUninstallation(address,(((uint8,uint16),address),(address,address[],bytes)))\":{\"notice\":\"Prepares the uninstallation of a plugin.\"},\"prepareUpdate(address,((uint8,uint16),(uint8,uint16),address,(address,address[],bytes)))\":{\"notice\":\"Prepares the update of an UUPS upgradeable plugin.\"},\"repoRegistry()\":{\"notice\":\"The plugin repo registry listing the `PluginRepo` contracts versioning the `PluginSetup` contracts.\"},\"states(bytes32)\":{\"notice\":\"A mapping between the plugin installation ID (obtained from the DAO and plugin address) and the plugin state information.\"},\"validatePreparedSetupId(bytes32,bytes32)\":{\"notice\":\"Validates that a setup ID can be applied for `applyInstallation`, `applyUpdate`, or `applyUninstallation`.\"}},\"notice\":\"This contract processes the preparation and application of plugin setups (installation, update, uninstallation) on behalf of a requesting DAO.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factory/plugin/setup/PluginSetupProcessor.sol\":\"PluginSetupProcessor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x7493c62dd0335284327a6cce7bd29aaa47bebb761e4e01ab4b031563f977bc32\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165StorageUpgradeable is Initializable, ERC165Upgradeable {\\n    function __ERC165Storage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165Storage_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8abf30b22b9f34c48c1101400a3172483cfa4fdc5e4de6d040309463e6faee4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/core/dao/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\nimport {PermissionManager} from \\\"../permission/PermissionManager.sol\\\";\\nimport {CallbackHandler} from \\\"../utils/CallbackHandler.sol\\\";\\nimport {hasBit, flipBit} from \\\"../utils/BitMap.sol\\\";\\nimport {IEIP4824} from \\\"./IEIP4824.sol\\\";\\nimport {IDAO} from \\\"./IDAO.sol\\\";\\n\\n/// @title DAO\\n/// @notice This contract contains the logic for a DAO\\ncontract DAO is\\n    IEIP4824,\\n    Initializable,\\n    IERC1271,\\n    ERC165StorageUpgradeable,\\n    IDAO,\\n    UUPSUpgradeable,\\n    PermissionManager,\\n    CallbackHandler\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n\\n    /// @notice The ID of the permission required to call the `execute` function.\\n    bytes32 public constant EXECUTE_PERMISSION_ID = keccak256(\\\"EXECUTE_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `_authorizeUpgrade` function.\\n    bytes32 public constant UPGRADE_DAO_PERMISSION_ID = keccak256(\\\"UPGRADE_DAO_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `setMetadata` function.\\n    bytes32 public constant SET_METADATA_PERMISSION_ID = keccak256(\\\"SET_METADATA_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `setTrustedForwarder` function.\\n    bytes32 public constant SET_TRUSTED_FORWARDER_PERMISSION_ID =\\n        keccak256(\\\"SET_TRUSTED_FORWARDER_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `setSignatureValidator` function.\\n    bytes32 public constant SET_SIGNATURE_VALIDATOR_PERMISSION_ID =\\n        keccak256(\\\"SET_SIGNATURE_VALIDATOR_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `registerStandardCallback` function.\\n    bytes32 public constant REGISTER_STANDARD_CALLBACK_PERMISSION_ID =\\n        keccak256(\\\"REGISTER_STANDARD_CALLBACK_PERMISSION\\\");\\n\\n    /// @notice The internal constant storing the maximal action array length.\\n    uint256 internal constant MAX_ACTIONS = 256;\\n\\n    /// @notice The [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    IERC1271 public signatureValidator;\\n\\n    /// @notice The address of the trusted forwarder verifying meta transactions.\\n    address private trustedForwarder;\\n\\n    /// @notice The [EIP-4824](https://eips.ethereum.org/EIPS/eip-4824) DAO uri.\\n    string private _daoURI;\\n\\n    /// @notice Thrown if the action array length is larger than `MAX_ACTIONS`.\\n    error TooManyActions();\\n\\n    /// @notice Thrown if action execution has failed.\\n    /// @param index The index of the action in the action array that failed.\\n    error ActionFailed(uint256 index);\\n\\n    /// @notice Thrown if the deposit amount is zero.\\n    error ZeroAmount();\\n\\n    /// @notice Thrown if there is a mismatch between the expected and actually deposited amount of native tokens.\\n    /// @param expected The expected native token amount.\\n    /// @param actual The actual native token amount deposited.\\n    error NativeTokenDepositAmountMismatch(uint256 expected, uint256 actual);\\n\\n    /// @notice Emitted when a new DAO uri is set.\\n    /// @param daoURI The new uri.\\n    event NewURI(string daoURI);\\n\\n    /// @notice Disables the initializers on the implementation contract to prevent it from being left uninitialized.\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the DAO by\\n    /// - registering the [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID\\n    /// - setting the trusted forwarder for meta transactions\\n    /// - giving the `ROOT_PERMISSION_ID` permission to the initial owner (that should be revoked and transferred to the DAO after setup).\\n    /// @dev This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).\\n    /// @param _metadata IPFS hash that points to all the metadata (logo, description, tags, etc.) of a DAO.\\n    /// @param _initialOwner The initial owner of the DAO having the `ROOT_PERMISSION_ID` permission.\\n    /// @param _trustedForwarder The trusted forwarder responsible for verifying meta transactions.\\n    function initialize(\\n        bytes calldata _metadata,\\n        address _initialOwner,\\n        address _trustedForwarder,\\n        string calldata daoURI_\\n    ) external initializer {\\n        _registerInterface(type(IDAO).interfaceId);\\n        _registerInterface(type(IERC1271).interfaceId);\\n        _registerInterface(type(IEIP4824).interfaceId);\\n        _registerTokenInterfaces();\\n\\n        _setMetadata(_metadata);\\n        _setTrustedForwarder(_trustedForwarder);\\n        _setDaoURI(daoURI_);\\n        __PermissionManager_init(_initialOwner);\\n    }\\n\\n    /// @inheritdoc PermissionManager\\n    function isPermissionRestrictedForAnyAddr(\\n        bytes32 _permissionId\\n    ) internal pure override returns (bool) {\\n        return\\n            _permissionId == EXECUTE_PERMISSION_ID ||\\n            _permissionId == UPGRADE_DAO_PERMISSION_ID ||\\n            _permissionId == SET_METADATA_PERMISSION_ID ||\\n            _permissionId == SET_TRUSTED_FORWARDER_PERMISSION_ID ||\\n            _permissionId == SET_SIGNATURE_VALIDATOR_PERMISSION_ID ||\\n            _permissionId == REGISTER_STANDARD_CALLBACK_PERMISSION_ID;\\n    }\\n\\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeabilty mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    /// @dev The caller must have the `UPGRADE_DAO_PERMISSION_ID` permission.\\n    function _authorizeUpgrade(address) internal virtual override auth(UPGRADE_DAO_PERMISSION_ID) {}\\n\\n    /// @inheritdoc IDAO\\n    function setTrustedForwarder(\\n        address _newTrustedForwarder\\n    ) external override auth(SET_TRUSTED_FORWARDER_PERMISSION_ID) {\\n        _setTrustedForwarder(_newTrustedForwarder);\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function getTrustedForwarder() external view virtual override returns (address) {\\n        return trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view override returns (bool) {\\n        return isGranted(_where, _who, _permissionId, _data);\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function setMetadata(\\n        bytes calldata _metadata\\n    ) external override auth(SET_METADATA_PERMISSION_ID) {\\n        _setMetadata(_metadata);\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function execute(\\n        bytes32 _callId,\\n        Action[] calldata _actions,\\n        uint256 _allowFailureMap\\n    )\\n        external\\n        override\\n        auth(EXECUTE_PERMISSION_ID)\\n        returns (bytes[] memory execResults, uint256 failureMap)\\n    {\\n        if (_actions.length > MAX_ACTIONS) {\\n            revert TooManyActions();\\n        }\\n\\n        execResults = new bytes[](_actions.length);\\n\\n        for (uint256 i = 0; i < _actions.length; ) {\\n            address to = _actions[i].to;\\n            (bool success, bytes memory response) = to.call{value: _actions[i].value}(\\n                _actions[i].data\\n            );\\n\\n            if (!success) {\\n                // If the call failed and wasn't allowed in allowFailureMap, revert.\\n                if (!hasBit(_allowFailureMap, uint8(i))) {\\n                    revert ActionFailed(i);\\n                }\\n\\n                // If the call failed, but was allowed in allowFailureMap, store that\\n                // this specific action has actually failed.\\n                failureMap = flipBit(failureMap, uint8(i));\\n            }\\n\\n            execResults[i] = response;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit Executed({\\n            actor: msg.sender,\\n            callId: _callId,\\n            actions: _actions,\\n            failureMap: failureMap,\\n            execResults: execResults\\n        });\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        string calldata _reference\\n    ) external payable override {\\n        if (_amount == 0) revert ZeroAmount();\\n\\n        if (_token == address(0)) {\\n            if (msg.value != _amount)\\n                revert NativeTokenDepositAmountMismatch({expected: _amount, actual: msg.value});\\n        } else {\\n            if (msg.value != 0)\\n                revert NativeTokenDepositAmountMismatch({expected: 0, actual: msg.value});\\n\\n            IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        }\\n\\n        emit Deposited(msg.sender, _token, _amount, _reference);\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function setSignatureValidator(\\n        address _signatureValidator\\n    ) external override auth(SET_SIGNATURE_VALIDATOR_PERMISSION_ID) {\\n        signatureValidator = IERC1271(_signatureValidator);\\n\\n        emit SignatureValidatorSet({signatureValidator: _signatureValidator});\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function isValidSignature(\\n        bytes32 _hash,\\n        bytes memory _signature\\n    ) external view override(IDAO, IERC1271) returns (bytes4) {\\n        if (address(signatureValidator) == address(0)) {\\n            // Return the invalid magic number\\n            return bytes4(0);\\n        }\\n        // Forward the call to the set signature validator contract\\n        return signatureValidator.isValidSignature(_hash, _signature);\\n    }\\n\\n    /// @notice Emits the `NativeTokenDeposited` event to track native token deposits that weren't made via the deposit method.\\n    /// @dev This call is bound by the gas limitations for `send`/`transfer` calls introduced by EIP-2929.\\n    /// Gas cost increases in future hard forks might break this function. As an alternative, EIP-2930-type transactions using access lists can be employed.\\n    receive() external payable {\\n        emit NativeTokenDeposited(msg.sender, msg.value);\\n    }\\n\\n    /// @notice Fallback to handle future versions of the [ERC-165](https://eips.ethereum.org/EIPS/eip-165) standard.\\n    /// @param _input An alias being equivalent to `msg.data`. This feature of the fallback function was introduced with the [solidity compiler version 0.7.6](https://github.com/ethereum/solidity/releases/tag/v0.7.6)\\n    /// @return The magic number registered for the function selector triggering the fallback.\\n    fallback(bytes calldata _input) external returns (bytes memory) {\\n        bytes4 magicNumber = _handleCallback(msg.sig, _input);\\n        return abi.encode(magicNumber);\\n    }\\n\\n    /// @notice Emits the MetadataSet event if new metadata is set.\\n    /// @param _metadata Hash of the IPFS metadata object.\\n    function _setMetadata(bytes calldata _metadata) internal {\\n        emit MetadataSet(_metadata);\\n    }\\n\\n    /// @notice Sets the trusted forwarder on the DAO and emits the associated event.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function _setTrustedForwarder(address _trustedForwarder) internal {\\n        trustedForwarder = _trustedForwarder;\\n\\n        emit TrustedForwarderSet(_trustedForwarder);\\n    }\\n\\n    /// @notice Registers the ERC721/ERC1155 interfaces and callbacks.\\n    function _registerTokenInterfaces() private {\\n        _registerInterface(type(IERC721ReceiverUpgradeable).interfaceId);\\n        _registerInterface(type(IERC1155ReceiverUpgradeable).interfaceId);\\n\\n        _registerCallback(\\n            IERC721ReceiverUpgradeable.onERC721Received.selector,\\n            IERC721ReceiverUpgradeable.onERC721Received.selector\\n        );\\n        _registerCallback(\\n            IERC1155ReceiverUpgradeable.onERC1155Received.selector,\\n            IERC1155ReceiverUpgradeable.onERC1155Received.selector\\n        );\\n        _registerCallback(\\n            IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector,\\n            IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector\\n        );\\n    }\\n\\n    /// @inheritdoc IDAO\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external override auth(REGISTER_STANDARD_CALLBACK_PERMISSION_ID) {\\n        _registerInterface(_interfaceId);\\n        _registerCallback(_callbackSelector, _magicNumber);\\n        emit StandardCallbackRegistered(_interfaceId, _callbackSelector, _magicNumber);\\n    }\\n\\n    /// @inheritdoc IEIP4824\\n    function daoURI() external view returns (string memory) {\\n        return _daoURI;\\n    }\\n\\n    /// @notice Updates the set DAO uri to a new value.\\n    /// @param newDaoURI The new DAO uri to be set.\\n    function setDaoURI(string calldata newDaoURI) external auth(SET_METADATA_PERMISSION_ID) {\\n        _setDaoURI(newDaoURI);\\n    }\\n\\n    /// @notice Sets the new DAO uri and emits the associated event.\\n    /// @param daoURI_ The new DAO uri.\\n    function _setDaoURI(string calldata daoURI_) internal {\\n        _daoURI = daoURI_;\\n\\n        emit NewURI(daoURI_);\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[47] private __gap;\\n}\",\"keccak256\":\"0x60d2a2bdf3de9553e33413ba8b29cb484a601bde594bb9104d282b963c106036\",\"license\":\"MIT\"},\"contracts/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title IDAO\\n/// @notice The interface required for DAOs\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If no failure map is provided, one failing action results in the entire excution to be reverted. If a non-zero failure map is provided, allowed actions can fail without the remaining actions being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The constructed failureMap which contains which actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external;\\n}\",\"keccak256\":\"0xd5b4cb2fab92eb9953f41ea15be8b857a484d1f10b6b219c94ed3fa89c482e41\",\"license\":\"MIT\"},\"contracts/core/dao/IEIP4824.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title ERC-4824 DAOs\\n/// @dev See <https://eips.ethereum.org/EIPS/eip-4824>\\ninterface IEIP4824 {\\n    event DAOURIUpdate(address daoAddress, string daoURI);\\n    /// @notice A distinct Uniform Resource Identifier (URI) pointing to a JSON object following the \\\"ERC-4824 DAO JSON-LD Schema\\\". This JSON file splits into four URIs: membersURI, proposalsURI, activityLogURI, and governanceURI. The membersURI should point to a JSON file that conforms to the \\\"ERC-4824 Members JSON-LD Schema\\\". The proposalsURI should point to a JSON file that conforms to the \\\"ERC-4824 Proposals JSON-LD Schema\\\". The activityLogURI should point to a JSON file that conforms to the \\\"ERC-4824 Activity Log JSON-LD Schema\\\". The governanceURI should point to a flatfile, normatively a .md file. Each of the JSON files named above can be statically-hosted or dynamically-generated.\\n    function daoURI() external view returns (string memory _daoURI);\\n}\",\"keccak256\":\"0x6d5bf76bf003aded8f37a15c2200b35c1111946ad6474868d0509082f1ba1629\",\"license\":\"MIT\"},\"contracts/core/permission/IPermissionCondition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title IPermissionCondition\\n/// @notice This interface can be implemented to support more customary permissions depending on on- or off-chain state, e.g., by querying token ownership or a secondary condition, respectively.\\ninterface IPermissionCondition {\\n    /// @notice This method is used to check if a call is permitted.\\n    /// @param _where The address of the target contract.\\n    /// @param _who The address (EOA or contract) for which the permission are checked.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data Optional data passed to the `PermissionCondition` implementation.\\n    /// @return allowed Returns true if the call is permitted.\\n    function isGranted(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes calldata _data\\n    ) external view returns (bool allowed);\\n}\",\"keccak256\":\"0x63e728afbb589ce6241f73540acb95cf32bbddfd9fdadf1f8d2e141778d49c19\",\"license\":\"MIT\"},\"contracts/core/permission/PermissionLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title PermissionLib\\n/// @notice A library containing objects for permission processing.\\nlibrary PermissionLib {\\n    /// @notice A constant expressing that no condition is applied to a permission.\\n    address public constant NO_CONDITION = address(0);\\n\\n    /// @notice The types of permission operations available in the `PermissionManager`.\\n    /// @param Grant The grant operation setting a permission without a condition.\\n    /// @param Revoke The revoke operation removing a permission (that was granted with or without a condition).\\n    /// @param GrantWithCondition The grant operation setting a permission with a condition.\\n    enum Operation {\\n        Grant,\\n        Revoke,\\n        GrantWithCondition\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on a single target contract without a condition.\\n    /// @param operation The permission operation type.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param permissionId The permission identifier.\\n    struct SingleTargetPermission {\\n        Operation operation;\\n        address who;\\n        bytes32 permissionId;\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on multiple target contracts, optionally, with a conditon.\\n    /// @param operation The permission operation type.\\n    /// @param where The address of the target contract for which `who` recieves permission.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\\n    /// @param permissionId The permission identifier.\\n    struct MultiTargetPermission {\\n        Operation operation;\\n        address where;\\n        address who;\\n        address condition;\\n        bytes32 permissionId;\\n    }\\n}\",\"keccak256\":\"0x31335c9b3ab11e985b996ad3f2548890d2b3b08c72bb92cba19c7c94bdcf6d05\",\"license\":\"MIT\"},\"contracts/core/permission/PermissionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./IPermissionCondition.sol\\\";\\nimport \\\"./PermissionLib.sol\\\";\\n\\n/// @title PermissionManager\\n/// @notice The abstract permission manager used in a DAO.\\nabstract contract PermissionManager is Initializable {\\n    /// @notice The ID of the permission required to call the `grant`, `grantWithCondition`, `revoke`, and `bulk` function.\\n    bytes32 public constant ROOT_PERMISSION_ID = keccak256(\\\"ROOT_PERMISSION\\\");\\n\\n    /// @notice A special address encoding permissions that are valid for any address `who` or `where`.\\n    address internal constant ANY_ADDR = address(type(uint160).max);\\n\\n    /// @notice A special address encoding if a permissions is not set and therefore not allowed.\\n    address internal constant UNSET_FLAG = address(0);\\n\\n    /// @notice A special address encoding if a permission is allowed.\\n    address internal constant ALLOW_FLAG = address(2);\\n\\n    /// @notice A mapping storing permissions as hashes (i.e., `permissionHash(where, who, permissionId)`) and their status encoded by an address (unset, allowed, or redirecting to a `PermissionCondition`).\\n    mapping(bytes32 => address) internal permissionsHashed;\\n\\n    /// @notice Thrown if a call is unauthorized.\\n    /// @param where The context in which the authorization reverted.\\n    /// @param who The address (EOA or contract) missing the permission.\\n    /// @param permissionId The permission identifier.\\n    error Unauthorized(address where, address who, bytes32 permissionId);\\n\\n    /// @notice Thrown if a permission has been already granted with a different condition.\\n    /// @dev This makes sure that condition on the same permission can not be overwriten by a different condition.\\n    /// @param where The address of the target contract to grant `_who` permission to.\\n    /// @param who The address (EOA or contract) to which the permission has already been granted.\\n    /// @param permissionId The permission identifier.\\n    /// @param currentCondition The current condition set for permissionId.\\n    /// @param newCondition The new condition it tries to set for permissionId.\\n    error PermissionAlreadyGrantedForDifferentCondition(\\n        address where,\\n        address who,\\n        bytes32 permissionId,\\n        address currentCondition,\\n        address newCondition\\n    );\\n\\n    /// @notice Thrown for permission grants where `who` or `where` is `ANY_ADDR`, but no condition is present.\\n    error ConditionNotPresentForAnyAddress();\\n\\n    /// @notice Thrown for `ROOT_PERMISSION_ID` or `EXECUTE_PERMISSION_ID` permission grants where `who` or `where` is `ANY_ADDR`.\\n    error PermissionsForAnyAddressDisallowed();\\n\\n    /// @notice Thrown for permission grants where `who` and `where` are both `ANY_ADDR`.\\n    error AnyAddressDisallowedForWhoAndWhere();\\n\\n    /// @notice Emitted when a permission `permission` is granted in the context `here` to the address `_who` for the contract `_where`.\\n    /// @param permissionId The permission identifier.\\n    /// @param here The address of the context in which the permission is granted.\\n    /// @param where The address of the target contract for which `_who` receives permission.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param condition The address `ALLOW_FLAG` for regular permissions or, alternatively, the `PermissionCondition` to be used.\\n    event Granted(\\n        bytes32 indexed permissionId,\\n        address indexed here,\\n        address where,\\n        address indexed who,\\n        IPermissionCondition condition\\n    );\\n\\n    /// @notice Emitted when a permission `permission` is revoked in the context `here` from the address `_who` for the contract `_where`.\\n    /// @param permissionId The permission identifier.\\n    /// @param here The address of the context in which the permission is revoked.\\n    /// @param where The address of the target contract for which `_who` loses permission.\\n    /// @param who The address (EOA or contract) losing the permission.\\n    event Revoked(\\n        bytes32 indexed permissionId,\\n        address indexed here,\\n        address where,\\n        address indexed who\\n    );\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through this permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(_permissionId);\\n        _;\\n    }\\n\\n    /// @notice Initialization method to set the initial owner of the permission manager.\\n    /// @dev The initial owner is granted the `ROOT_PERMISSION_ID` permission.\\n    /// @param _initialOwner The initial owner of the permission manager.\\n    function __PermissionManager_init(address _initialOwner) internal onlyInitializing {\\n        _initializePermissionManager(_initialOwner);\\n    }\\n\\n    /// @notice Grants permission to an address to call methods in a contract guarded by an auth modifier with the specified permission identifier.\\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) receiving the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function grant(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        _grant(_where, _who, _permissionId);\\n    }\\n\\n    /// @notice Grants permission to an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier if the referenced condition permits it.\\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) receiving the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function grantWithCondition(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        IPermissionCondition _condition\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        _grantWithCondition(_where, _who, _permissionId, _condition);\\n    }\\n\\n    /// @notice Revokes permission from an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier.\\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission.\\n    /// @param _where The address of the target contract for which `_who` loses permission.\\n    /// @param _who The address (EOA or contract) losing the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @dev Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function revoke(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        _revoke(_where, _who, _permissionId);\\n    }\\n\\n    /// @notice Applies an array of permission operations on a single target contracts `_where`.\\n    /// @param _where The address of the single target contract.\\n    /// @param items The array of single-targeted permission operations to apply.\\n    function applySingleTargetPermissions(\\n        address _where,\\n        PermissionLib.SingleTargetPermission[] calldata items\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        for (uint256 i; i < items.length; ) {\\n            PermissionLib.SingleTargetPermission memory item = items[i];\\n\\n            if (item.operation == PermissionLib.Operation.Grant) {\\n                _grant(_where, item.who, item.permissionId);\\n            } else if (item.operation == PermissionLib.Operation.Revoke) {\\n                _revoke(_where, item.who, item.permissionId);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Applies an array of permission operations on multiple target contracts `items[i].where`.\\n    /// @param _items The array of multi-targeted permission operations to apply.\\n    function applyMultiTargetPermissions(\\n        PermissionLib.MultiTargetPermission[] calldata _items\\n    ) external virtual auth(ROOT_PERMISSION_ID) {\\n        for (uint256 i; i < _items.length; ) {\\n            PermissionLib.MultiTargetPermission memory item = _items[i];\\n\\n            if (item.operation == PermissionLib.Operation.Grant) {\\n                _grant(item.where, item.who, item.permissionId);\\n            } else if (item.operation == PermissionLib.Operation.Revoke) {\\n                _revoke(item.where, item.who, item.permissionId);\\n            } else if (item.operation == PermissionLib.Operation.GrantWithCondition) {\\n                _grantWithCondition(\\n                    item.where,\\n                    item.who,\\n                    item.permissionId,\\n                    IPermissionCondition(item.condition)\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) for which the permission is checked.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if `_who` has the permissions on the target contract via the specified permission identifier.\\n    function isGranted(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) public view virtual returns (bool) {\\n        return\\n            _isGranted(_where, _who, _permissionId, _data) || // check if `_who` has permission for `_permissionId` on `_where`\\n            _isGranted(_where, ANY_ADDR, _permissionId, _data) || // check if anyone has permission for `_permissionId` on `_where`\\n            _isGranted(ANY_ADDR, _who, _permissionId, _data); // check if `_who` has permission for `_permissionI` on any contract\\n    }\\n\\n    /// @notice Grants the `ROOT_PERMISSION_ID` permission to the initial owner during initialization of the permission manager.\\n    /// @param _initialOwner The initial owner of the permission manager.\\n    function _initializePermissionManager(address _initialOwner) internal {\\n        _grant(address(this), _initialOwner, ROOT_PERMISSION_ID);\\n    }\\n\\n    /// @notice This method is used in the public `grant` method of the permission manager.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    function _grant(address _where, address _who, bytes32 _permissionId) internal virtual {\\n        _grantWithCondition(_where, _who, _permissionId, IPermissionCondition(ALLOW_FLAG));\\n    }\\n\\n    /// @notice This method is used in the internal `_grant` method of the permission manager.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _condition An address either resolving to a `PermissionCondition` contract address or being the `ALLOW_FLAG` address (`address(2)`).\\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\\n    function _grantWithCondition(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        IPermissionCondition _condition\\n    ) internal virtual {\\n        if (_where == ANY_ADDR && _who == ANY_ADDR) {\\n            revert AnyAddressDisallowedForWhoAndWhere();\\n        }\\n\\n        if (_where == ANY_ADDR || _who == ANY_ADDR) {\\n            bool isRestricted = isPermissionRestrictedForAnyAddr(_permissionId);\\n            if (_permissionId == ROOT_PERMISSION_ID || isRestricted) {\\n                revert PermissionsForAnyAddressDisallowed();\\n            }\\n\\n            if (address(_condition) == ALLOW_FLAG) {\\n                revert ConditionNotPresentForAnyAddress();\\n            }\\n        }\\n\\n        bytes32 permHash = permissionHash(_where, _who, _permissionId);\\n\\n        address currentCondition = permissionsHashed[permHash];\\n        address newCondition = address(_condition);\\n\\n        // Means permHash is not currently set.\\n        if (currentCondition == UNSET_FLAG) {\\n            permissionsHashed[permHash] = newCondition;\\n\\n            emit Granted(_permissionId, msg.sender, _where, _who, _condition);\\n        } else if (currentCondition != newCondition) {\\n            // Revert if `permHash` is already granted, but uses a different condition.\\n            // If we don't revert, we either should:\\n            //   - allow overriding the condition on the same permission\\n            //     which could be confusing whoever granted the same permission first\\n            //   - or do nothing and succeed silently which could be confusing for the caller.\\n            revert PermissionAlreadyGrantedForDifferentCondition({\\n                where: _where,\\n                who: _who,\\n                permissionId: _permissionId,\\n                currentCondition: currentCondition,\\n                newCondition: newCondition\\n            });\\n        }\\n    }\\n\\n    /// @notice This method is used in the public `revoke` method of the permission manager.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @dev Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that might have been granted in parallel.\\n    function _revoke(address _where, address _who, bytes32 _permissionId) internal virtual {\\n        bytes32 permHash = permissionHash(_where, _who, _permissionId);\\n        if (permissionsHashed[permHash] != UNSET_FLAG) {\\n            permissionsHashed[permHash] = UNSET_FLAG;\\n\\n            emit Revoked(_permissionId, msg.sender, _where, _who);\\n        }\\n    }\\n\\n    /// @notice Checks if a caller is granted permissions on a target contract via a permission identifier and redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if `_who` has the permissions on the contract via the specified permissionId identifier.\\n    function _isGranted(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) internal view virtual returns (bool) {\\n        address accessFlagOrCondition = permissionsHashed[\\n            permissionHash(_where, _who, _permissionId)\\n        ];\\n\\n        if (accessFlagOrCondition == UNSET_FLAG) return false;\\n        if (accessFlagOrCondition == ALLOW_FLAG) return true;\\n\\n        // Since it's not a flag, assume it's a PermissionCondition and try-catch to skip failures\\n        try\\n            IPermissionCondition(accessFlagOrCondition).isGranted(\\n                _where,\\n                _who,\\n                _permissionId,\\n                _data\\n            )\\n        returns (bool allowed) {\\n            if (allowed) return true;\\n        } catch {}\\n\\n        return false;\\n    }\\n\\n    /// @notice A private function to be used to check permissions on the permission manager contract (`address(this)`) itself.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    function _auth(bytes32 _permissionId) internal view virtual {\\n        if (!isGranted(address(this), msg.sender, _permissionId, msg.data)) {\\n            revert Unauthorized({\\n                where: address(this),\\n                who: msg.sender,\\n                permissionId: _permissionId\\n            });\\n        }\\n    }\\n\\n    /// @notice Generates the hash for the `permissionsHashed` mapping obtained from the word \\\"PERMISSION\\\", the contract address, the address owning the permission, and the permission identifier.\\n    /// @param _where The address of the target contract for which `_who` recieves permission.\\n    /// @param _who The address (EOA or contract) owning the permission.\\n    /// @param _permissionId The permission identifier.\\n    /// @return The permission hash.\\n    function permissionHash(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId\\n    ) internal pure virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PERMISSION\\\", _who, _where, _permissionId));\\n    }\\n\\n    /// @notice Decides if the granting permissionId is restricted when `_who = ANY_ADDR` or `_where = ANY_ADDR`.\\n    /// @param _permissionId The permission identifier.\\n    /// @return Whether or not the permission is restricted.\\n    /// @dev By default, every permission is unrestricted and it is the derived contract's responsibility to override it. Note, that the `ROOT_PERMISSION_ID` is included not required to be set it again.\\n    function isPermissionRestrictedForAnyAddr(\\n        bytes32 _permissionId\\n    ) internal view virtual returns (bool) {\\n        (_permissionId); // silence the warning.\\n        return false;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0x69b2d8ae34bc058f47f8eb2d142d703fd16c44bbeac203bdef55b6ee552e315d\",\"license\":\"MIT\"},\"contracts/core/plugin/IPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title IPlugin\\n/// @notice An interface defining the traits of a plugin.\\ninterface IPlugin {\\n    enum PluginType {\\n        UUPS,\\n        Cloneable,\\n        Constructable\\n    }\\n\\n    /// @notice returns the plugin's type\\n    function pluginType() external view returns (PluginType);\\n}\",\"keccak256\":\"0x2bf9f938ebfce114ab4252061d2db69c9fa556b2363806dca00c8905bd04f808\",\"license\":\"MIT\"},\"contracts/core/plugin/PluginUUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {IERC1822ProxiableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\nimport {DaoAuthorizableUpgradeable} from \\\"./dao-authorizable/DaoAuthorizableUpgradeable.sol\\\";\\nimport {IPlugin} from \\\"./IPlugin.sol\\\";\\n\\n/// @title PluginUUPSUpgradeable\\n/// @notice An abstract, upgradeable contract to inherit from when creating a plugin being deployed via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\nabstract contract PluginUUPSUpgradeable is\\n    IPlugin,\\n    ERC165Upgradeable,\\n    UUPSUpgradeable,\\n    DaoAuthorizableUpgradeable\\n{\\n    // NOTE: When adding new state variables to the contract, the size of `_gap` has to be adapted below as well.\\n\\n    /// @notice Disables the initializers on the implementation contract to prevent it from being left uninitialized.\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @inheritdoc IPlugin\\n    function pluginType() public pure override returns (PluginType) {\\n        return PluginType.UUPS;\\n    }\\n\\n    /// @notice The ID of the permission required to call the `_authorizeUpgrade` function.\\n    bytes32 public constant UPGRADE_PLUGIN_PERMISSION_ID = keccak256(\\\"UPGRADE_PLUGIN_PERMISSION\\\");\\n\\n    /// @notice Initializes the plugin by storing the associated DAO.\\n    /// @param _dao The DAO contract.\\n    function __PluginUUPSUpgradeable_init(IDAO _dao) internal virtual onlyInitializing {\\n        __DaoAuthorizableUpgradeable_init(_dao);\\n    }\\n\\n    /// @notice Checks if an interface is supported by this or its parent contract.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IPlugin).interfaceId ||\\n            _interfaceId == type(IERC1822ProxiableUpgradeable).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /// @notice Returns the address of the implementation contract in the [proxy storage slot](https://eips.ethereum.org/EIPS/eip-1967) slot the [UUPS proxy](https://eips.ethereum.org/EIPS/eip-1822) is pointing to.\\n    /// @return The address of the implementation contract.\\n    function implementation() public view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeabilty mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    /// @dev The caller must have the `UPGRADE_PLUGIN_PERMISSION_ID` permission.\\n    function _authorizeUpgrade(\\n        address\\n    ) internal virtual override auth(UPGRADE_PLUGIN_PERMISSION_ID) {}\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x3dedeb1e705b69fe7bde294a8ec8083f74e9ae0604e72a3238f0cf12d06f1b1b\",\"license\":\"MIT\"},\"contracts/core/plugin/dao-authorizable/DaoAuthorizableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport {IDAO} from \\\"../../dao/IDAO.sol\\\";\\nimport {_auth} from \\\"../../utils/auth.sol\\\";\\n\\n/// @title DaoAuthorizableUpgradeable\\n/// @notice An abstract contract providing a meta-transaction compatible modifier for upgradeable or cloneable contracts to authorize function calls through an associated DAO.\\n/// @dev Make sure to call `__DaoAuthorizableUpgradeable_init` during initialization of the inheriting contract.\\nabstract contract DaoAuthorizableUpgradeable is ContextUpgradeable {\\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\\n    IDAO private dao_;\\n\\n    /// @notice Initializes the contract by setting the associated DAO.\\n    /// @param _dao The associated DAO address.\\n    function __DaoAuthorizableUpgradeable_init(IDAO _dao) internal onlyInitializing {\\n        dao_ = _dao;\\n    }\\n\\n    /// @notice Returns the DAO contract.\\n    /// @return The DAO contract.\\n    function dao() public view returns (IDAO) {\\n        return dao_;\\n    }\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(dao_, address(this), _msgSender(), _permissionId, _msgData());\\n        _;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xfc415402e3033a844f8ea360accfd96b9e4f3d7b7800bb6df2f165ce2a7a44ff\",\"license\":\"MIT\"},\"contracts/core/utils/BitMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @param bitmap The `uint256` representation of bits.\\n/// @param index The index number to check whether 1 or 0 is set.\\n/// @return Returns `true` whether the bit is set at `index` on `bitmap`.\\nfunction hasBit(uint256 bitmap, uint8 index) pure returns (bool) {\\n    uint256 bitValue = bitmap & (1 << index);\\n    return bitValue > 0;\\n}\\n\\n/// @param bitmap The `uint256` representation of bits.\\n/// @param index The index number to set the bit.\\n/// @return Returns a new number on which the bit is set at `index`.\\nfunction flipBit(uint256 bitmap, uint8 index) pure returns (uint256) {\\n    return bitmap ^ (1 << index);\\n}\",\"keccak256\":\"0x686a09942031c0c970e56bee6241f10022d8ac5a544ba5faecf56a8befa92788\",\"license\":\"MIT\"},\"contracts/core/utils/CallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title CallbackHandler\\n/// @notice This contract handles callbacks by registering a magic number together with the callback function's selector. It provides the `_handleCallback` function that inherting have to call inside their `fallback()` function  (`_handleCallback(msg.callbackSelector, msg.data)`).  This allows to adaptively register ERC standards (e.g., [ERC-721](https://eips.ethereum.org/EIPS/eip-721), [ERC-1115](https://eips.ethereum.org/EIPS/eip-1155), or future versions of [ERC-165](https://eips.ethereum.org/EIPS/eip-165)) and returning the required magic numbers for the associated callback functions for the inheriting contract so that it doesn't need to be upgraded.\\n/// @dev This callback handling functionality is intented to be used by executor contracts (i.e., `DAO.sol`).\\nabstract contract CallbackHandler {\\n    /// @notice A mapping between callback function selectors and magic return numbers.\\n    mapping(bytes4 => bytes4) internal callbackMagicNumbers;\\n\\n    /// @notice The magic number refering to unregistered callbacks.\\n    bytes4 internal constant UNREGISTERED_CALLBACK = bytes4(0);\\n\\n    /// @notice Thrown if the callback function is not registered.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    error UnknownCallback(bytes4 callbackSelector, bytes4 magicNumber);\\n\\n    /// @notice Emitted when `_handleCallback` is called.\\n    /// @param sender Who called the callback.\\n    /// @param sig The function signature.\\n    /// @param data The calldata for the function signature.\\n    event CallbackReceived(address sender, bytes4 indexed sig, bytes data);\\n\\n    /// @notice Handles callbacks to adaptively support ERC standards.\\n    /// @dev This function is supposed to be called via `_handleCallback(msg.sig, msg.data)` in the `fallback()` function of the inheriting contract.\\n    /// @param _callbackSelector The function selector of the callback function.\\n    /// @return The magic number registered for the function selector triggering the fallback.\\n    function _handleCallback(\\n        bytes4 _callbackSelector,\\n        bytes memory _data\\n    ) internal virtual returns (bytes4) {\\n        bytes4 magicNumber = callbackMagicNumbers[_callbackSelector];\\n        if (magicNumber == UNREGISTERED_CALLBACK) {\\n            revert UnknownCallback({callbackSelector: _callbackSelector, magicNumber: magicNumber});\\n        }\\n\\n        emit CallbackReceived({sender: msg.sender, sig: _callbackSelector, data: _data});\\n\\n        return magicNumber;\\n    }\\n\\n    /// @notice Registers a magic number for a callback function selector.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the callback function selector.\\n    function _registerCallback(bytes4 _callbackSelector, bytes4 _magicNumber) internal virtual {\\n        callbackMagicNumbers[_callbackSelector] = _magicNumber;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xd41f30df075cf18e8ce3c8a8f97b5645c2031b70be134bc170faf93cb50dda8b\",\"license\":\"MIT\"},\"contracts/core/utils/auth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\n\\n/// @notice Thrown if a call is unauthorized in the associated DAO.\\n/// @param dao The associated DAO.\\n/// @param where The context in which the authorization reverted.\\n/// @param who The address (EOA or contract) missing the permission.\\n/// @param permissionId The permission identifier.\\nerror DaoUnauthorized(address dao, address where, address who, bytes32 permissionId);\\n\\n/// @notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n/// @param _where The address of the target contract for which `who` recieves permission.\\n/// @param _who The address (EOA or contract) owning the permission.\\n/// @param _permissionId The permission identifier.\\n/// @param _data The optional data passed to the `PermissionCondition` registered.\\nfunction _auth(\\n    IDAO _dao,\\n    address _where,\\n    address _who,\\n    bytes32 _permissionId,\\n    bytes calldata _data\\n) view {\\n    if (!_dao.hasPermission(_where, _who, _permissionId, _data))\\n        revert DaoUnauthorized({\\n            dao: address(_dao),\\n            where: _where,\\n            who: _who,\\n            permissionId: _permissionId\\n        });\\n}\",\"keccak256\":\"0x77c5843f04142cf8143abacadb96776550e9110aaa9bb5bbf2bde61e14f8c0d5\",\"license\":\"MIT\"},\"contracts/factory/plugin/repo/IPluginRepo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title IPluginRepo\\n/// @notice The interface required for a plugin repository.\\ninterface IPluginRepo {\\n    /// @notice Update the metadata for release with content `@fromHex(_releaseMetadata)`.\\n    /// @param _release The release number.\\n    /// @param _releaseMetadata The release metadata URI.\\n    function updateReleaseMetadata(uint8 _release, bytes calldata _releaseMetadata) external;\\n\\n    /// @notice Creates a new plugin version as the latest build for an existing release number or the first build for a new release number for the provided `PluginSetup` contract address and metadata.\\n    /// @param _release The release number.\\n    /// @param _pluginSetupAddress The address of the plugin setup contract.\\n    /// @param _buildMetadata The build metadata URI.\\n    /// @param _releaseMetadata The release metadata URI.\\n    function createVersion(\\n        uint8 _release,\\n        address _pluginSetupAddress,\\n        bytes calldata _buildMetadata,\\n        bytes calldata _releaseMetadata\\n    ) external;\\n}\",\"keccak256\":\"0x04c7a490dd9f81b9de0b1c314a3ab8f18996cf32a63faf29f147a0efd24437f1\",\"license\":\"MIT\"},\"contracts/factory/plugin/repo/PluginRepo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {ERC165CheckerUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\\\";\\n\\nimport {PermissionManager} from \\\"../../../core/permission/PermissionManager.sol\\\";\\nimport {PluginSetup} from \\\"../setup/PluginSetup.sol\\\";\\nimport {IPluginSetup} from \\\"../setup/PluginSetup.sol\\\";\\nimport {IPluginRepo} from \\\"./IPluginRepo.sol\\\";\\n\\n/// @title PluginRepo\\n/// @notice The plugin repository contract required for managing and publishing different plugin versions.\\ncontract PluginRepo is\\n    Initializable,\\n    ERC165Upgradeable,\\n    IPluginRepo,\\n    UUPSUpgradeable,\\n    PermissionManager\\n{\\n    using AddressUpgradeable for address;\\n    using ERC165CheckerUpgradeable for address;\\n\\n    /// @notice The struct describing the tag of a version obtained by a release and build number as `RELEASE.BUILD`.\\n    /// @param release The release number.\\n    /// @param build The build number\\n    /// @dev Releases can include a storage layout or the addition of new functions. Builds include logic changes or updates of the UI.\\n    struct Tag {\\n        uint8 release;\\n        uint16 build;\\n    }\\n\\n    /// @notice The struct describing a plugin version (release and build).\\n    /// @param tag The version tag.\\n    /// @param pluginSetup The setup contract associated with this version.\\n    /// @param buildMetadata The build metadata URI.\\n    struct Version {\\n        Tag tag;\\n        address pluginSetup;\\n        bytes buildMetadata;\\n    }\\n\\n    /// @notice The ID of the permission required to call the `createVersion` function.\\n    bytes32 public constant MAINTAINER_PERMISSION_ID = keccak256(\\\"MAINTAINER_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `createVersion` function.\\n    bytes32 public constant UPGRADE_REPO_PERMISSION_ID = keccak256(\\\"UPGRADE_REPO_PERMISSION\\\");\\n\\n    /// @notice The mapping between release and build numbers.\\n    mapping(uint8 => uint16) internal buildsPerRelease;\\n\\n    /// @notice The mapping between the version hash and the corresponding version information.\\n    mapping(bytes32 => Version) internal versions;\\n\\n    /// @notice The mapping between the plugin setup address and its corresponding version hash.\\n    mapping(address => bytes32) internal latestTagHashForPluginSetup;\\n\\n    /// @notice The ID of the latest release.\\n    /// @dev The maximum release number is 255.\\n    uint8 public latestRelease;\\n\\n    /// @notice Thrown if a version does not exist.\\n    /// @param versionHash The tag hash.\\n    error VersionHashDoesNotExist(bytes32 versionHash);\\n\\n    /// @notice Thrown if a plugin setup contract does not inherit from `PluginSetup`.\\n    error InvalidPluginSetupInterface();\\n\\n    /// @notice Thrown if a release number is zero.\\n    error ReleaseZeroNotAllowed();\\n\\n    /// @notice Thrown if a release number is incremented by more than one.\\n    /// @param latestRelease The latest release number.\\n    /// @param newRelease The new release number.\\n    error InvalidReleaseIncrement(uint8 latestRelease, uint8 newRelease);\\n\\n    /// @notice Thrown if the same plugin setup contract exists already in a previous releases.\\n    /// @param release The release number of the already existing plugin setup.\\n    /// @param build The build number of the already existing plugin setup.\\n    /// @param pluginSetup The plugin setup contract address.\\n    error PluginSetupAlreadyInPreviousRelease(uint8 release, uint16 build, address pluginSetup);\\n\\n    /// @notice Thrown if the metadata URI is empty.\\n    error EmptyReleaseMetadata();\\n\\n    /// @notice Thrown if release does not exist.\\n    error ReleaseDoesNotExist();\\n\\n    /// @notice Thrown if the same plugin setup exists in previous releases.\\n    /// @param release The release number.\\n    /// @param build The build number.\\n    /// @param pluginSetup The address of the plugin setup contract.\\n    /// @param buildMetadata The build metadata URI.\\n    event VersionCreated(\\n        uint8 release,\\n        uint16 build,\\n        address indexed pluginSetup,\\n        bytes buildMetadata\\n    );\\n\\n    /// @notice Thrown when a release's metadata was updated.\\n    /// @param release The release number.\\n    /// @param releaseMetadata The release metadata URI.\\n    event ReleaseMetadataUpdated(uint8 release, bytes releaseMetadata);\\n\\n    /// @dev Used to disallow initializing the implementation contract by an attacker for extra safety.\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract by\\n    /// - initializing the permission manager\\n    /// - granting the `MAINTAINER_PERMISSION_ID` permission to the initial owner.\\n    /// @dev This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).\\n    function initialize(address initialOwner) external initializer {\\n        __PermissionManager_init(initialOwner);\\n\\n        _grant(address(this), initialOwner, MAINTAINER_PERMISSION_ID);\\n        _grant(address(this), initialOwner, UPGRADE_REPO_PERMISSION_ID);\\n    }\\n\\n    /// @inheritdoc IPluginRepo\\n    function createVersion(\\n        uint8 _release,\\n        address _pluginSetup,\\n        bytes calldata _buildMetadata,\\n        bytes calldata _releaseMetadata\\n    ) external auth(MAINTAINER_PERMISSION_ID) {\\n        if (!_pluginSetup.supportsInterface(type(IPluginSetup).interfaceId)) {\\n            revert InvalidPluginSetupInterface();\\n        }\\n\\n        if (_release == 0) {\\n            revert ReleaseZeroNotAllowed();\\n        }\\n\\n        // Check that the release number is not incremented by more than one\\n        if (_release - latestRelease > 1) {\\n            revert InvalidReleaseIncrement({latestRelease: latestRelease, newRelease: _release});\\n        }\\n\\n        if (_release > latestRelease) {\\n            latestRelease = _release;\\n\\n            if (_releaseMetadata.length == 0) {\\n                revert EmptyReleaseMetadata();\\n            }\\n        }\\n\\n        // Make sure the same plugin setup wasn't used in previous releases.\\n        Version storage version = versions[latestTagHashForPluginSetup[_pluginSetup]];\\n        if (version.tag.release != 0 && version.tag.release != _release) {\\n            revert PluginSetupAlreadyInPreviousRelease(\\n                version.tag.release,\\n                version.tag.build,\\n                _pluginSetup\\n            );\\n        }\\n\\n        uint16 build = ++buildsPerRelease[_release];\\n\\n        Tag memory tag = Tag(_release, build);\\n        bytes32 _tagHash = tagHash(tag);\\n\\n        versions[_tagHash] = Version(tag, _pluginSetup, _buildMetadata);\\n\\n        latestTagHashForPluginSetup[_pluginSetup] = _tagHash;\\n\\n        emit VersionCreated({\\n            release: _release,\\n            build: build,\\n            pluginSetup: _pluginSetup,\\n            buildMetadata: _buildMetadata\\n        });\\n\\n        if (_releaseMetadata.length > 0) {\\n            emit ReleaseMetadataUpdated(_release, _releaseMetadata);\\n        }\\n    }\\n\\n    /// @inheritdoc IPluginRepo\\n    function updateReleaseMetadata(\\n        uint8 _release,\\n        bytes calldata _releaseMetadata\\n    ) external auth(MAINTAINER_PERMISSION_ID) {\\n        if (_release == 0) {\\n            revert ReleaseZeroNotAllowed();\\n        }\\n\\n        if (_release > latestRelease) {\\n            revert ReleaseDoesNotExist();\\n        }\\n\\n        if (_releaseMetadata.length == 0) {\\n            revert EmptyReleaseMetadata();\\n        }\\n\\n        emit ReleaseMetadataUpdated(_release, _releaseMetadata);\\n    }\\n\\n    /// @notice Returns the latest version for a given release number.\\n    /// @param _release The release number.\\n    /// @return The latest version of this release.\\n    function getLatestVersion(uint8 _release) public view returns (Version memory) {\\n        uint16 latestBuild = uint16(buildsPerRelease[_release]);\\n        return getVersion(tagHash(Tag(_release, latestBuild)));\\n    }\\n\\n    /// @notice Returns the latest version for a given plugin setup.\\n    /// @param _pluginSetup The plugin setup address\\n    /// @return The latest version associated with the plugin Setup.\\n    function getLatestVersion(address _pluginSetup) public view returns (Version memory) {\\n        return getVersion(latestTagHashForPluginSetup[_pluginSetup]);\\n    }\\n\\n    /// @notice Returns the version associated with a tag.\\n    /// @param _tag The version tag.\\n    /// @return The version associated with the tag.\\n    function getVersion(Tag calldata _tag) public view returns (Version memory) {\\n        return getVersion(tagHash(_tag));\\n    }\\n\\n    /// @notice Returns the version for a tag hash.\\n    /// @param _tagHash The tag hash.\\n    /// @return The version associated with a tag hash.\\n    function getVersion(bytes32 _tagHash) public view returns (Version memory) {\\n        Version storage version = versions[_tagHash];\\n\\n        if (version.tag.release == 0) {\\n            revert VersionHashDoesNotExist(_tagHash);\\n        }\\n\\n        return version;\\n    }\\n\\n    /// @notice Gets the total number of builds for a given release number.\\n    /// @param _release The release number.\\n    /// @return The number of builds of this release.\\n    function buildCount(uint8 _release) public view returns (uint256) {\\n        return buildsPerRelease[_release];\\n    }\\n\\n    /// @notice The hash of the version tag obtained from the packed, bytes-encoded release and build number.\\n    /// @param _tag The version tag.\\n    /// @return The version tag hash.\\n    function tagHash(Tag memory _tag) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_tag.release, _tag.build));\\n    }\\n\\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeabilty mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    /// @dev The caller must have the `UPGRADE_REPO_PERMISSION_ID` permission.\\n    function _authorizeUpgrade(\\n        address\\n    ) internal virtual override auth(UPGRADE_REPO_PERMISSION_ID) {}\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IPluginRepo).interfaceId ||\\n            _interfaceId == type(UUPSUpgradeable).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n}\",\"keccak256\":\"0x2ffffadab927b4bc561bd5039d552564e404ab71807647b4148eaa2e0452994d\",\"license\":\"MIT\"},\"contracts/factory/plugin/repo/PluginRepoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {IDAO} from \\\"../../../core/dao/IDAO.sol\\\";\\nimport {InterfaceBasedRegistry} from \\\"../../utils/InterfaceBasedRegistry.sol\\\";\\nimport {IPluginRepo} from \\\"./IPluginRepo.sol\\\";\\n\\n/// @title PluginRepoRegistry\\n/// @notice This contract maintains an address-based registery of plugin repositories.\\ncontract PluginRepoRegistry is InterfaceBasedRegistry {\\n    /// @notice The ID of the permission required to call the `register` function.\\n    bytes32 public constant REGISTER_PLUGIN_REPO_PERMISSION_ID =\\n        keccak256(\\\"REGISTER_PLUGIN_REPO_PERMISSION\\\");\\n\\n    /// @notice Emitted if a new plugin repository is registered.\\n    /// @param pluginRepo The address of the plugin repository.\\n    event PluginRepoRegistered(address pluginRepo);\\n\\n    /// @dev Used to disallow initializing the implementation contract by an attacker for extra safety.\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract by setting calling the `InterfaceBasedRegistry` base class initialize method.\\n    /// @param _dao The address of the managing DAO.\\n    function initialize(IDAO _dao) external initializer {\\n        bytes4 pluginRepoInterfaceId = type(IPluginRepo).interfaceId;\\n        __InterfaceBasedRegistry_init(_dao, pluginRepoInterfaceId);\\n    }\\n\\n    /// @notice Registers a plugin repository with its address.\\n    /// @param pluginRepo The address of the PluginRepo contract.\\n    function registerPluginRepo(\\n        address pluginRepo\\n    ) external auth(REGISTER_PLUGIN_REPO_PERMISSION_ID) {\\n\\n        _register(pluginRepo);\\n\\n        emit PluginRepoRegistered(pluginRepo);\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xc2f81a435a11d93fae7795eabb897927bbfaee1fc991dc2306ba33f1fe1cec64\",\"license\":\"MIT\"},\"contracts/factory/plugin/setup/IPluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {PermissionLib} from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport {IDAO} from \\\"../../../core/dao/IDAO.sol\\\";\\n\\n/// @title IPluginSetup\\n/// @notice The interface required for a plugin setup contract to be consumed by the `PluginSetupProcessor` for plugin installations, updates, and uninstallations.\\ninterface IPluginSetup {\\n    /// @notice The data associated with a prepared setup.\\n    /// @param helpers The address array of helpers (contracts or EOAs) associated with this plugin version after the installation or update.\\n    /// @param permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the installing or updating DAO.\\n    struct PreparedSetupData {\\n        address[] helpers;\\n        PermissionLib.MultiTargetPermission[] permissions;\\n    }\\n\\n    /// @notice The payload for plugin updates and uninstallations containing the existing contracts as well as optional data to be consumed by the plugin setup.\\n    /// @param plugin The address of the `Plugin`.\\n    /// @param currentHelpers The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.\\n    /// @param data The bytes-encoded data containing the input parameters for the preparation of update/uninstall as specified in the corresponding ABI on the version's metadata.\\n    struct SetupPayload {\\n        address plugin;\\n        address[] currentHelpers;\\n        bytes data;\\n    }\\n\\n    /// @notice Prepares the installation of a plugin.\\n    /// @param _dao The address of the installing DAO.\\n    /// @param _data The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file.\\n    /// @return plugin The address of the `Plugin` contract being prepared for installation.\\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    function prepareInstallation(\\n        address _dao,\\n        bytes calldata _data\\n    ) external returns (address plugin, PreparedSetupData memory preparedSetupData);\\n\\n    /// @notice Prepares the update of a plugin.\\n    /// @param _dao The address of the updating DAO.\\n    /// @param _currentBuild The build number of the plugin to update from.\\n    /// @param _payload The relevant data necessary for the `prepareUpdate`. see above.\\n    /// @return initData The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    function prepareUpdate(\\n        address _dao,\\n        uint16 _currentBuild,\\n        SetupPayload calldata _payload\\n    ) external returns (bytes memory initData, PreparedSetupData memory preparedSetupData);\\n\\n    /// @notice Prepares the uninstallation of a plugin.\\n    /// @param _dao The address of the uninstalling DAO.\\n    /// @param _payload The relevant data necessary for the `prepareUninstallation`. see above.\\n    /// @return permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\\n    function prepareUninstallation(\\n        address _dao,\\n        SetupPayload calldata _payload\\n    ) external returns (PermissionLib.MultiTargetPermission[] memory permissions);\\n\\n    /// @notice Returns the plugin implementation address.\\n    /// @return The address of the plugin implementation contract.\\n    /// @dev The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    function implementation() external view returns (address);\\n}\",\"keccak256\":\"0x6e09da8d0299eae8c5191a2fd8baab443937f0ef900623cacc92872e144abfee\",\"license\":\"MIT\"},\"contracts/factory/plugin/setup/PluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {PermissionLib} from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport {createERC1967Proxy as createERC1967} from \\\"../../../utils/Proxy.sol\\\";\\nimport {IPluginSetup} from \\\"./IPluginSetup.sol\\\";\\n\\n/// @title PluginSetup\\n/// @notice An abstract contract that developers have to inherit from to write the setup of a plugin.\\nabstract contract PluginSetup is ERC165, IPluginSetup {\\n    /// @inheritdoc IPluginSetup\\n    function prepareUpdate(\\n        address _dao,\\n        uint16 _currentBuild,\\n        SetupPayload calldata _payload\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory initData, PreparedSetupData memory preparedSetupData)\\n    {}\\n\\n    /// @notice A convenience function to create an [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract pointing to an implementation and being associated to a DAO.\\n    /// @param _implementation The address of the implementation contract to which the proxy is pointing to.\\n    /// @param _data The data to initialize the storage of the proxy contract.\\n    /// @return The address of the created proxy contract.\\n    function createERC1967Proxy(\\n        address _implementation,\\n        bytes memory _data\\n    ) internal returns (address) {\\n        return createERC1967(_implementation, _data);\\n    }\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IPluginSetup).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\",\"keccak256\":\"0x30ea83e469671d61e56c07b0726ce749ecc0cce25ec2d41790a1d96434045d6f\",\"license\":\"MIT\"},\"contracts/factory/plugin/setup/PluginSetupProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport {DAO, IDAO} from \\\"../../../core/dao/DAO.sol\\\";\\nimport {PermissionLib} from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport {PluginUUPSUpgradeable} from \\\"../../../core/plugin/PluginUUPSUpgradeable.sol\\\";\\nimport {IPlugin} from \\\"../../../core/plugin/IPlugin.sol\\\";\\n\\nimport {PluginRepoRegistry} from \\\"../repo/PluginRepoRegistry.sol\\\";\\nimport {PluginRepo} from \\\"../repo/PluginRepo.sol\\\";\\n\\nimport {IPluginSetup} from \\\"./IPluginSetup.sol\\\";\\nimport {PluginSetup} from \\\"./PluginSetup.sol\\\";\\nimport {PluginSetupRef, hashHelpers, hashPermissions, _getPreparedSetupId, _getAppliedSetupId, _getPluginInstallationId, PreparationType} from \\\"./PluginSetupProcessorHelpers.sol\\\";\\n\\n/// @title PluginSetupProcessor\\n/// @notice This contract processes the preparation and application of plugin setups (installation, update, uninstallation) on behalf of a requesting DAO.\\n/// @dev This contract is temporarily granted the `ROOT_PERMISSION_ID` permission on the applying DAO and therefore is highly security critical.\\ncontract PluginSetupProcessor {\\n    using ERC165Checker for address;\\n\\n    /// @notice The ID of the permission required to call the `applyInstallation` function.\\n    bytes32 public constant APPLY_INSTALLATION_PERMISSION_ID =\\n        keccak256(\\\"APPLY_INSTALLATION_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `applyUpdate` function.\\n    bytes32 public constant APPLY_UPDATE_PERMISSION_ID = keccak256(\\\"APPLY_UPDATE_PERMISSION\\\");\\n\\n    /// @notice The ID of the permission required to call the `applyUninstallation` function.\\n    bytes32 public constant APPLY_UNINSTALLATION_PERMISSION_ID =\\n        keccak256(\\\"APPLY_UNINSTALLATION_PERMISSION\\\");\\n\\n    /// @notice The hash obtained from the bytes-encoded empty array to be used for UI updates being required to submit an empty permission array.\\n    /// @dev The hash is computed via `keccak256(abi.encode([]))`.\\n    bytes32 private constant EMPTY_ARRAY_HASH =\\n        0x569e75fc77c1a856f6daaf9e69d8a9566ca34aa47f9133711ce065a571af0cfd;\\n\\n    /// @notice The hash obtained from the bytes-encoded zero value.\\n    /// @dev The hash is computed via `keccak256(abi.encode(0))`.\\n    bytes32 private constant ZERO_BYTES_HASH =\\n        0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\\n\\n    /// @notice A struct containing information related to plugin setups that have been applied.\\n    /// @param blockNumber The block number at which the `applyInstallation`, `applyUpdate` or `applyUninstallation` was executed.\\n    /// @param currentAppliedSetupId The current setup id that plugin holds. Needed to confirm that `prepareUpdate` or `prepareUninstallation` happens for the plugin's current/valid dependencies.\\n    /// @param preparedSetupIdToBlockNumber The mapping between prepared setup IDs and block numbers at which `prepareInstallation`, `prepareUpdate` or `prepareUninstallation` was executed.\\n    struct PluginState {\\n        uint256 blockNumber;\\n        bytes32 currentAppliedSetupId;\\n        mapping(bytes32 => uint256) preparedSetupIdToBlockNumber;\\n    }\\n\\n    /// @notice A mapping between the plugin installation ID (obtained from the DAO and plugin address) and the plugin state information.\\n    /// @dev This variable is public on purpose to allow future versions to access and migrate the storage.\\n    mapping(bytes32 => PluginState) public states;\\n\\n    /// @notice The struct containing the parameters for the `prepareInstallation` function.\\n    /// @param pluginSetupRef The reference to the plugin setup to be used for the installation.\\n    /// @param data The bytes-encoded data containing the input parameters for the installation preparation as specified in the corresponding ABI on the version's metadata.\\n    struct PrepareInstallationParams {\\n        PluginSetupRef pluginSetupRef;\\n        bytes data;\\n    }\\n\\n    /// @notice The struct containing the parameters for the `applyInstallation` function.\\n    /// @param pluginSetupRef The reference to the plugin setup used for the installation.\\n    /// @param plugin The address of the plugin contract to be installed.\\n    /// @param permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the DAO.\\n    /// @param helpersHash The hash of helpers that were deployed in `prepareInstallation`. This helps to derive the setup ID.\\n    struct ApplyInstallationParams {\\n        PluginSetupRef pluginSetupRef;\\n        address plugin;\\n        PermissionLib.MultiTargetPermission[] permissions;\\n        bytes32 helpersHash;\\n    }\\n\\n    /// @notice The struct containing the parameters for the `prepareUpdate` function.\\n    /// @param currentVersionTag The tag of the current plugin version to update from.\\n    /// @param newVersionTag The tag of the new plugin version to update to.\\n    /// @param pluginSetupRepo The plugin setup repository address on which the plugin exists.\\n    /// @param setupPayload The payload containing the plugin and helper contract addresses deployed in a preparation step as well as optional data to be consumed by the plugin setup.\\n    ///  This includes the bytes-encoded data containing the input parameters for the update preparation as specified in the corresponding ABI on the version's metadata.\\n    struct PrepareUpdateParams {\\n        PluginRepo.Tag currentVersionTag;\\n        PluginRepo.Tag newVersionTag;\\n        PluginRepo pluginSetupRepo;\\n        IPluginSetup.SetupPayload setupPayload;\\n    }\\n\\n    /// @notice The struct containing the parameters for the `applyUpdate` function.\\n    /// @param plugin The address of the plugin contract to be updated.\\n    /// @param pluginSetupRef The reference to the plugin setup used for the update.\\n    /// @param initData The encoded data (function selector and arguments) to be provided to `upgradeToAndCall`.\\n    /// @param permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the DAO.\\n    /// @param helpersHash The hash of helpers that were deployed in `prepareUpdate`. This helps to derive the setup ID.\\n    struct ApplyUpdateParams {\\n        address plugin;\\n        PluginSetupRef pluginSetupRef;\\n        bytes initData;\\n        PermissionLib.MultiTargetPermission[] permissions;\\n        bytes32 helpersHash;\\n    }\\n\\n    /// @notice The struct containing the parameters for the `prepareUninstallation` function.\\n    /// @param pluginSetupRef The reference to the plugin setup to be used for the uninstallation.\\n    /// @param setupPayload The payload containing the plugin and helper contract addresses deployed in a preparation step as well as optional data to be consumed by the plugin setup.\\n    ///  This includes the bytes-encoded data containing the input parameters for the uninstallation preparation as specified in the corresponding ABI on the version's metadata.\\n    struct PrepareUninstallationParams {\\n        PluginSetupRef pluginSetupRef;\\n        IPluginSetup.SetupPayload setupPayload;\\n    }\\n\\n    /// @notice The struct containing the parameters for the `applyInstallation` function.\\n    /// @param plugin The address of the plugin contract to be uninstalled.\\n    /// @param pluginSetupRef The reference to the plugin setup used for the uninstallation.\\n    /// @param permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcess.\\n    struct ApplyUninstallationParams {\\n        address plugin;\\n        PluginSetupRef pluginSetupRef;\\n        PermissionLib.MultiTargetPermission[] permissions;\\n    }\\n\\n    /// @notice The plugin repo registry listing the `PluginRepo` contracts versioning the `PluginSetup` contracts.\\n    PluginRepoRegistry public repoRegistry;\\n\\n    /// @notice Thrown if a setup is unauthorized and cannot be applied because of a missing permission of the associated DAO.\\n    /// @param dao The address of the DAO to which the plugin belongs.\\n    /// @param caller The address (EOA or contract) that requested the application of a setup on the associated DAO.\\n    /// @param permissionId The permission identifier.\\n    /// @dev This is thrown if the `APPLY_INSTALLATION_PERMISSION_ID`, `APPLY_UPDATE_PERMISSION_ID`, or APPLY_UNINSTALLATION_PERMISSION_ID is missing.\\n    error SetupApplicationUnauthorized(address dao, address caller, bytes32 permissionId);\\n\\n    /// @notice Thrown if a plugin is not upgradeable.\\n    /// @param plugin The address of the plugin contract.\\n    error PluginNonupgradeable(address plugin);\\n\\n    /// @notice Thrown if the upgrade of an `UUPSUpgradeable` proxy contract (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)) failed.\\n    /// @param proxy The address of the proxy.\\n    /// @param implementation The address of the implementation contract.\\n    /// @param initData The initialization data to be passed to the upgradeable plugin contract via `upgradeToAndCall`.\\n    error PluginProxyUpgradeFailed(address proxy, address implementation, bytes initData);\\n\\n    /// @notice Thrown if a contract does not support the `IPlugin` interface.\\n    /// @param plugin The address of the contract.\\n    error IPluginNotSupported(address plugin);\\n\\n    /// @notice Thrown if a plugin repository does not exist on the plugin repo registry.\\n    error PluginRepoNonexistent();\\n\\n    /// @notice Thrown if a plugin setup was already prepared inidcated by the prepared setup ID.\\n    /// @param preparedSetupId The prepared setup ID.\\n    error SetupAlreadyPrepared(bytes32 preparedSetupId);\\n\\n    /// @notice Thrown if a prepared setup ID is not eligible to be applied. This can happen if another setup has been already applied or if the setup wasn't prepared in the first place.\\n    /// @param preparedSetupId The prepared setup ID.\\n    error SetupNotApplicable(bytes32 preparedSetupId);\\n\\n    /// @notice Thrown if the update version is invalid.\\n    /// @param currentVersionTag The tag of the current version to update from.\\n    /// @param newVersionTag The tag of the new version to update to.\\n    error InvalidUpdateVersion(PluginRepo.Tag currentVersionTag, PluginRepo.Tag newVersionTag);\\n\\n    /// @notice Thrown if plugin is already installed and one tries to prepare or apply install on it.\\n    error PluginAlreadyInstalled();\\n\\n    /// @notice Thrown if the applied setup ID resulting from the supplied setup payload does not match with the current applied setup ID.\\n    /// @param currentAppliedSetupId The current applied setup ID with which the data in the supplied payload must match.\\n    /// @param appliedSetupId The applied setup ID obtained from the data in the supplied setup payload.\\n    error InvalidAppliedSetupId(bytes32 currentAppliedSetupId, bytes32 appliedSetupId);\\n\\n    /// @notice Emitted with a prepared plugin installation to store data relevant for the application step.\\n    /// @param sender The sender that prepared the plugin installation.\\n    /// @param dao The address of the DAO to which the plugin belongs.\\n    /// @param preparedSetupId The prepared setup ID obtained from the supplied data.\\n    /// @param pluginSetupRepo The repository storing the `PluginSetup` contracts of all versions of a plugin.\\n    /// @param versionTag The version tag of the plugin setup of the prepared installation.\\n    /// @param data The bytes-encoded data containing the input parameters for the preparation as specified in the corresponding ABI on the version's metadata.\\n    /// @param plugin The address of the plugin contract.\\n    /// @param preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    event InstallationPrepared(\\n        address indexed sender,\\n        address indexed dao,\\n        bytes32 preparedSetupId,\\n        PluginRepo indexed pluginSetupRepo,\\n        PluginRepo.Tag versionTag,\\n        bytes data,\\n        address plugin,\\n        IPluginSetup.PreparedSetupData preparedSetupData\\n    );\\n\\n    /// @notice Emitted after a plugin installation was applied.\\n    /// @param dao The address of the DAO to which the plugin belongs.\\n    /// @param plugin The address of the plugin contract.\\n    /// @param preparedSetupId The prepared setup ID.\\n    /// @param appliedSetupId The applied setup ID.\\n    event InstallationApplied(\\n        address indexed dao,\\n        address indexed plugin,\\n        bytes32 preparedSetupId,\\n        bytes32 appliedSetupId\\n    );\\n\\n    /// @notice Emitted with a prepared plugin update to store data relevant for the application step.\\n    /// @param sender The sender that prepared the plugin update.\\n    /// @param dao The address of the DAO to which the plugin belongs.\\n    /// @param preparedSetupId The prepared setup ID.\\n    /// @param pluginSetupRepo The repository storing the `PluginSetup` contracts of all versions of a plugin.\\n    /// @param versionTag The version tag of the plugin setup of the prepared update.\\n    /// @param setupPayload The payload containing the plugin and helper contract addresses deployed in a preparation step as well as optional data to be consumed by the plugin setup.\\n    /// @param preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    /// @param initData The initialization data to be passed to the upgradeable plugin contract.\\n    event UpdatePrepared(\\n        address indexed sender,\\n        address indexed dao,\\n        bytes32 preparedSetupId,\\n        PluginRepo indexed pluginSetupRepo,\\n        PluginRepo.Tag versionTag,\\n        IPluginSetup.SetupPayload setupPayload,\\n        IPluginSetup.PreparedSetupData preparedSetupData,\\n        bytes initData\\n    );\\n\\n    /// @notice Emitted after a plugin update was applied.\\n    /// @param dao The address of the DAO to which the plugin belongs.\\n    /// @param plugin The address of the plugin contract.\\n    /// @param preparedSetupId The prepared setup ID.\\n    /// @param appliedSetupId The applied setup ID.\\n    event UpdateApplied(\\n        address indexed dao,\\n        address indexed plugin,\\n        bytes32 preparedSetupId,\\n        bytes32 appliedSetupId\\n    );\\n\\n    /// @notice Emitted with a prepared plugin uninstallation to store data relevant for the application step.\\n    /// @param sender The sender that prepared the plugin uninstallation.\\n    /// @param dao The address of the DAO to which the plugin belongs.\\n    /// @param preparedSetupId The prepared setup ID.\\n    /// @param pluginSetupRepo The repository storing the `PluginSetup` contracts of all versions of a plugin.\\n    /// @param versionTag The version tag of the plugin to used for install preparation.\\n    /// @param setupPayload The payload containing the plugin and helper contract addresses deployed in a preparation step as well as optional data to be consumed by the plugin setup.\\n    /// @param permissions The list of multi-targeted permission operations to be applied to the installing DAO.\\n    event UninstallationPrepared(\\n        address indexed sender,\\n        address indexed dao,\\n        bytes32 preparedSetupId,\\n        PluginRepo indexed pluginSetupRepo,\\n        PluginRepo.Tag versionTag,\\n        IPluginSetup.SetupPayload setupPayload,\\n        PermissionLib.MultiTargetPermission[] permissions\\n    );\\n\\n    /// @notice Emitted after a plugin installation was applied.\\n    /// @param dao The address of the DAO to which the plugin belongs.\\n    /// @param plugin The address of the plugin contract.\\n    /// @param preparedSetupId The prepared setup ID.\\n    event UninstallationApplied(\\n        address indexed dao,\\n        address indexed plugin,\\n        bytes32 preparedSetupId\\n    );\\n\\n    /// @notice A modifier to check if a caller has the permission to apply a prepared setup.\\n    /// @param _dao The address of the DAO.\\n    /// @param _permissionId The permission identifier.\\n    modifier canApply(address _dao, bytes32 _permissionId) {\\n        _canApply(_dao, _permissionId);\\n        _;\\n    }\\n\\n    /// @notice Constructs the plugin setup processor by setting the associated plugin repo registry.\\n    /// @param _repoRegistry The plugin repo registry contract.\\n    constructor(PluginRepoRegistry _repoRegistry) {\\n        repoRegistry = _repoRegistry;\\n    }\\n\\n    /// @notice Prepares the installation of a plugin.\\n    /// @param _dao The address of the installing DAO.\\n    /// @param _params The struct containing the parameters for the `prepareInstallation` function.\\n    /// @return plugin The prepared plugin contract address.\\n    /// @return preparedSetupData The data struct containing the array of helper contracts and permissions that the setup has prepared.\\n    function prepareInstallation(\\n        address _dao,\\n        PrepareInstallationParams calldata _params\\n    ) external returns (address plugin, IPluginSetup.PreparedSetupData memory preparedSetupData) {\\n        PluginRepo pluginSetupRepo = _params.pluginSetupRef.pluginSetupRepo;\\n\\n        // Check that the plugin repository exists on the plugin repo registry.\\n        if (!repoRegistry.entries(address(pluginSetupRepo))) {\\n            revert PluginRepoNonexistent();\\n        }\\n\\n        // reverts if not found\\n        PluginRepo.Version memory version = pluginSetupRepo.getVersion(\\n            _params.pluginSetupRef.versionTag\\n        );\\n\\n        // Prepare the installation\\n        (plugin, preparedSetupData) = PluginSetup(version.pluginSetup).prepareInstallation(\\n            _dao,\\n            _params.data\\n        );\\n\\n        bytes32 pluginInstallationId = _getPluginInstallationId(_dao, plugin);\\n\\n        bytes32 preparedSetupId = _getPreparedSetupId(\\n            _params.pluginSetupRef,\\n            hashPermissions(preparedSetupData.permissions),\\n            hashHelpers(preparedSetupData.helpers),\\n            bytes(\\\"\\\"),\\n            PreparationType.Installation\\n        );\\n\\n        PluginState storage pluginState = states[pluginInstallationId];\\n\\n        // Check if this plugin is already installed.\\n        if (pluginState.currentAppliedSetupId != bytes32(0)) {\\n            revert PluginAlreadyInstalled();\\n        }\\n\\n        // Check if this setup has already been prepared before and is pending.\\n        if (pluginState.blockNumber < pluginState.preparedSetupIdToBlockNumber[preparedSetupId]) {\\n            revert SetupAlreadyPrepared({preparedSetupId: preparedSetupId});\\n        }\\n\\n        pluginState.preparedSetupIdToBlockNumber[preparedSetupId] = block.number;\\n\\n        emit InstallationPrepared({\\n            sender: msg.sender,\\n            dao: _dao,\\n            preparedSetupId: preparedSetupId,\\n            pluginSetupRepo: pluginSetupRepo,\\n            versionTag: _params.pluginSetupRef.versionTag,\\n            data: _params.data,\\n            plugin: plugin,\\n            preparedSetupData: preparedSetupData\\n        });\\n\\n        return (plugin, preparedSetupData);\\n    }\\n\\n    /// @notice Applies the permissions of a prepared installation to a DAO.\\n    /// @param _dao The address of the installing DAO.\\n    /// @param _params The struct containing the parameters for the `applyInstallation` function.\\n    function applyInstallation(\\n        address _dao,\\n        ApplyInstallationParams calldata _params\\n    ) external canApply(_dao, APPLY_INSTALLATION_PERMISSION_ID) {\\n        bytes32 pluginInstallationId = _getPluginInstallationId(_dao, _params.plugin);\\n\\n        PluginState storage pluginState = states[pluginInstallationId];\\n\\n        bytes32 preparedSetupId = _getPreparedSetupId(\\n            _params.pluginSetupRef,\\n            hashPermissions(_params.permissions),\\n            _params.helpersHash,\\n            bytes(\\\"\\\"),\\n            PreparationType.Installation\\n        );\\n\\n        // Check if this plugin is already installed.\\n        if (pluginState.currentAppliedSetupId != bytes32(0)) {\\n            revert PluginAlreadyInstalled();\\n        }\\n\\n        validatePreparedSetupId(pluginInstallationId, preparedSetupId);\\n\\n        bytes32 appliedSetupId = _getAppliedSetupId(_params.pluginSetupRef, _params.helpersHash);\\n\\n        pluginState.currentAppliedSetupId = appliedSetupId;\\n        pluginState.blockNumber = block.number;\\n\\n        // Process the permissions, which requires the `ROOT_PERMISSION_ID` from the installing DAO.\\n        if (_params.permissions.length > 0) {\\n            DAO(payable(_dao)).applyMultiTargetPermissions(_params.permissions);\\n        }\\n\\n        emit InstallationApplied({\\n            dao: _dao,\\n            plugin: _params.plugin,\\n            preparedSetupId: preparedSetupId,\\n            appliedSetupId: appliedSetupId\\n        });\\n    }\\n\\n    /// @notice Prepares the update of an UUPS upgradeable plugin.\\n    /// @param _dao The address of the DAO For which preparation of update happens.\\n    /// @param _params The struct containing the parameters for the `prepareUpdate` function.\\n    /// @return initData The initialization data to be passed to upgradeable contracts when the update is applied\\n    /// @return preparedSetupData The data struct containing the array of helper contracts and permissions that the setup has prepared.\\n    /// @dev The list of `_params.setupPayload.currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which the update is prepared for.\\n    function prepareUpdate(\\n        address _dao,\\n        PrepareUpdateParams calldata _params\\n    )\\n        external\\n        returns (bytes memory initData, IPluginSetup.PreparedSetupData memory preparedSetupData)\\n    {\\n        if (\\n            _params.currentVersionTag.release != _params.newVersionTag.release ||\\n            _params.currentVersionTag.build >= _params.newVersionTag.build\\n        ) {\\n            revert InvalidUpdateVersion({\\n                currentVersionTag: _params.currentVersionTag,\\n                newVersionTag: _params.newVersionTag\\n            });\\n        }\\n\\n        bytes32 pluginInstallationId = _getPluginInstallationId(_dao, _params.setupPayload.plugin);\\n\\n        PluginState storage pluginState = states[pluginInstallationId];\\n\\n        bytes32 currentHelpersHash = hashHelpers(_params.setupPayload.currentHelpers);\\n\\n        bytes32 appliedSetupId = _getAppliedSetupId(\\n            PluginSetupRef(_params.currentVersionTag, _params.pluginSetupRepo),\\n            currentHelpersHash\\n        );\\n\\n        // The following check implicitly confirms that plugin is currently installed.\\n        // Otherwise, `currentAppliedSetupId` would not be set.\\n        if (pluginState.currentAppliedSetupId != appliedSetupId) {\\n            revert InvalidAppliedSetupId({\\n                currentAppliedSetupId: pluginState.currentAppliedSetupId,\\n                appliedSetupId: appliedSetupId\\n            });\\n        }\\n\\n        PluginRepo.Version memory currentVersion = _params.pluginSetupRepo.getVersion(\\n            _params.currentVersionTag\\n        );\\n\\n        PluginRepo.Version memory newVersion = _params.pluginSetupRepo.getVersion(\\n            _params.newVersionTag\\n        );\\n\\n        bytes32 preparedSetupId;\\n\\n        // If the current and new plugin setup are identical, this is an UI update.\\n        // In this case, the permission hash is set to the empty array hash and the `prepareUpdate` call is skipped to avoid side effects.\\n        if (currentVersion.pluginSetup == newVersion.pluginSetup) {\\n            preparedSetupId = _getPreparedSetupId(\\n                PluginSetupRef(_params.newVersionTag, _params.pluginSetupRepo),\\n                EMPTY_ARRAY_HASH,\\n                currentHelpersHash,\\n                bytes(\\\"\\\"),\\n                PreparationType.Update\\n            );\\n\\n            // Because UI updates do not change the plugin functionality, the array of helpers\\n            // associated with this plugin version `preparedSetupData.helpers` and being returned must\\n            // equal `_params.setupPayload.currentHelpers` returned by the previous setup step (installation or update )\\n            // that this update is transitioning from.\\n            preparedSetupData.helpers = _params.setupPayload.currentHelpers;\\n        } else {\\n            // Check that plugin is `PluginUUPSUpgradable`.\\n            if (!_params.setupPayload.plugin.supportsInterface(type(IPlugin).interfaceId)) {\\n                revert IPluginNotSupported({plugin: _params.setupPayload.plugin});\\n            }\\n            if (IPlugin(_params.setupPayload.plugin).pluginType() != IPlugin.PluginType.UUPS) {\\n                revert PluginNonupgradeable({plugin: _params.setupPayload.plugin});\\n            }\\n\\n            // Prepare the update.\\n            (initData, preparedSetupData) = PluginSetup(newVersion.pluginSetup).prepareUpdate(\\n                _dao,\\n                _params.currentVersionTag.build,\\n                _params.setupPayload\\n            );\\n\\n            preparedSetupId = _getPreparedSetupId(\\n                PluginSetupRef(_params.newVersionTag, _params.pluginSetupRepo),\\n                hashPermissions(preparedSetupData.permissions),\\n                hashHelpers(preparedSetupData.helpers),\\n                initData,\\n                PreparationType.Update\\n            );\\n        }\\n\\n        // Check if this setup has already been prepared before and is pending.\\n        if (pluginState.blockNumber < pluginState.preparedSetupIdToBlockNumber[preparedSetupId]) {\\n            revert SetupAlreadyPrepared({preparedSetupId: preparedSetupId});\\n        }\\n\\n        pluginState.preparedSetupIdToBlockNumber[preparedSetupId] = block.number;\\n\\n        // Avoid stack too deep.\\n        emitPrepareUpdateEvent(_dao, preparedSetupId, _params, preparedSetupData, initData);\\n\\n        return (initData, preparedSetupData);\\n    }\\n\\n    /// @notice Applies the permissions of a prepared update of an UUPS upgradeable proxy contract to a DAO.\\n    /// @param _dao The address of the updating DAO.\\n    /// @param _params The struct containing the parameters for the `applyInstallation` function.\\n    function applyUpdate(\\n        address _dao,\\n        ApplyUpdateParams calldata _params\\n    ) external canApply(_dao, APPLY_UPDATE_PERMISSION_ID) {\\n        bytes32 pluginInstallationId = _getPluginInstallationId(_dao, _params.plugin);\\n\\n        PluginState storage pluginState = states[pluginInstallationId];\\n\\n        bytes32 preparedSetupId = _getPreparedSetupId(\\n            _params.pluginSetupRef,\\n            hashPermissions(_params.permissions),\\n            _params.helpersHash,\\n            _params.initData,\\n            PreparationType.Update\\n        );\\n\\n        validatePreparedSetupId(pluginInstallationId, preparedSetupId);\\n\\n        bytes32 appliedSetupId = _getAppliedSetupId(_params.pluginSetupRef, _params.helpersHash);\\n\\n        pluginState.blockNumber = block.number;\\n        pluginState.currentAppliedSetupId = appliedSetupId;\\n\\n        PluginRepo.Version memory version = _params.pluginSetupRef.pluginSetupRepo.getVersion(\\n            _params.pluginSetupRef.versionTag\\n        );\\n\\n        address currentImplementation = PluginUUPSUpgradeable(_params.plugin).implementation();\\n        address newImplementation = PluginSetup(version.pluginSetup).implementation();\\n\\n        if (currentImplementation != newImplementation) {\\n            _upgradeProxy(_params.plugin, newImplementation, _params.initData);\\n        }\\n\\n        // Process the permissions, which requires the `ROOT_PERMISSION_ID` from the updating DAO.\\n        if (_params.permissions.length > 0) {\\n            DAO(payable(_dao)).applyMultiTargetPermissions(_params.permissions);\\n        }\\n\\n        emit UpdateApplied({\\n            dao: _dao,\\n            plugin: _params.plugin,\\n            preparedSetupId: preparedSetupId,\\n            appliedSetupId: appliedSetupId\\n        });\\n    }\\n\\n    /// @notice Prepares the uninstallation of a plugin.\\n    /// @param _dao The address of the installing DAO.\\n    /// @param _params The struct containing the parameters for the `prepareUninstallation` function.\\n    /// @return permissions The list of multi-targeted permission operations to be applied to the uninstalling DAO.\\n    /// @dev The list of `_params.setupPayload.currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which the uninstallation was prepared for.\\n    function prepareUninstallation(\\n        address _dao,\\n        PrepareUninstallationParams calldata _params\\n    ) external returns (PermissionLib.MultiTargetPermission[] memory permissions) {\\n        bytes32 pluginInstallationId = _getPluginInstallationId(_dao, _params.setupPayload.plugin);\\n\\n        PluginState storage pluginState = states[pluginInstallationId];\\n\\n        bytes32 appliedSetupId = _getAppliedSetupId(\\n            _params.pluginSetupRef,\\n            hashHelpers(_params.setupPayload.currentHelpers)\\n        );\\n\\n        if (pluginState.currentAppliedSetupId != appliedSetupId) {\\n            revert InvalidAppliedSetupId({\\n                currentAppliedSetupId: pluginState.currentAppliedSetupId,\\n                appliedSetupId: appliedSetupId\\n            });\\n        }\\n\\n        PluginRepo.Version memory version = _params.pluginSetupRef.pluginSetupRepo.getVersion(\\n            _params.pluginSetupRef.versionTag\\n        );\\n\\n        permissions = PluginSetup(version.pluginSetup).prepareUninstallation(\\n            _dao,\\n            _params.setupPayload\\n        );\\n\\n        bytes32 preparedSetupId = _getPreparedSetupId(\\n            _params.pluginSetupRef,\\n            hashPermissions(permissions),\\n            ZERO_BYTES_HASH,\\n            bytes(\\\"\\\"),\\n            PreparationType.Uninstallation\\n        );\\n\\n        // Check if this setup has already been prepared before and is pending.\\n        if (pluginState.blockNumber < pluginState.preparedSetupIdToBlockNumber[preparedSetupId]) {\\n            revert SetupAlreadyPrepared({preparedSetupId: preparedSetupId});\\n        }\\n\\n        pluginState.preparedSetupIdToBlockNumber[preparedSetupId] = block.number;\\n\\n        emit UninstallationPrepared({\\n            sender: msg.sender,\\n            dao: _dao,\\n            preparedSetupId: preparedSetupId,\\n            pluginSetupRepo: _params.pluginSetupRef.pluginSetupRepo,\\n            versionTag: _params.pluginSetupRef.versionTag,\\n            setupPayload: _params.setupPayload,\\n            permissions: permissions\\n        });\\n    }\\n\\n    /// @notice Applies the permissions of a prepared uninstallation to a DAO.\\n    /// @param _dao The address of the DAO.\\n    /// @param _dao The address of the installing DAO.\\n    /// @param _params The struct containing the parameters for the `applyUninstallation` function.\\n    /// @dev The list of `_params.setupPayload.currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which the uninstallation was prepared for.\\n    function applyUninstallation(\\n        address _dao,\\n        ApplyUninstallationParams calldata _params\\n    ) external canApply(_dao, APPLY_UNINSTALLATION_PERMISSION_ID) {\\n        bytes32 pluginInstallationId = _getPluginInstallationId(_dao, _params.plugin);\\n\\n        PluginState storage pluginState = states[pluginInstallationId];\\n\\n        bytes32 preparedSetupId = _getPreparedSetupId(\\n            _params.pluginSetupRef,\\n            hashPermissions(_params.permissions),\\n            ZERO_BYTES_HASH,\\n            bytes(\\\"\\\"),\\n            PreparationType.Uninstallation\\n        );\\n\\n        validatePreparedSetupId(pluginInstallationId, preparedSetupId);\\n\\n        // Since the plugin is uninstalled, only the current block number must be updated.\\n        pluginState.blockNumber = block.number;\\n        pluginState.currentAppliedSetupId = bytes32(0);\\n\\n        // Process the permissions, which requires the `ROOT_PERMISSION_ID` from the uninstalling DAO.\\n        if (_params.permissions.length > 0) {\\n            DAO(payable(_dao)).applyMultiTargetPermissions(_params.permissions);\\n        }\\n\\n        emit UninstallationApplied({\\n            dao: _dao,\\n            plugin: _params.plugin,\\n            preparedSetupId: preparedSetupId\\n        });\\n    }\\n\\n    /// @notice Validates that a setup ID can be applied for `applyInstallation`, `applyUpdate`, or `applyUninstallation`.\\n    /// @param pluginInstallationId The plugin installation ID obtained from the hash of `abi.encode(daoAddress, pluginAddress)`.\\n    /// @param preparedSetupId The prepared setup ID to be validated.\\n    /// @dev If the block number stored in `states[pluginInstallationId].blockNumber` exceeds the one stored in `pluginState.preparedSetupIdToBlockNumber[preparedSetupId]`, the prepared setup with `preparedSetupId` is outdated and not applicable anymore.\\n    function validatePreparedSetupId(\\n        bytes32 pluginInstallationId,\\n        bytes32 preparedSetupId\\n    ) public view {\\n        PluginState storage pluginState = states[pluginInstallationId];\\n        if (pluginState.blockNumber >= pluginState.preparedSetupIdToBlockNumber[preparedSetupId]) {\\n            revert SetupNotApplicable({preparedSetupId: preparedSetupId});\\n        }\\n    }\\n\\n    /// @notice Upgrades a UUPS upgradeable proxy contract (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    /// @param _proxy The address of the proxy.\\n    /// @param _implementation The address of the implementation contract.\\n    /// @param _initData The initialization data to be passed to the upgradeable plugin contract via `upgradeToAndCall`.\\n    function _upgradeProxy(\\n        address _proxy,\\n        address _implementation,\\n        bytes memory _initData\\n    ) private {\\n        if (_initData.length > 0) {\\n            try\\n                PluginUUPSUpgradeable(_proxy).upgradeToAndCall(_implementation, _initData)\\n            {} catch Error(string memory reason) {\\n                revert(reason);\\n            } catch (bytes memory /*lowLevelData*/) {\\n                revert PluginProxyUpgradeFailed({\\n                    proxy: _proxy,\\n                    implementation: _implementation,\\n                    initData: _initData\\n                });\\n            }\\n        } else {\\n            try PluginUUPSUpgradeable(_proxy).upgradeTo(_implementation) {} catch Error(\\n                string memory reason\\n            ) {\\n                revert(reason);\\n            } catch (bytes memory /*lowLevelData*/) {\\n                revert PluginProxyUpgradeFailed({\\n                    proxy: _proxy,\\n                    implementation: _implementation,\\n                    initData: _initData\\n                });\\n            }\\n        }\\n    }\\n\\n    /// @notice Checks if a caller has the permission to apply a setup.\\n    /// @param _dao The address of the applying DAO.\\n    /// @param _permissionId The permission ID.\\n    function _canApply(address _dao, bytes32 _permissionId) private view {\\n        if (\\n            msg.sender != _dao &&\\n            !DAO(payable(_dao)).hasPermission(address(this), msg.sender, _permissionId, bytes(\\\"\\\"))\\n        ) {\\n            revert SetupApplicationUnauthorized({\\n                dao: _dao,\\n                caller: msg.sender,\\n                permissionId: _permissionId\\n            });\\n        }\\n    }\\n\\n    /// @notice A helper to emit the `UpdatePrepared` event from the supplied, structured data.\\n    /// @param _dao The address of the updating DAO.\\n    /// @param _preparedSetupId The prepared setup ID.\\n    /// @param _params The struct containing the parameters for the `prepareUpdate` function.\\n    /// @param _preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    /// @param _initData The initialization data to be passed to upgradeable contracts when the update is applied\\n    /// @dev This functions exists to avoid stack-too-deep errors.\\n    function emitPrepareUpdateEvent(\\n        address _dao,\\n        bytes32 _preparedSetupId,\\n        PrepareUpdateParams calldata _params,\\n        IPluginSetup.PreparedSetupData memory _preparedSetupData,\\n        bytes memory _initData\\n    ) private {\\n        emit UpdatePrepared({\\n            sender: msg.sender,\\n            dao: _dao,\\n            preparedSetupId: _preparedSetupId,\\n            pluginSetupRepo: _params.pluginSetupRepo,\\n            versionTag: _params.newVersionTag,\\n            setupPayload: _params.setupPayload,\\n            preparedSetupData: _preparedSetupData,\\n            initData: _initData\\n        });\\n    }\\n}\",\"keccak256\":\"0x00f6f353319fe224c4668299aab3d8833ed42cb3674972ccc4b15a3caad06b57\",\"license\":\"MIT\"},\"contracts/factory/plugin/setup/PluginSetupProcessorHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {PermissionLib} from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport {PluginRepo} from \\\"../repo/PluginRepo.sol\\\";\\nimport {PluginSetup} from \\\"./PluginSetup.sol\\\";\\n\\n/// @notice The struct containin a reference to a plugin setup by specifying the containing plugin repository and the associated version tag.\\n/// @param versionTag The tag associated with the plugin setup version.\\n/// @param pluginSetupRepo The plugin setup repository.\\nstruct PluginSetupRef {\\n    PluginRepo.Tag versionTag;\\n    PluginRepo pluginSetupRepo;\\n}\\n\\n/// @notice The different types describing a prepared setup.\\n/// @param None The default indicating the lack of a preparation type.\\n/// @param Installation The prepared setup installs a new plugin.\\n/// @param Update The prepared setup updates an existing plugin.\\n/// @param Uninstallation The prepared setup uninstalls an existing plugin.\\nenum PreparationType {\\n    None,\\n    Installation,\\n    Update,\\n    Uninstallation\\n}\\n\\n/// @notice Returns an ID for plugin installation by hashing the DAO and plugin address.\\n/// @param _dao The address of the DAO conducting the setup.\\n/// @param _plugin The plugin address.\\nfunction _getPluginInstallationId(address _dao, address _plugin) pure returns (bytes32) {\\n    return keccak256(abi.encode(_dao, _plugin));\\n}\\n\\n/// @notice Returns an ID for prepared setup obtained from hashing characterizing elements.\\n/// @param _pluginSetupRef The reference of the plugin setup containing plugin setup repo and version tag.\\n/// @param _permissionsHash The hash of the permission operations requested by the setup.\\n/// @param _helpersHash The hash of the helper contract addresses.\\n/// @param _data The bytes-encoded initialize data for the upgrade that is returned by `prepareUpdate`.\\n/// @param _preparationType The type of preparation the plugin is currently undergoing. Without this, it is possible to call `applyUpdate` even after `applyInstallation` is called.\\n/// @return The prepared setup id.\\nfunction _getPreparedSetupId(\\n    PluginSetupRef memory _pluginSetupRef,\\n    bytes32 _permissionsHash,\\n    bytes32 _helpersHash,\\n    bytes memory _data,\\n    PreparationType _preparationType\\n) pure returns (bytes32) {\\n    return\\n        keccak256(\\n            abi.encode(\\n                _pluginSetupRef.versionTag,\\n                _pluginSetupRef.pluginSetupRepo,\\n                _permissionsHash,\\n                _helpersHash,\\n                keccak256(_data),\\n                _preparationType\\n            )\\n        );\\n}\\n\\n/// @notice Returns an identifier for applied installations.\\n/// @param _pluginSetupRef The reference of the plugin setup containing plugin setup repo and version tag.\\n/// @param _helpersHash The hash of the helper contract addresses.\\n/// @return The applied setup id.\\nfunction _getAppliedSetupId(\\n    PluginSetupRef memory _pluginSetupRef,\\n    bytes32 _helpersHash\\n) pure returns (bytes32) {\\n    return\\n        keccak256(\\n            abi.encode(_pluginSetupRef.versionTag, _pluginSetupRef.pluginSetupRepo, _helpersHash)\\n        );\\n}\\n\\n/// @notice Returns a hash of an array of helper addresses (contracts or EOAs).\\n/// @param _helpers The array of helper addresses (contracts or EOAs) to be hashed.\\nfunction hashHelpers(address[] memory _helpers) pure returns (bytes32) {\\n    return keccak256(abi.encode(_helpers));\\n}\\n\\n/// @notice Returns a hash of an array of multi-targeted permission operations.\\n/// @param _permissions The array of of multi-targeted permission operations.\\n/// @return The hash of the array of permission operations.\\nfunction hashPermissions(\\n    PermissionLib.MultiTargetPermission[] memory _permissions\\n) pure returns (bytes32) {\\n    return keccak256(abi.encode(_permissions));\\n}\",\"keccak256\":\"0xcdd63cf060b082162050dfe82475f0243bfc7f03a35f20f7dfb0b32fb63c7ee7\",\"license\":\"MIT\"},\"contracts/factory/utils/InterfaceBasedRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {ERC165CheckerUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\\\";\\n\\nimport {DaoAuthorizableUpgradeable} from \\\"../../core/plugin/dao-authorizable/DaoAuthorizableUpgradeable.sol\\\";\\nimport {IDAO} from \\\"../../core/dao/IDAO.sol\\\";\\n\\n/// @title InterfaceBasedRegistry\\n/// @notice An [ERC-165](https://eips.ethereum.org/EIPS/eip-165)-based registry for contracts\\nabstract contract InterfaceBasedRegistry is UUPSUpgradeable, DaoAuthorizableUpgradeable {\\n    using ERC165CheckerUpgradeable for address;\\n\\n    /// @notice The ID of the permission required to call the `_authorizeUpgrade` function.\\n    bytes32 public constant UPGRADE_REGISTRY_PERMISSION_ID =\\n        keccak256(\\\"UPGRADE_REGISTRY_PERMISSION\\\");\\n\\n    /// @notice The [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID that the target contracts being registered must support.\\n    bytes4 public targetInterfaceId;\\n\\n    /// @notice The mapping containing the registry entries returning true for registererd contract addresses.\\n    mapping(address => bool) public entries;\\n\\n    /// @notice Thrown if the contract is already registered.\\n    /// @param registrant The address of the contract to be registered.\\n    error ContractAlreadyRegistered(address registrant);\\n\\n    /// @notice Thrown if the contract does not support the required interface.\\n    /// @param registrant The address of the contract to be registered.\\n    error ContractInterfaceInvalid(address registrant);\\n\\n    /// @notice Thrown if the contract do not support ERC165.\\n    /// @param registrant The address of the contract.\\n    error ContractERC165SupportInvalid(address registrant);\\n\\n    /// @notice Initializes the component.\\n    /// @dev This is required for the UUPS upgradability pattern.\\n    /// @param _managingDao The interface of the DAO managing the components permissions.\\n    /// @param _targetInterfaceId The [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface id of the contracts to be registered.\\n    function __InterfaceBasedRegistry_init(\\n        IDAO _managingDao,\\n        bytes4 _targetInterfaceId\\n    ) internal virtual onlyInitializing {\\n        __DaoAuthorizableUpgradeable_init(_managingDao);\\n\\n        targetInterfaceId = _targetInterfaceId;\\n    }\\n\\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeabilty mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    /// @dev The caller must have the `UPGRADE_REGISTRY_PERMISSION_ID` permission.\\n    function _authorizeUpgrade(\\n        address\\n    ) internal virtual override auth(UPGRADE_REGISTRY_PERMISSION_ID) {}\\n\\n    /// @notice Register an [ERC-165](https://eips.ethereum.org/EIPS/eip-165) contract address.\\n    /// @dev The managing DAO needs to grant REGISTER_PERMISSION_ID to registrar.\\n    /// @param _registrant The address of an [ERC-165](https://eips.ethereum.org/EIPS/eip-165) contract.\\n    function _register(address _registrant) internal {\\n        if (entries[_registrant]) {\\n            revert ContractAlreadyRegistered({registrant: _registrant});\\n        }\\n\\n        // Will revert if address is not a contract or doesn't fully support targetInterfaceId + ERC165.\\n        if (!_registrant.supportsInterface(targetInterfaceId)) {\\n            revert ContractInterfaceInvalid(_registrant);\\n        }\\n\\n        entries[_registrant] = true;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[48] private __gap;\\n}\",\"keccak256\":\"0xabe9a5b609dab8eba5df5a8b50c79dbe24dbcffe51d5716acff9928b2355d635\",\"license\":\"MIT\"},\"contracts/utils/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\n/// @notice Free function to create a [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract based on the passed base contract address.\\n/// @param _logic The base contract address.\\n/// @param _data The constructor arguments for this contract.\\n/// @return The address of the proxy contract created.\\n/// @dev Initializes the upgradeable proxy with an initial implementation specified by _logic. If _data is non-empty, it\\u2019s used as data in a delegate call to _logic. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor (see [OpenZepplin ERC1967Proxy-constructor](https://docs.openzeppelin.com/contracts/4.x/api/proxy#ERC1967Proxy-constructor-address-bytes-)).\\nfunction createERC1967Proxy(address _logic, bytes memory _data) returns (address) {\\n    return address(new ERC1967Proxy(_logic, _data));\\n}\",\"keccak256\":\"0x3a174d8d741bd8ec5a117adccb7af2dcf6b9e8ac3568138f920c39f76fd14520\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620045b5380380620045b58339818101604052810190620000379190620000fd565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200012f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b18262000084565b9050919050565b6000620000c582620000a4565b9050919050565b620000d781620000b8565b8114620000e357600080fd5b50565b600081519050620000f781620000cc565b92915050565b6000602082840312156200011657620001156200007f565b5b60006200012684828501620000e6565b91505092915050565b614476806200013f6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80639665861a116100715780639665861a1461018e578063ca211f7f146101ac578063d7598122146101ca578063fafc79da146101fb578063fbdc1ef114610217578063fe6c347414610248576100b4565b806322e12c63146100b95780632fb04336146100d55780633c8c01d114610105578063483d209e14610136578063747e5ec114610154578063851d11f814610172575b600080fd5b6100d360048036038101906100ce91906124c2565b610264565b005b6100ef60048036038101906100ea919061253d565b610747565b6040516100fc919061274f565b60405180910390f35b61011f600480360381019061011a9190612790565b610b27565b60405161012d92919061295d565b60405180910390f35b61013e610f13565b60405161014b91906129ec565b60405180910390f35b61015c610f39565b6040516101699190612a16565b60405180910390f35b61018c60048036038101906101879190612a50565b610f5d565b005b6101966111b7565b6040516101a39190612a16565b60405180910390f35b6101b46111db565b6040516101c19190612a16565b60405180910390f35b6101e460048036038101906101df9190612acb565b6111ff565b6040516101f2929190612bb7565b60405180910390f35b61021560048036038101906102109190612c1a565b611a2e565b005b610231600480360381019061022c9190612c5a565b611aa6565b60405161023f929190612ca0565b60405180910390f35b610262600480360381019061025d9190612ce8565b611aca565b005b817fb03cf3d518f6d49560b7f5bece1ccb8fd50ea7370f02f5e5210edba04be3c4f76102908282611d6a565b60006102ae858560000160208101906102a99190612d44565b611e7c565b90506000806000838152602001908152602001600020905060006103ab866020018036038101906102df9190612f47565b61034c888060a001906102f29190612f83565b808060200260200160405190810160405280939291908181526020016000905b8282101561034257848483905060a002018036038101906103339190613097565b81526020019060010190610312565b5050505050611eaf565b8860c0013589806080019061036191906130c4565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506002611edf565b90506103b78382611a2e565b60006103da876020018036038101906103d09190612f47565b8860c00135611f2c565b905043836000018190555080836001018190555060008760200160400160208101906104069190613127565b73ffffffffffffffffffffffffffffffffffffffff16639af3e909896020016000016040518263ffffffff1660e01b815260040161044491906131df565b600060405180830381865afa158015610461573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061048a91906133b4565b905060008860000160208101906104a19190612d44565b73ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f91906133fd565b90506000826020015173ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058691906133fd565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461062b5761062a8a60000160208101906105d19190612d44565b828c80608001906105e291906130c4565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611f69565b5b60008a8060a0019061063d9190612f83565b905011156106c1578a73ffffffffffffffffffffffffffffffffffffffff1663e978afe58b8060a001906106719190612f83565b6040518363ffffffff1660e01b815260040161068e929190613596565b600060405180830381600087803b1580156106a857600080fd5b505af11580156106bc573d6000803e3d6000fd5b505050505b8960000160208101906106d49190612d44565b73ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167f24565610ddf61ee73e8501d7f0454657c71f5944882f5c586d7246bf43e13cda87876040516107329291906135ba565b60405180910390a35050505050505050505050565b606060006107768484806060019061075f91906135e3565b60000160208101906107719190612d44565b611e7c565b9050600080600083815260200190815260200160002090506000610813856000018036038101906107a79190612f47565b61080e8780606001906107ba91906135e3565b80602001906107c9919061360b565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050612202565b611f2c565b905080826001015414610863578160010154816040517f73a4eaa000000000000000000000000000000000000000000000000000000000815260040161085a9291906135ba565b60405180910390fd5b600085600001604001602081019061087b9190613127565b73ffffffffffffffffffffffffffffffffffffffff16639af3e909876000016000016040518263ffffffff1660e01b81526004016108b991906131df565b600060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108ff91906133b4565b9050806020015173ffffffffffffffffffffffffffffffffffffffff16639cb0a1248888806060019061093291906135e3565b6040518363ffffffff1660e01b815260040161094f929190613877565b6000604051808303816000875af115801561096e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109979190613a25565b945060006109f6876000018036038101906109b29190612f47565b6109bb88611eaf565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56360001b604051806020016040528060008152506003611edf565b90508360020160008281526020019081526020016000205484600001541015610a5657806040517f2acda5b8000000000000000000000000000000000000000000000000000000008152600401610a4d9190612a16565b60405180910390fd5b4384600201600083815260200190815260200160002081905550866000016040016020810190610a869190613127565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5fdcd271ff15db84cbc94365956df5504f6d756e111654144648433c11a44530848b6000016000018c8060600190610b0391906135e3565b8c604051610b149493929190613a6e565b60405180910390a4505050505092915050565b6000610b31612412565b6000836000016040016020810190610b499190613127565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f29ee125826040518263ffffffff1660e01b8152600401610ba69190613ac1565b602060405180830381865afa158015610bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be79190613b14565b610c1d576040517f0d4feab400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16639af3e909866000016000016040518263ffffffff1660e01b8152600401610c5e91906131df565b600060405180830381865afa158015610c7b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ca491906133b4565b9050806020015173ffffffffffffffffffffffffffffffffffffffff1663f10832f187878060600190610cd791906130c4565b6040518463ffffffff1660e01b8152600401610cf593929190613b6e565b6000604051808303816000875af1158015610d14573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d3d9190613ceb565b80945081955050506000610d518786611e7c565b90506000610d9d87600001803603810190610d6c9190612f47565b610d798760200151611eaf565b610d868860000151612202565b604051806020016040528060008152506001611edf565b9050600080600084815260200190815260200160002090506000801b816001015414610df5576040517fd2e44eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060020160008381526020019081526020016000205481600001541015610e5357816040517f2acda5b8000000000000000000000000000000000000000000000000000000008152600401610e4a9190612a16565b60405180910390fd5b43816002016000848152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8ea69cee01fd9fc24e6b9614ea0896c5a1eac8fd8aba383285248cd0e1d8503a858c6000016000018d8060600190610eeb91906130c4565b8e8e604051610eff96959493929190613d47565b60405180910390a450505050509250929050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7ff796b89427c6552c1ac705d833bfb7909f8eb5ce502c1db97f85fabc6ad8354881565b817fbd4dbacf5ba6d9793f600403b3293d6ecd695fcc703a2b5edcf245f45fda6cfa610f898282611d6a565b6000610fa785856000016020810190610fa29190612d44565b611e7c565b905060008060008381526020019081526020016000209050600061108086602001803603810190610fd89190612f47565b611045888060800190610feb9190612f83565b808060200260200160405190810160405280939291908181526020016000905b8282101561103b57848483905060a0020180360381019061102c9190613097565b8152602001906001019061100b565b5050505050611eaf565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56360001b604051806020016040528060008152506003611edf565b905061108c8382611a2e565b4382600001819055506000801b826001018190555060008680608001906110b39190612f83565b90501115611137578673ffffffffffffffffffffffffffffffffffffffff1663e978afe58780608001906110e79190612f83565b6040518363ffffffff1660e01b8152600401611104929190613596565b600060405180830381600087803b15801561111e57600080fd5b505af1158015611132573d6000803e3d6000fd5b505050505b85600001602081019061114a9190612d44565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fa0e5d4ce6420a0e7a5f0ac10c47b3a672fb661c11f5609bb21b68644d81e17aa836040516111a69190612a16565b60405180910390a350505050505050565b7fb03cf3d518f6d49560b7f5bece1ccb8fd50ea7370f02f5e5210edba04be3c4f781565b7fbd4dbacf5ba6d9793f600403b3293d6ecd695fcc703a2b5edcf245f45fda6cfa81565b6060611209612412565b82604001600001602081019061121f9190613daa565b60ff168360000160000160208101906112389190613daa565b60ff1614158061127a57508260400160200160208101906112599190613dd7565b61ffff168360000160200160208101906112739190613dd7565b61ffff1610155b156112c45782600001836040016040517f80d4e9070000000000000000000000000000000000000000000000000000000081526004016112bb929190613e04565b60405180910390fd5b60006112f185858060a001906112da91906135e3565b60000160208101906112ec9190612d44565b611e7c565b9050600080600083815260200190815260200160002090506000611372868060a0019061131e91906135e3565b806020019061132d919061360b565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050612202565b905060006113cf6040518060400160405280896000018036038101906113989190613e2d565b81526020018960800160208101906113b09190613127565b73ffffffffffffffffffffffffffffffffffffffff1681525083611f2c565b90508083600101541461141f578260010154816040517f73a4eaa00000000000000000000000000000000000000000000000000000000081526004016114169291906135ba565b60405180910390fd5b60008760800160208101906114349190613127565b73ffffffffffffffffffffffffffffffffffffffff16639af3e909896000016040518263ffffffff1660e01b815260040161146f91906131df565b600060405180830381865afa15801561148c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114b591906133b4565b905060008860800160208101906114cc9190613127565b73ffffffffffffffffffffffffffffffffffffffff16639af3e9098a6040016040518263ffffffff1660e01b815260040161150791906131df565b600060405180830381865afa158015611524573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061154d91906133b4565b90506000816020015173ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff16036116895761161b60405180604001604052808c6040018036038101906115ae9190613e2d565b81526020018c60800160208101906115c69190613127565b73ffffffffffffffffffffffffffffffffffffffff168152507f569e75fc77c1a856f6daaf9e69d8a9566ca34aa47f9133711ce065a571af0cfd60001b87604051806020016040528060008152506002611edf565b9050898060a0019061162d91906135e3565b806020019061163c919061360b565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050886000018190525061199b565b6116f37f41de6830000000000000000000000000000000000000000000000000000000008b8060a001906116bd91906135e3565b60000160208101906116cf9190612d44565b73ffffffffffffffffffffffffffffffffffffffff1661223290919063ffffffff16565b61175557898060a0019061170791906135e3565b60000160208101906117199190612d44565b6040517f8174ff5500000000000000000000000000000000000000000000000000000000815260040161174c9190613ac1565b60405180910390fd5b60006002811115611769576117686125c5565b5b8a8060a0019061177991906135e3565b600001602081019061178b9190612d44565b73ffffffffffffffffffffffffffffffffffffffff166341de68306040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f99190613e7f565b600281111561180b5761180a6125c5565b5b1461186e57898060a0019061182091906135e3565b60000160208101906118329190612d44565b6040517fe4356c940000000000000000000000000000000000000000000000000000000081526004016118659190613ac1565b60405180910390fd5b816020015173ffffffffffffffffffffffffffffffffffffffff1663a8a9c29e8c8c60000160200160208101906118a59190613dd7565b8d8060a001906118b591906135e3565b6040518463ffffffff1660e01b81526004016118d393929190613ebb565b6000604051808303816000875af11580156118f2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061191b9190613ef9565b809950819a50505061199860405180604001604052808c6040018036038101906119459190613e2d565b81526020018c608001602081019061195d9190613127565b73ffffffffffffffffffffffffffffffffffffffff168152506119838a60200151611eaf565b6119908b60000151612202565b8c6002611edf565b90505b85600201600082815260200190815260200160002054866000015410156119f957806040517f2acda5b80000000000000000000000000000000000000000000000000000000081526004016119f09190612a16565b60405180910390fd5b4386600201600083815260200190815260200160002081905550611a208b828c8b8d612257565b505050505050509250929050565b6000806000848152602001908152602001600020905080600201600083815260200190815260200160002054816000015410611aa157816040517f59730ce6000000000000000000000000000000000000000000000000000000008152600401611a989190612a16565b60405180910390fd5b505050565b60006020528060005260406000206000915090508060000154908060010154905082565b817ff796b89427c6552c1ac705d833bfb7909f8eb5ce502c1db97f85fabc6ad83548611af68282611d6a565b6000611b1485856060016020810190611b0f9190612d44565b611e7c565b9050600080600083815260200190815260200160002090506000611bce86600001803603810190611b459190612f47565b611bb2888060800190611b589190612f83565b808060200260200160405190810160405280939291908181526020016000905b82821015611ba857848483905060a00201803603810190611b999190613097565b81526020019060010190611b78565b5050505050611eaf565b8860a00135604051806020016040528060008152506001611edf565b90506000801b826001015414611c10576040517fd2e44eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611c1a8382611a2e565b6000611c3d87600001803603810190611c339190612f47565b8860a00135611f2c565b90508083600101819055504383600001819055506000878060800190611c639190612f83565b90501115611ce7578773ffffffffffffffffffffffffffffffffffffffff1663e978afe5888060800190611c979190612f83565b6040518363ffffffff1660e01b8152600401611cb4929190613596565b600060405180830381600087803b158015611cce57600080fd5b505af1158015611ce2573d6000803e3d6000fd5b505050505b866060016020810190611cfa9190612d44565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f74e616c7264536b98a5ec234d051ae6ce1305bf05c85f9ddc112364440ccf1298484604051611d589291906135ba565b60405180910390a35050505050505050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015611e3257508173ffffffffffffffffffffffffffffffffffffffff1663fdef9106303384604051806020016040528060008152506040518563ffffffff1660e01b8152600401611def9493929190613f71565b602060405180830381865afa158015611e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e309190613b14565b155b15611e78578133826040517f15d68ee0000000000000000000000000000000000000000000000000000000008152600401611e6f93929190613fbd565b60405180910390fd5b5050565b60008282604051602001611e91929190613ff4565b60405160208183030381529060405280519060200120905092915050565b600081604051602001611ec2919061274f565b604051602081830303815290604052805190602001209050919050565b6000856000015186602001518686868051906020012086604051602001611f0b969594939291906140b5565b60405160208183030381529060405280519060200120905095945050505050565b60008260000151836020015183604051602001611f4b93929190614116565b60405160208183030381529060405280519060200120905092915050565b6000815111156120bb578273ffffffffffffffffffffffffffffffffffffffff16634f1ef28683836040518363ffffffff1660e01b8152600401611fae92919061414d565b600060405180830381600087803b158015611fc857600080fd5b505af1925050508015611fd9575060015b6120b657611fe561418a565b806308c379a0036120415750611ff96141ac565b806120045750612043565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120389190614291565b60405180910390fd5b505b3d806000811461206f576040519150601f19603f3d011682016040523d82523d6000602084013e612074565b606091505b508383836040517f96e9e31b0000000000000000000000000000000000000000000000000000000081526004016120ad939291906142b3565b60405180910390fd5b6121fd565b8273ffffffffffffffffffffffffffffffffffffffff16633659cfe6836040518263ffffffff1660e01b81526004016120f49190613ac1565b600060405180830381600087803b15801561210e57600080fd5b505af192505050801561211f575060015b6121fc5761212b61418a565b806308c379a003612187575061213f6141ac565b8061214a5750612189565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217e9190614291565b60405180910390fd5b505b3d80600081146121b5576040519150601f19603f3d011682016040523d82523d6000602084013e6121ba565b606091505b508383836040517f96e9e31b0000000000000000000000000000000000000000000000000000000081526004016121f3939291906142b3565b60405180910390fd5b5b505050565b6000816040516020016122159190614360565b604051602081830303815290604052805190602001209050919050565b600061223d83612306565b801561224f575061224e8383612353565b5b905092915050565b82608001602081019061226a9190613127565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3686138d92841c8549b2fe39fda23881fef6aa9b347352114c0869bf5af3e3f28787604001888060a001906122e491906135e3565b88886040516122f7959493929190614382565b60405180910390a45050505050565b6000612332827f01ffc9a700000000000000000000000000000000000000000000000000000000612353565b801561234c575061234a8263ffffffff60e01b612353565b155b9050919050565b6000806301ffc9a760e01b8360405160240161236f9190614425565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000602060008551602087018a617530fa92503d915060005190508280156123fa575060208210155b80156124065750600081115b94505050505092915050565b604051806040016040528060608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061246b82612440565b9050919050565b61247b81612460565b811461248657600080fd5b50565b60008135905061249881612472565b92915050565b600080fd5b600060e082840312156124b9576124b861249e565b5b81905092915050565b600080604083850312156124d9576124d8612436565b5b60006124e785828601612489565b925050602083013567ffffffffffffffff8111156125085761250761243b565b5b612514858286016124a3565b9150509250929050565b6000608082840312156125345761253361249e565b5b81905092915050565b6000806040838503121561255457612553612436565b5b600061256285828601612489565b925050602083013567ffffffffffffffff8111156125835761258261243b565b5b61258f8582860161251e565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612605576126046125c5565b5b50565b6000819050612616826125f4565b919050565b600061262682612608565b9050919050565b6126368161261b565b82525050565b61264581612460565b82525050565b6000819050919050565b61265e8161264b565b82525050565b60a08201600082015161267a600085018261262d565b50602082015161268d602085018261263c565b5060408201516126a0604085018261263c565b5060608201516126b3606085018261263c565b5060808201516126c66080850182612655565b50505050565b60006126d88383612664565b60a08301905092915050565b6000602082019050919050565b60006126fc82612599565b61270681856125a4565b9350612711836125b5565b8060005b8381101561274257815161272988826126cc565b9750612734836126e4565b925050600181019050612715565b5085935050505092915050565b6000602082019050818103600083015261276981846126f1565b905092915050565b6000608082840312156127875761278661249e565b5b81905092915050565b600080604083850312156127a7576127a6612436565b5b60006127b585828601612489565b925050602083013567ffffffffffffffff8111156127d6576127d561243b565b5b6127e285828601612771565b9150509250929050565b6127f581612460565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612833838361263c565b60208301905092915050565b6000602082019050919050565b6000612857826127fb565b6128618185612806565b935061286c83612817565b8060005b8381101561289d5781516128848882612827565b975061288f8361283f565b925050600181019050612870565b5085935050505092915050565b600082825260208201905092915050565b60006128c682612599565b6128d081856128aa565b93506128db836125b5565b8060005b8381101561290c5781516128f388826126cc565b97506128fe836126e4565b9250506001810190506128df565b5085935050505092915050565b60006040830160008301518482036000860152612936828261284c565b9150506020830151848203602086015261295082826128bb565b9150508091505092915050565b600060408201905061297260008301856127ec565b81810360208301526129848184612919565b90509392505050565b6000819050919050565b60006129b26129ad6129a884612440565b61298d565b612440565b9050919050565b60006129c482612997565b9050919050565b60006129d6826129b9565b9050919050565b6129e6816129cb565b82525050565b6000602082019050612a0160008301846129dd565b92915050565b612a108161264b565b82525050565b6000602082019050612a2b6000830184612a07565b92915050565b600060a08284031215612a4757612a4661249e565b5b81905092915050565b60008060408385031215612a6757612a66612436565b5b6000612a7585828601612489565b925050602083013567ffffffffffffffff811115612a9657612a9561243b565b5b612aa285828601612a31565b9150509250929050565b600060c08284031215612ac257612ac161249e565b5b81905092915050565b60008060408385031215612ae257612ae1612436565b5b6000612af085828601612489565b925050602083013567ffffffffffffffff811115612b1157612b1061243b565b5b612b1d85828601612aac565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b61578082015181840152602081019050612b46565b60008484015250505050565b6000601f19601f8301169050919050565b6000612b8982612b27565b612b938185612b32565b9350612ba3818560208601612b43565b612bac81612b6d565b840191505092915050565b60006040820190508181036000830152612bd18185612b7e565b90508181036020830152612be58184612919565b90509392505050565b612bf78161264b565b8114612c0257600080fd5b50565b600081359050612c1481612bee565b92915050565b60008060408385031215612c3157612c30612436565b5b6000612c3f85828601612c05565b9250506020612c5085828601612c05565b9150509250929050565b600060208284031215612c7057612c6f612436565b5b6000612c7e84828501612c05565b91505092915050565b6000819050919050565b612c9a81612c87565b82525050565b6000604082019050612cb56000830185612c91565b612cc26020830184612a07565b9392505050565b600060c08284031215612cdf57612cde61249e565b5b81905092915050565b60008060408385031215612cff57612cfe612436565b5b6000612d0d85828601612489565b925050602083013567ffffffffffffffff811115612d2e57612d2d61243b565b5b612d3a85828601612cc9565b9150509250929050565b600060208284031215612d5a57612d59612436565b5b6000612d6884828501612489565b91505092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612dae82612b6d565b810181811067ffffffffffffffff82111715612dcd57612dcc612d76565b5b80604052505050565b6000612de061242c565b9050612dec8282612da5565b919050565b600080fd5b600060ff82169050919050565b612e0c81612df6565b8114612e1757600080fd5b50565b600081359050612e2981612e03565b92915050565b600061ffff82169050919050565b612e4681612e2f565b8114612e5157600080fd5b50565b600081359050612e6381612e3d565b92915050565b600060408284031215612e7f57612e7e612d71565b5b612e896040612dd6565b90506000612e9984828501612e1a565b6000830152506020612ead84828501612e54565b60208301525092915050565b6000612ec482612460565b9050919050565b612ed481612eb9565b8114612edf57600080fd5b50565b600081359050612ef181612ecb565b92915050565b600060608284031215612f0d57612f0c612d71565b5b612f176040612dd6565b90506000612f2784828501612e69565b6000830152506040612f3b84828501612ee2565b60208301525092915050565b600060608284031215612f5d57612f5c612436565b5b6000612f6b84828501612ef7565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112612fa057612f9f612f74565b5b80840192508235915067ffffffffffffffff821115612fc257612fc1612f79565b5b60208301925060a082023603831315612fde57612fdd612f7e565b5b509250929050565b60038110612ff357600080fd5b50565b60008135905061300581612fe6565b92915050565b600060a0828403121561302157613020612d71565b5b61302b60a0612dd6565b9050600061303b84828501612ff6565b600083015250602061304f84828501612489565b602083015250604061306384828501612489565b604083015250606061307784828501612489565b606083015250608061308b84828501612c05565b60808301525092915050565b600060a082840312156130ad576130ac612436565b5b60006130bb8482850161300b565b91505092915050565b600080833560016020038436030381126130e1576130e0612f74565b5b80840192508235915067ffffffffffffffff82111561310357613102612f79565b5b60208301925060018202360383131561311f5761311e612f7e565b5b509250929050565b60006020828403121561313d5761313c612436565b5b600061314b84828501612ee2565b91505092915050565b60006131636020840184612e1a565b905092915050565b61317481612df6565b82525050565b60006131896020840184612e54565b905092915050565b61319a81612e2f565b82525050565b604082016131b16000830183613154565b6131be600085018261316b565b506131cc602083018361317a565b6131d96020850182613191565b50505050565b60006040820190506131f460008301846131a0565b92915050565b60008151905061320981612e03565b92915050565b60008151905061321e81612e3d565b92915050565b60006040828403121561323a57613239612d71565b5b6132446040612dd6565b90506000613254848285016131fa565b60008301525060206132688482850161320f565b60208301525092915050565b60008151905061328381612472565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156132ae576132ad612d76565b5b6132b782612b6d565b9050602081019050919050565b60006132d76132d284613293565b612dd6565b9050828152602081018484840111156132f3576132f261328e565b5b6132fe848285612b43565b509392505050565b600082601f83011261331b5761331a613289565b5b815161332b8482602086016132c4565b91505092915050565b60006080828403121561334a57613349612d71565b5b6133546060612dd6565b9050600061336484828501613224565b600083015250604061337884828501613274565b602083015250606082015167ffffffffffffffff81111561339c5761339b612df1565b5b6133a884828501613306565b60408301525092915050565b6000602082840312156133ca576133c9612436565b5b600082015167ffffffffffffffff8111156133e8576133e761243b565b5b6133f484828501613334565b91505092915050565b60006020828403121561341357613412612436565b5b600061342184828501613274565b91505092915050565b6000819050919050565b60006134436020840184612ff6565b905092915050565b600061345a6020840184612489565b905092915050565b60006134716020840184612c05565b905092915050565b60a0820161348a6000830183613434565b613497600085018261262d565b506134a5602083018361344b565b6134b2602085018261263c565b506134c0604083018361344b565b6134cd604085018261263c565b506134db606083018361344b565b6134e8606085018261263c565b506134f66080830183613462565b6135036080850182612655565b50505050565b60006135158383613479565b60a08301905092915050565b600082905092915050565b600060a082019050919050565b600061354583856125a4565b93506135508261342a565b8060005b85811015613589576135668284613521565b6135708882613509565b975061357b8361352c565b925050600181019050613554565b5085925050509392505050565b600060208201905081810360008301526135b1818486613539565b90509392505050565b60006040820190506135cf6000830185612a07565b6135dc6020830184612a07565b9392505050565b6000823560016060038336030381126135ff576135fe612f74565b5b80830191505092915050565b6000808335600160200384360303811261362857613627612f74565b5b80840192508235915067ffffffffffffffff82111561364a57613649612f79565b5b60208301925060208202360383131561366657613665612f7e565b5b509250929050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261369a57613699613678565b5b83810192508235915060208301925067ffffffffffffffff8211156136c2576136c161366e565b5b6020820236038313156136d8576136d7613673565b5b509250929050565b6000819050919050565b6000602082019050919050565b60006137038385612806565b935061370e826136e0565b8060005b8581101561374757613724828461344b565b61372e8882612827565b9750613739836136ea565b925050600181019050613712565b5085925050509392505050565b6000808335600160200384360303811261377157613770613678565b5b83810192508235915060208301925067ffffffffffffffff8211156137995761379861366e565b5b6001820236038313156137af576137ae613673565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b60006137e383856137b7565b93506137f08385846137c8565b6137f983612b6d565b840190509392505050565b600060608301613817600084018461344b565b613824600086018261263c565b50613832602084018461367d565b85830360208701526138458382846136f7565b925050506138566040840184613754565b85830360408701526138698382846137d7565b925050508091505092915050565b600060408201905061388c60008301856127ec565b818103602083015261389e8184613804565b90509392505050565b600067ffffffffffffffff8211156138c2576138c1612d76565b5b602082029050602081019050919050565b600080fd5b6000815190506138e781612fe6565b92915050565b6000815190506138fc81612bee565b92915050565b600060a0828403121561391857613917612d71565b5b61392260a0612dd6565b90506000613932848285016138d8565b600083015250602061394684828501613274565b602083015250604061395a84828501613274565b604083015250606061396e84828501613274565b6060830152506080613982848285016138ed565b60808301525092915050565b60006139a161399c846138a7565b612dd6565b90508083825260208201905060a084028301858111156139c4576139c36138d3565b5b835b818110156139ed57806139d98882613902565b84526020840193505060a0810190506139c6565b5050509392505050565b600082601f830112613a0c57613a0b613289565b5b8151613a1c84826020860161398e565b91505092915050565b600060208284031215613a3b57613a3a612436565b5b600082015167ffffffffffffffff811115613a5957613a5861243b565b5b613a65848285016139f7565b91505092915050565b600060a082019050613a836000830187612a07565b613a9060208301866131a0565b8181036060830152613aa28185613804565b90508181036080830152613ab681846126f1565b905095945050505050565b6000602082019050613ad660008301846127ec565b92915050565b60008115159050919050565b613af181613adc565b8114613afc57600080fd5b50565b600081519050613b0e81613ae8565b92915050565b600060208284031215613b2a57613b29612436565b5b6000613b3884828501613aff565b91505092915050565b6000613b4d8385612b32565b9350613b5a8385846137c8565b613b6383612b6d565b840190509392505050565b6000604082019050613b8360008301866127ec565b8181036020830152613b96818486613b41565b9050949350505050565b600067ffffffffffffffff821115613bbb57613bba612d76565b5b602082029050602081019050919050565b6000613bdf613bda84613ba0565b612dd6565b90508083825260208201905060208402830185811115613c0257613c016138d3565b5b835b81811015613c2b5780613c178882613274565b845260208401935050602081019050613c04565b5050509392505050565b600082601f830112613c4a57613c49613289565b5b8151613c5a848260208601613bcc565b91505092915050565b600060408284031215613c7957613c78612d71565b5b613c836040612dd6565b9050600082015167ffffffffffffffff811115613ca357613ca2612df1565b5b613caf84828501613c35565b600083015250602082015167ffffffffffffffff811115613cd357613cd2612df1565b5b613cdf848285016139f7565b60208301525092915050565b60008060408385031215613d0257613d01612436565b5b6000613d1085828601613274565b925050602083015167ffffffffffffffff811115613d3157613d3061243b565b5b613d3d85828601613c63565b9150509250929050565b600060c082019050613d5c6000830189612a07565b613d6960208301886131a0565b8181036060830152613d7c818688613b41565b9050613d8b60808301856127ec565b81810360a0830152613d9d8184612919565b9050979650505050505050565b600060208284031215613dc057613dbf612436565b5b6000613dce84828501612e1a565b91505092915050565b600060208284031215613ded57613dec612436565b5b6000613dfb84828501612e54565b91505092915050565b6000608082019050613e1960008301856131a0565b613e2660408301846131a0565b9392505050565b600060408284031215613e4357613e42612436565b5b6000613e5184828501612e69565b91505092915050565b60038110613e6757600080fd5b50565b600081519050613e7981613e5a565b92915050565b600060208284031215613e9557613e94612436565b5b6000613ea384828501613e6a565b91505092915050565b613eb581612e2f565b82525050565b6000606082019050613ed060008301866127ec565b613edd6020830185613eac565b8181036040830152613eef8184613804565b9050949350505050565b60008060408385031215613f1057613f0f612436565b5b600083015167ffffffffffffffff811115613f2e57613f2d61243b565b5b613f3a85828601613306565b925050602083015167ffffffffffffffff811115613f5b57613f5a61243b565b5b613f6785828601613c63565b9150509250929050565b6000608082019050613f8660008301876127ec565b613f9360208301866127ec565b613fa06040830185612a07565b8181036060830152613fb28184612b7e565b905095945050505050565b6000606082019050613fd260008301866127ec565b613fdf60208301856127ec565b613fec6040830184612a07565b949350505050565b600060408201905061400960008301856127ec565b61401660208301846127ec565b9392505050565b604082016000820151614033600085018261316b565b5060208201516140466020850182613191565b50505050565b6000614057826129b9565b9050919050565b6140678161404c565b82525050565b6004811061407e5761407d6125c5565b5b50565b600081905061408f8261406d565b919050565b600061409f82614081565b9050919050565b6140af81614094565b82525050565b600060e0820190506140ca600083018961401d565b6140d7604083018861405e565b6140e46060830187612a07565b6140f16080830186612a07565b6140fe60a0830185612a07565b61410b60c08301846140a6565b979650505050505050565b600060808201905061412b600083018661401d565b614138604083018561405e565b6141456060830184612a07565b949350505050565b600060408201905061416260008301856127ec565b81810360208301526141748184612b7e565b90509392505050565b60008160e01c9050919050565b600060033d11156141a95760046000803e6141a660005161417d565b90505b90565b600060443d10614239576141be61242c565b60043d036004823e80513d602482011167ffffffffffffffff821117156141e6575050614239565b808201805167ffffffffffffffff8111156142045750505050614239565b80602083010160043d038501811115614221575050505050614239565b61423082602001850186612da5565b82955050505050505b90565b600081519050919050565b600082825260208201905092915050565b60006142638261423c565b61426d8185614247565b935061427d818560208601612b43565b61428681612b6d565b840191505092915050565b600060208201905081810360008301526142ab8184614258565b905092915050565b60006060820190506142c860008301866127ec565b6142d560208301856127ec565b81810360408301526142e78184612b7e565b9050949350505050565b600082825260208201905092915050565b600061430d826127fb565b61431781856142f1565b935061432283612817565b8060005b8381101561435357815161433a8882612827565b97506143458361283f565b925050600181019050614326565b5085935050505092915050565b6000602082019050818103600083015261437a8184614302565b905092915050565b600060c0820190506143976000830188612a07565b6143a460208301876131a0565b81810360608301526143b68186613804565b905081810360808301526143ca8185612919565b905081810360a08301526143de8184612b7e565b90509695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61441f816143ea565b82525050565b600060208201905061443a6000830184614416565b9291505056fea2646970667358221220c7a837c624f5e5c57da775afff581d83b45e27f34f0b3c91d8d3a475f168a55e64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80639665861a116100715780639665861a1461018e578063ca211f7f146101ac578063d7598122146101ca578063fafc79da146101fb578063fbdc1ef114610217578063fe6c347414610248576100b4565b806322e12c63146100b95780632fb04336146100d55780633c8c01d114610105578063483d209e14610136578063747e5ec114610154578063851d11f814610172575b600080fd5b6100d360048036038101906100ce91906124c2565b610264565b005b6100ef60048036038101906100ea919061253d565b610747565b6040516100fc919061274f565b60405180910390f35b61011f600480360381019061011a9190612790565b610b27565b60405161012d92919061295d565b60405180910390f35b61013e610f13565b60405161014b91906129ec565b60405180910390f35b61015c610f39565b6040516101699190612a16565b60405180910390f35b61018c60048036038101906101879190612a50565b610f5d565b005b6101966111b7565b6040516101a39190612a16565b60405180910390f35b6101b46111db565b6040516101c19190612a16565b60405180910390f35b6101e460048036038101906101df9190612acb565b6111ff565b6040516101f2929190612bb7565b60405180910390f35b61021560048036038101906102109190612c1a565b611a2e565b005b610231600480360381019061022c9190612c5a565b611aa6565b60405161023f929190612ca0565b60405180910390f35b610262600480360381019061025d9190612ce8565b611aca565b005b817fb03cf3d518f6d49560b7f5bece1ccb8fd50ea7370f02f5e5210edba04be3c4f76102908282611d6a565b60006102ae858560000160208101906102a99190612d44565b611e7c565b90506000806000838152602001908152602001600020905060006103ab866020018036038101906102df9190612f47565b61034c888060a001906102f29190612f83565b808060200260200160405190810160405280939291908181526020016000905b8282101561034257848483905060a002018036038101906103339190613097565b81526020019060010190610312565b5050505050611eaf565b8860c0013589806080019061036191906130c4565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506002611edf565b90506103b78382611a2e565b60006103da876020018036038101906103d09190612f47565b8860c00135611f2c565b905043836000018190555080836001018190555060008760200160400160208101906104069190613127565b73ffffffffffffffffffffffffffffffffffffffff16639af3e909896020016000016040518263ffffffff1660e01b815260040161044491906131df565b600060405180830381865afa158015610461573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061048a91906133b4565b905060008860000160208101906104a19190612d44565b73ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f91906133fd565b90506000826020015173ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058691906133fd565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461062b5761062a8a60000160208101906105d19190612d44565b828c80608001906105e291906130c4565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611f69565b5b60008a8060a0019061063d9190612f83565b905011156106c1578a73ffffffffffffffffffffffffffffffffffffffff1663e978afe58b8060a001906106719190612f83565b6040518363ffffffff1660e01b815260040161068e929190613596565b600060405180830381600087803b1580156106a857600080fd5b505af11580156106bc573d6000803e3d6000fd5b505050505b8960000160208101906106d49190612d44565b73ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167f24565610ddf61ee73e8501d7f0454657c71f5944882f5c586d7246bf43e13cda87876040516107329291906135ba565b60405180910390a35050505050505050505050565b606060006107768484806060019061075f91906135e3565b60000160208101906107719190612d44565b611e7c565b9050600080600083815260200190815260200160002090506000610813856000018036038101906107a79190612f47565b61080e8780606001906107ba91906135e3565b80602001906107c9919061360b565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050612202565b611f2c565b905080826001015414610863578160010154816040517f73a4eaa000000000000000000000000000000000000000000000000000000000815260040161085a9291906135ba565b60405180910390fd5b600085600001604001602081019061087b9190613127565b73ffffffffffffffffffffffffffffffffffffffff16639af3e909876000016000016040518263ffffffff1660e01b81526004016108b991906131df565b600060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108ff91906133b4565b9050806020015173ffffffffffffffffffffffffffffffffffffffff16639cb0a1248888806060019061093291906135e3565b6040518363ffffffff1660e01b815260040161094f929190613877565b6000604051808303816000875af115801561096e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109979190613a25565b945060006109f6876000018036038101906109b29190612f47565b6109bb88611eaf565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56360001b604051806020016040528060008152506003611edf565b90508360020160008281526020019081526020016000205484600001541015610a5657806040517f2acda5b8000000000000000000000000000000000000000000000000000000008152600401610a4d9190612a16565b60405180910390fd5b4384600201600083815260200190815260200160002081905550866000016040016020810190610a869190613127565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f5fdcd271ff15db84cbc94365956df5504f6d756e111654144648433c11a44530848b6000016000018c8060600190610b0391906135e3565b8c604051610b149493929190613a6e565b60405180910390a4505050505092915050565b6000610b31612412565b6000836000016040016020810190610b499190613127565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f29ee125826040518263ffffffff1660e01b8152600401610ba69190613ac1565b602060405180830381865afa158015610bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be79190613b14565b610c1d576040517f0d4feab400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16639af3e909866000016000016040518263ffffffff1660e01b8152600401610c5e91906131df565b600060405180830381865afa158015610c7b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ca491906133b4565b9050806020015173ffffffffffffffffffffffffffffffffffffffff1663f10832f187878060600190610cd791906130c4565b6040518463ffffffff1660e01b8152600401610cf593929190613b6e565b6000604051808303816000875af1158015610d14573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d3d9190613ceb565b80945081955050506000610d518786611e7c565b90506000610d9d87600001803603810190610d6c9190612f47565b610d798760200151611eaf565b610d868860000151612202565b604051806020016040528060008152506001611edf565b9050600080600084815260200190815260200160002090506000801b816001015414610df5576040517fd2e44eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060020160008381526020019081526020016000205481600001541015610e5357816040517f2acda5b8000000000000000000000000000000000000000000000000000000008152600401610e4a9190612a16565b60405180910390fd5b43816002016000848152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8ea69cee01fd9fc24e6b9614ea0896c5a1eac8fd8aba383285248cd0e1d8503a858c6000016000018d8060600190610eeb91906130c4565b8e8e604051610eff96959493929190613d47565b60405180910390a450505050509250929050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7ff796b89427c6552c1ac705d833bfb7909f8eb5ce502c1db97f85fabc6ad8354881565b817fbd4dbacf5ba6d9793f600403b3293d6ecd695fcc703a2b5edcf245f45fda6cfa610f898282611d6a565b6000610fa785856000016020810190610fa29190612d44565b611e7c565b905060008060008381526020019081526020016000209050600061108086602001803603810190610fd89190612f47565b611045888060800190610feb9190612f83565b808060200260200160405190810160405280939291908181526020016000905b8282101561103b57848483905060a0020180360381019061102c9190613097565b8152602001906001019061100b565b5050505050611eaf565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56360001b604051806020016040528060008152506003611edf565b905061108c8382611a2e565b4382600001819055506000801b826001018190555060008680608001906110b39190612f83565b90501115611137578673ffffffffffffffffffffffffffffffffffffffff1663e978afe58780608001906110e79190612f83565b6040518363ffffffff1660e01b8152600401611104929190613596565b600060405180830381600087803b15801561111e57600080fd5b505af1158015611132573d6000803e3d6000fd5b505050505b85600001602081019061114a9190612d44565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fa0e5d4ce6420a0e7a5f0ac10c47b3a672fb661c11f5609bb21b68644d81e17aa836040516111a69190612a16565b60405180910390a350505050505050565b7fb03cf3d518f6d49560b7f5bece1ccb8fd50ea7370f02f5e5210edba04be3c4f781565b7fbd4dbacf5ba6d9793f600403b3293d6ecd695fcc703a2b5edcf245f45fda6cfa81565b6060611209612412565b82604001600001602081019061121f9190613daa565b60ff168360000160000160208101906112389190613daa565b60ff1614158061127a57508260400160200160208101906112599190613dd7565b61ffff168360000160200160208101906112739190613dd7565b61ffff1610155b156112c45782600001836040016040517f80d4e9070000000000000000000000000000000000000000000000000000000081526004016112bb929190613e04565b60405180910390fd5b60006112f185858060a001906112da91906135e3565b60000160208101906112ec9190612d44565b611e7c565b9050600080600083815260200190815260200160002090506000611372868060a0019061131e91906135e3565b806020019061132d919061360b565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050612202565b905060006113cf6040518060400160405280896000018036038101906113989190613e2d565b81526020018960800160208101906113b09190613127565b73ffffffffffffffffffffffffffffffffffffffff1681525083611f2c565b90508083600101541461141f578260010154816040517f73a4eaa00000000000000000000000000000000000000000000000000000000081526004016114169291906135ba565b60405180910390fd5b60008760800160208101906114349190613127565b73ffffffffffffffffffffffffffffffffffffffff16639af3e909896000016040518263ffffffff1660e01b815260040161146f91906131df565b600060405180830381865afa15801561148c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114b591906133b4565b905060008860800160208101906114cc9190613127565b73ffffffffffffffffffffffffffffffffffffffff16639af3e9098a6040016040518263ffffffff1660e01b815260040161150791906131df565b600060405180830381865afa158015611524573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061154d91906133b4565b90506000816020015173ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff16036116895761161b60405180604001604052808c6040018036038101906115ae9190613e2d565b81526020018c60800160208101906115c69190613127565b73ffffffffffffffffffffffffffffffffffffffff168152507f569e75fc77c1a856f6daaf9e69d8a9566ca34aa47f9133711ce065a571af0cfd60001b87604051806020016040528060008152506002611edf565b9050898060a0019061162d91906135e3565b806020019061163c919061360b565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050886000018190525061199b565b6116f37f41de6830000000000000000000000000000000000000000000000000000000008b8060a001906116bd91906135e3565b60000160208101906116cf9190612d44565b73ffffffffffffffffffffffffffffffffffffffff1661223290919063ffffffff16565b61175557898060a0019061170791906135e3565b60000160208101906117199190612d44565b6040517f8174ff5500000000000000000000000000000000000000000000000000000000815260040161174c9190613ac1565b60405180910390fd5b60006002811115611769576117686125c5565b5b8a8060a0019061177991906135e3565b600001602081019061178b9190612d44565b73ffffffffffffffffffffffffffffffffffffffff166341de68306040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f99190613e7f565b600281111561180b5761180a6125c5565b5b1461186e57898060a0019061182091906135e3565b60000160208101906118329190612d44565b6040517fe4356c940000000000000000000000000000000000000000000000000000000081526004016118659190613ac1565b60405180910390fd5b816020015173ffffffffffffffffffffffffffffffffffffffff1663a8a9c29e8c8c60000160200160208101906118a59190613dd7565b8d8060a001906118b591906135e3565b6040518463ffffffff1660e01b81526004016118d393929190613ebb565b6000604051808303816000875af11580156118f2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061191b9190613ef9565b809950819a50505061199860405180604001604052808c6040018036038101906119459190613e2d565b81526020018c608001602081019061195d9190613127565b73ffffffffffffffffffffffffffffffffffffffff168152506119838a60200151611eaf565b6119908b60000151612202565b8c6002611edf565b90505b85600201600082815260200190815260200160002054866000015410156119f957806040517f2acda5b80000000000000000000000000000000000000000000000000000000081526004016119f09190612a16565b60405180910390fd5b4386600201600083815260200190815260200160002081905550611a208b828c8b8d612257565b505050505050509250929050565b6000806000848152602001908152602001600020905080600201600083815260200190815260200160002054816000015410611aa157816040517f59730ce6000000000000000000000000000000000000000000000000000000008152600401611a989190612a16565b60405180910390fd5b505050565b60006020528060005260406000206000915090508060000154908060010154905082565b817ff796b89427c6552c1ac705d833bfb7909f8eb5ce502c1db97f85fabc6ad83548611af68282611d6a565b6000611b1485856060016020810190611b0f9190612d44565b611e7c565b9050600080600083815260200190815260200160002090506000611bce86600001803603810190611b459190612f47565b611bb2888060800190611b589190612f83565b808060200260200160405190810160405280939291908181526020016000905b82821015611ba857848483905060a00201803603810190611b999190613097565b81526020019060010190611b78565b5050505050611eaf565b8860a00135604051806020016040528060008152506001611edf565b90506000801b826001015414611c10576040517fd2e44eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611c1a8382611a2e565b6000611c3d87600001803603810190611c339190612f47565b8860a00135611f2c565b90508083600101819055504383600001819055506000878060800190611c639190612f83565b90501115611ce7578773ffffffffffffffffffffffffffffffffffffffff1663e978afe5888060800190611c979190612f83565b6040518363ffffffff1660e01b8152600401611cb4929190613596565b600060405180830381600087803b158015611cce57600080fd5b505af1158015611ce2573d6000803e3d6000fd5b505050505b866060016020810190611cfa9190612d44565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f74e616c7264536b98a5ec234d051ae6ce1305bf05c85f9ddc112364440ccf1298484604051611d589291906135ba565b60405180910390a35050505050505050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015611e3257508173ffffffffffffffffffffffffffffffffffffffff1663fdef9106303384604051806020016040528060008152506040518563ffffffff1660e01b8152600401611def9493929190613f71565b602060405180830381865afa158015611e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e309190613b14565b155b15611e78578133826040517f15d68ee0000000000000000000000000000000000000000000000000000000008152600401611e6f93929190613fbd565b60405180910390fd5b5050565b60008282604051602001611e91929190613ff4565b60405160208183030381529060405280519060200120905092915050565b600081604051602001611ec2919061274f565b604051602081830303815290604052805190602001209050919050565b6000856000015186602001518686868051906020012086604051602001611f0b969594939291906140b5565b60405160208183030381529060405280519060200120905095945050505050565b60008260000151836020015183604051602001611f4b93929190614116565b60405160208183030381529060405280519060200120905092915050565b6000815111156120bb578273ffffffffffffffffffffffffffffffffffffffff16634f1ef28683836040518363ffffffff1660e01b8152600401611fae92919061414d565b600060405180830381600087803b158015611fc857600080fd5b505af1925050508015611fd9575060015b6120b657611fe561418a565b806308c379a0036120415750611ff96141ac565b806120045750612043565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120389190614291565b60405180910390fd5b505b3d806000811461206f576040519150601f19603f3d011682016040523d82523d6000602084013e612074565b606091505b508383836040517f96e9e31b0000000000000000000000000000000000000000000000000000000081526004016120ad939291906142b3565b60405180910390fd5b6121fd565b8273ffffffffffffffffffffffffffffffffffffffff16633659cfe6836040518263ffffffff1660e01b81526004016120f49190613ac1565b600060405180830381600087803b15801561210e57600080fd5b505af192505050801561211f575060015b6121fc5761212b61418a565b806308c379a003612187575061213f6141ac565b8061214a5750612189565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217e9190614291565b60405180910390fd5b505b3d80600081146121b5576040519150601f19603f3d011682016040523d82523d6000602084013e6121ba565b606091505b508383836040517f96e9e31b0000000000000000000000000000000000000000000000000000000081526004016121f3939291906142b3565b60405180910390fd5b5b505050565b6000816040516020016122159190614360565b604051602081830303815290604052805190602001209050919050565b600061223d83612306565b801561224f575061224e8383612353565b5b905092915050565b82608001602081019061226a9190613127565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3686138d92841c8549b2fe39fda23881fef6aa9b347352114c0869bf5af3e3f28787604001888060a001906122e491906135e3565b88886040516122f7959493929190614382565b60405180910390a45050505050565b6000612332827f01ffc9a700000000000000000000000000000000000000000000000000000000612353565b801561234c575061234a8263ffffffff60e01b612353565b155b9050919050565b6000806301ffc9a760e01b8360405160240161236f9190614425565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000602060008551602087018a617530fa92503d915060005190508280156123fa575060208210155b80156124065750600081115b94505050505092915050565b604051806040016040528060608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061246b82612440565b9050919050565b61247b81612460565b811461248657600080fd5b50565b60008135905061249881612472565b92915050565b600080fd5b600060e082840312156124b9576124b861249e565b5b81905092915050565b600080604083850312156124d9576124d8612436565b5b60006124e785828601612489565b925050602083013567ffffffffffffffff8111156125085761250761243b565b5b612514858286016124a3565b9150509250929050565b6000608082840312156125345761253361249e565b5b81905092915050565b6000806040838503121561255457612553612436565b5b600061256285828601612489565b925050602083013567ffffffffffffffff8111156125835761258261243b565b5b61258f8582860161251e565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110612605576126046125c5565b5b50565b6000819050612616826125f4565b919050565b600061262682612608565b9050919050565b6126368161261b565b82525050565b61264581612460565b82525050565b6000819050919050565b61265e8161264b565b82525050565b60a08201600082015161267a600085018261262d565b50602082015161268d602085018261263c565b5060408201516126a0604085018261263c565b5060608201516126b3606085018261263c565b5060808201516126c66080850182612655565b50505050565b60006126d88383612664565b60a08301905092915050565b6000602082019050919050565b60006126fc82612599565b61270681856125a4565b9350612711836125b5565b8060005b8381101561274257815161272988826126cc565b9750612734836126e4565b925050600181019050612715565b5085935050505092915050565b6000602082019050818103600083015261276981846126f1565b905092915050565b6000608082840312156127875761278661249e565b5b81905092915050565b600080604083850312156127a7576127a6612436565b5b60006127b585828601612489565b925050602083013567ffffffffffffffff8111156127d6576127d561243b565b5b6127e285828601612771565b9150509250929050565b6127f581612460565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612833838361263c565b60208301905092915050565b6000602082019050919050565b6000612857826127fb565b6128618185612806565b935061286c83612817565b8060005b8381101561289d5781516128848882612827565b975061288f8361283f565b925050600181019050612870565b5085935050505092915050565b600082825260208201905092915050565b60006128c682612599565b6128d081856128aa565b93506128db836125b5565b8060005b8381101561290c5781516128f388826126cc565b97506128fe836126e4565b9250506001810190506128df565b5085935050505092915050565b60006040830160008301518482036000860152612936828261284c565b9150506020830151848203602086015261295082826128bb565b9150508091505092915050565b600060408201905061297260008301856127ec565b81810360208301526129848184612919565b90509392505050565b6000819050919050565b60006129b26129ad6129a884612440565b61298d565b612440565b9050919050565b60006129c482612997565b9050919050565b60006129d6826129b9565b9050919050565b6129e6816129cb565b82525050565b6000602082019050612a0160008301846129dd565b92915050565b612a108161264b565b82525050565b6000602082019050612a2b6000830184612a07565b92915050565b600060a08284031215612a4757612a4661249e565b5b81905092915050565b60008060408385031215612a6757612a66612436565b5b6000612a7585828601612489565b925050602083013567ffffffffffffffff811115612a9657612a9561243b565b5b612aa285828601612a31565b9150509250929050565b600060c08284031215612ac257612ac161249e565b5b81905092915050565b60008060408385031215612ae257612ae1612436565b5b6000612af085828601612489565b925050602083013567ffffffffffffffff811115612b1157612b1061243b565b5b612b1d85828601612aac565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b61578082015181840152602081019050612b46565b60008484015250505050565b6000601f19601f8301169050919050565b6000612b8982612b27565b612b938185612b32565b9350612ba3818560208601612b43565b612bac81612b6d565b840191505092915050565b60006040820190508181036000830152612bd18185612b7e565b90508181036020830152612be58184612919565b90509392505050565b612bf78161264b565b8114612c0257600080fd5b50565b600081359050612c1481612bee565b92915050565b60008060408385031215612c3157612c30612436565b5b6000612c3f85828601612c05565b9250506020612c5085828601612c05565b9150509250929050565b600060208284031215612c7057612c6f612436565b5b6000612c7e84828501612c05565b91505092915050565b6000819050919050565b612c9a81612c87565b82525050565b6000604082019050612cb56000830185612c91565b612cc26020830184612a07565b9392505050565b600060c08284031215612cdf57612cde61249e565b5b81905092915050565b60008060408385031215612cff57612cfe612436565b5b6000612d0d85828601612489565b925050602083013567ffffffffffffffff811115612d2e57612d2d61243b565b5b612d3a85828601612cc9565b9150509250929050565b600060208284031215612d5a57612d59612436565b5b6000612d6884828501612489565b91505092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612dae82612b6d565b810181811067ffffffffffffffff82111715612dcd57612dcc612d76565b5b80604052505050565b6000612de061242c565b9050612dec8282612da5565b919050565b600080fd5b600060ff82169050919050565b612e0c81612df6565b8114612e1757600080fd5b50565b600081359050612e2981612e03565b92915050565b600061ffff82169050919050565b612e4681612e2f565b8114612e5157600080fd5b50565b600081359050612e6381612e3d565b92915050565b600060408284031215612e7f57612e7e612d71565b5b612e896040612dd6565b90506000612e9984828501612e1a565b6000830152506020612ead84828501612e54565b60208301525092915050565b6000612ec482612460565b9050919050565b612ed481612eb9565b8114612edf57600080fd5b50565b600081359050612ef181612ecb565b92915050565b600060608284031215612f0d57612f0c612d71565b5b612f176040612dd6565b90506000612f2784828501612e69565b6000830152506040612f3b84828501612ee2565b60208301525092915050565b600060608284031215612f5d57612f5c612436565b5b6000612f6b84828501612ef7565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112612fa057612f9f612f74565b5b80840192508235915067ffffffffffffffff821115612fc257612fc1612f79565b5b60208301925060a082023603831315612fde57612fdd612f7e565b5b509250929050565b60038110612ff357600080fd5b50565b60008135905061300581612fe6565b92915050565b600060a0828403121561302157613020612d71565b5b61302b60a0612dd6565b9050600061303b84828501612ff6565b600083015250602061304f84828501612489565b602083015250604061306384828501612489565b604083015250606061307784828501612489565b606083015250608061308b84828501612c05565b60808301525092915050565b600060a082840312156130ad576130ac612436565b5b60006130bb8482850161300b565b91505092915050565b600080833560016020038436030381126130e1576130e0612f74565b5b80840192508235915067ffffffffffffffff82111561310357613102612f79565b5b60208301925060018202360383131561311f5761311e612f7e565b5b509250929050565b60006020828403121561313d5761313c612436565b5b600061314b84828501612ee2565b91505092915050565b60006131636020840184612e1a565b905092915050565b61317481612df6565b82525050565b60006131896020840184612e54565b905092915050565b61319a81612e2f565b82525050565b604082016131b16000830183613154565b6131be600085018261316b565b506131cc602083018361317a565b6131d96020850182613191565b50505050565b60006040820190506131f460008301846131a0565b92915050565b60008151905061320981612e03565b92915050565b60008151905061321e81612e3d565b92915050565b60006040828403121561323a57613239612d71565b5b6132446040612dd6565b90506000613254848285016131fa565b60008301525060206132688482850161320f565b60208301525092915050565b60008151905061328381612472565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156132ae576132ad612d76565b5b6132b782612b6d565b9050602081019050919050565b60006132d76132d284613293565b612dd6565b9050828152602081018484840111156132f3576132f261328e565b5b6132fe848285612b43565b509392505050565b600082601f83011261331b5761331a613289565b5b815161332b8482602086016132c4565b91505092915050565b60006080828403121561334a57613349612d71565b5b6133546060612dd6565b9050600061336484828501613224565b600083015250604061337884828501613274565b602083015250606082015167ffffffffffffffff81111561339c5761339b612df1565b5b6133a884828501613306565b60408301525092915050565b6000602082840312156133ca576133c9612436565b5b600082015167ffffffffffffffff8111156133e8576133e761243b565b5b6133f484828501613334565b91505092915050565b60006020828403121561341357613412612436565b5b600061342184828501613274565b91505092915050565b6000819050919050565b60006134436020840184612ff6565b905092915050565b600061345a6020840184612489565b905092915050565b60006134716020840184612c05565b905092915050565b60a0820161348a6000830183613434565b613497600085018261262d565b506134a5602083018361344b565b6134b2602085018261263c565b506134c0604083018361344b565b6134cd604085018261263c565b506134db606083018361344b565b6134e8606085018261263c565b506134f66080830183613462565b6135036080850182612655565b50505050565b60006135158383613479565b60a08301905092915050565b600082905092915050565b600060a082019050919050565b600061354583856125a4565b93506135508261342a565b8060005b85811015613589576135668284613521565b6135708882613509565b975061357b8361352c565b925050600181019050613554565b5085925050509392505050565b600060208201905081810360008301526135b1818486613539565b90509392505050565b60006040820190506135cf6000830185612a07565b6135dc6020830184612a07565b9392505050565b6000823560016060038336030381126135ff576135fe612f74565b5b80830191505092915050565b6000808335600160200384360303811261362857613627612f74565b5b80840192508235915067ffffffffffffffff82111561364a57613649612f79565b5b60208301925060208202360383131561366657613665612f7e565b5b509250929050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261369a57613699613678565b5b83810192508235915060208301925067ffffffffffffffff8211156136c2576136c161366e565b5b6020820236038313156136d8576136d7613673565b5b509250929050565b6000819050919050565b6000602082019050919050565b60006137038385612806565b935061370e826136e0565b8060005b8581101561374757613724828461344b565b61372e8882612827565b9750613739836136ea565b925050600181019050613712565b5085925050509392505050565b6000808335600160200384360303811261377157613770613678565b5b83810192508235915060208301925067ffffffffffffffff8211156137995761379861366e565b5b6001820236038313156137af576137ae613673565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b60006137e383856137b7565b93506137f08385846137c8565b6137f983612b6d565b840190509392505050565b600060608301613817600084018461344b565b613824600086018261263c565b50613832602084018461367d565b85830360208701526138458382846136f7565b925050506138566040840184613754565b85830360408701526138698382846137d7565b925050508091505092915050565b600060408201905061388c60008301856127ec565b818103602083015261389e8184613804565b90509392505050565b600067ffffffffffffffff8211156138c2576138c1612d76565b5b602082029050602081019050919050565b600080fd5b6000815190506138e781612fe6565b92915050565b6000815190506138fc81612bee565b92915050565b600060a0828403121561391857613917612d71565b5b61392260a0612dd6565b90506000613932848285016138d8565b600083015250602061394684828501613274565b602083015250604061395a84828501613274565b604083015250606061396e84828501613274565b6060830152506080613982848285016138ed565b60808301525092915050565b60006139a161399c846138a7565b612dd6565b90508083825260208201905060a084028301858111156139c4576139c36138d3565b5b835b818110156139ed57806139d98882613902565b84526020840193505060a0810190506139c6565b5050509392505050565b600082601f830112613a0c57613a0b613289565b5b8151613a1c84826020860161398e565b91505092915050565b600060208284031215613a3b57613a3a612436565b5b600082015167ffffffffffffffff811115613a5957613a5861243b565b5b613a65848285016139f7565b91505092915050565b600060a082019050613a836000830187612a07565b613a9060208301866131a0565b8181036060830152613aa28185613804565b90508181036080830152613ab681846126f1565b905095945050505050565b6000602082019050613ad660008301846127ec565b92915050565b60008115159050919050565b613af181613adc565b8114613afc57600080fd5b50565b600081519050613b0e81613ae8565b92915050565b600060208284031215613b2a57613b29612436565b5b6000613b3884828501613aff565b91505092915050565b6000613b4d8385612b32565b9350613b5a8385846137c8565b613b6383612b6d565b840190509392505050565b6000604082019050613b8360008301866127ec565b8181036020830152613b96818486613b41565b9050949350505050565b600067ffffffffffffffff821115613bbb57613bba612d76565b5b602082029050602081019050919050565b6000613bdf613bda84613ba0565b612dd6565b90508083825260208201905060208402830185811115613c0257613c016138d3565b5b835b81811015613c2b5780613c178882613274565b845260208401935050602081019050613c04565b5050509392505050565b600082601f830112613c4a57613c49613289565b5b8151613c5a848260208601613bcc565b91505092915050565b600060408284031215613c7957613c78612d71565b5b613c836040612dd6565b9050600082015167ffffffffffffffff811115613ca357613ca2612df1565b5b613caf84828501613c35565b600083015250602082015167ffffffffffffffff811115613cd357613cd2612df1565b5b613cdf848285016139f7565b60208301525092915050565b60008060408385031215613d0257613d01612436565b5b6000613d1085828601613274565b925050602083015167ffffffffffffffff811115613d3157613d3061243b565b5b613d3d85828601613c63565b9150509250929050565b600060c082019050613d5c6000830189612a07565b613d6960208301886131a0565b8181036060830152613d7c818688613b41565b9050613d8b60808301856127ec565b81810360a0830152613d9d8184612919565b9050979650505050505050565b600060208284031215613dc057613dbf612436565b5b6000613dce84828501612e1a565b91505092915050565b600060208284031215613ded57613dec612436565b5b6000613dfb84828501612e54565b91505092915050565b6000608082019050613e1960008301856131a0565b613e2660408301846131a0565b9392505050565b600060408284031215613e4357613e42612436565b5b6000613e5184828501612e69565b91505092915050565b60038110613e6757600080fd5b50565b600081519050613e7981613e5a565b92915050565b600060208284031215613e9557613e94612436565b5b6000613ea384828501613e6a565b91505092915050565b613eb581612e2f565b82525050565b6000606082019050613ed060008301866127ec565b613edd6020830185613eac565b8181036040830152613eef8184613804565b9050949350505050565b60008060408385031215613f1057613f0f612436565b5b600083015167ffffffffffffffff811115613f2e57613f2d61243b565b5b613f3a85828601613306565b925050602083015167ffffffffffffffff811115613f5b57613f5a61243b565b5b613f6785828601613c63565b9150509250929050565b6000608082019050613f8660008301876127ec565b613f9360208301866127ec565b613fa06040830185612a07565b8181036060830152613fb28184612b7e565b905095945050505050565b6000606082019050613fd260008301866127ec565b613fdf60208301856127ec565b613fec6040830184612a07565b949350505050565b600060408201905061400960008301856127ec565b61401660208301846127ec565b9392505050565b604082016000820151614033600085018261316b565b5060208201516140466020850182613191565b50505050565b6000614057826129b9565b9050919050565b6140678161404c565b82525050565b6004811061407e5761407d6125c5565b5b50565b600081905061408f8261406d565b919050565b600061409f82614081565b9050919050565b6140af81614094565b82525050565b600060e0820190506140ca600083018961401d565b6140d7604083018861405e565b6140e46060830187612a07565b6140f16080830186612a07565b6140fe60a0830185612a07565b61410b60c08301846140a6565b979650505050505050565b600060808201905061412b600083018661401d565b614138604083018561405e565b6141456060830184612a07565b949350505050565b600060408201905061416260008301856127ec565b81810360208301526141748184612b7e565b90509392505050565b60008160e01c9050919050565b600060033d11156141a95760046000803e6141a660005161417d565b90505b90565b600060443d10614239576141be61242c565b60043d036004823e80513d602482011167ffffffffffffffff821117156141e6575050614239565b808201805167ffffffffffffffff8111156142045750505050614239565b80602083010160043d038501811115614221575050505050614239565b61423082602001850186612da5565b82955050505050505b90565b600081519050919050565b600082825260208201905092915050565b60006142638261423c565b61426d8185614247565b935061427d818560208601612b43565b61428681612b6d565b840191505092915050565b600060208201905081810360008301526142ab8184614258565b905092915050565b60006060820190506142c860008301866127ec565b6142d560208301856127ec565b81810360408301526142e78184612b7e565b9050949350505050565b600082825260208201905092915050565b600061430d826127fb565b61431781856142f1565b935061432283612817565b8060005b8381101561435357815161433a8882612827565b97506143458361283f565b925050600181019050614326565b5085935050505092915050565b6000602082019050818103600083015261437a8184614302565b905092915050565b600060c0820190506143976000830188612a07565b6143a460208301876131a0565b81810360608301526143b68186613804565b905081810360808301526143ca8185612919565b905081810360a08301526143de8184612b7e565b90509695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61441f816143ea565b82525050565b600060208201905061443a6000830184614416565b9291505056fea2646970667358221220c7a837c624f5e5c57da775afff581d83b45e27f34f0b3c91d8d3a475f168a55e64736f6c63430008110033",
  "devdoc": {
    "details": "This contract is temporarily granted the `ROOT_PERMISSION_ID` permission on the applying DAO and therefore is highly security critical.",
    "errors": {
      "IPluginNotSupported(address)": [
        {
          "params": {
            "plugin": "The address of the contract."
          }
        }
      ],
      "InvalidAppliedSetupId(bytes32,bytes32)": [
        {
          "params": {
            "appliedSetupId": "The applied setup ID obtained from the data in the supplied setup payload.",
            "currentAppliedSetupId": "The current applied setup ID with which the data in the supplied payload must match."
          }
        }
      ],
      "InvalidUpdateVersion((uint8,uint16),(uint8,uint16))": [
        {
          "params": {
            "currentVersionTag": "The tag of the current version to update from.",
            "newVersionTag": "The tag of the new version to update to."
          }
        }
      ],
      "PluginNonupgradeable(address)": [
        {
          "params": {
            "plugin": "The address of the plugin contract."
          }
        }
      ],
      "PluginProxyUpgradeFailed(address,address,bytes)": [
        {
          "params": {
            "implementation": "The address of the implementation contract.",
            "initData": "The initialization data to be passed to the upgradeable plugin contract via `upgradeToAndCall`.",
            "proxy": "The address of the proxy."
          }
        }
      ],
      "SetupAlreadyPrepared(bytes32)": [
        {
          "params": {
            "preparedSetupId": "The prepared setup ID."
          }
        }
      ],
      "SetupApplicationUnauthorized(address,address,bytes32)": [
        {
          "details": "This is thrown if the `APPLY_INSTALLATION_PERMISSION_ID`, `APPLY_UPDATE_PERMISSION_ID`, or APPLY_UNINSTALLATION_PERMISSION_ID is missing.",
          "params": {
            "caller": "The address (EOA or contract) that requested the application of a setup on the associated DAO.",
            "dao": "The address of the DAO to which the plugin belongs.",
            "permissionId": "The permission identifier."
          }
        }
      ],
      "SetupNotApplicable(bytes32)": [
        {
          "params": {
            "preparedSetupId": "The prepared setup ID."
          }
        }
      ]
    },
    "events": {
      "InstallationApplied(address,address,bytes32,bytes32)": {
        "params": {
          "appliedSetupId": "The applied setup ID.",
          "dao": "The address of the DAO to which the plugin belongs.",
          "plugin": "The address of the plugin contract.",
          "preparedSetupId": "The prepared setup ID."
        }
      },
      "InstallationPrepared(address,address,bytes32,address,(uint8,uint16),bytes,address,(address[],(uint8,address,address,address,bytes32)[]))": {
        "params": {
          "dao": "The address of the DAO to which the plugin belongs.",
          "data": "The bytes-encoded data containing the input parameters for the preparation as specified in the corresponding ABI on the version's metadata.",
          "plugin": "The address of the plugin contract.",
          "pluginSetupRepo": "The repository storing the `PluginSetup` contracts of all versions of a plugin.",
          "preparedSetupData": "The deployed plugin's relevant data which consists of helpers and permissions.",
          "preparedSetupId": "The prepared setup ID obtained from the supplied data.",
          "sender": "The sender that prepared the plugin installation.",
          "versionTag": "The version tag of the plugin setup of the prepared installation."
        }
      },
      "UninstallationApplied(address,address,bytes32)": {
        "params": {
          "dao": "The address of the DAO to which the plugin belongs.",
          "plugin": "The address of the plugin contract.",
          "preparedSetupId": "The prepared setup ID."
        }
      },
      "UninstallationPrepared(address,address,bytes32,address,(uint8,uint16),(address,address[],bytes),(uint8,address,address,address,bytes32)[])": {
        "params": {
          "dao": "The address of the DAO to which the plugin belongs.",
          "permissions": "The list of multi-targeted permission operations to be applied to the installing DAO.",
          "pluginSetupRepo": "The repository storing the `PluginSetup` contracts of all versions of a plugin.",
          "preparedSetupId": "The prepared setup ID.",
          "sender": "The sender that prepared the plugin uninstallation.",
          "setupPayload": "The payload containing the plugin and helper contract addresses deployed in a preparation step as well as optional data to be consumed by the plugin setup.",
          "versionTag": "The version tag of the plugin to used for install preparation."
        }
      },
      "UpdateApplied(address,address,bytes32,bytes32)": {
        "params": {
          "appliedSetupId": "The applied setup ID.",
          "dao": "The address of the DAO to which the plugin belongs.",
          "plugin": "The address of the plugin contract.",
          "preparedSetupId": "The prepared setup ID."
        }
      },
      "UpdatePrepared(address,address,bytes32,address,(uint8,uint16),(address,address[],bytes),(address[],(uint8,address,address,address,bytes32)[]),bytes)": {
        "params": {
          "dao": "The address of the DAO to which the plugin belongs.",
          "initData": "The initialization data to be passed to the upgradeable plugin contract.",
          "pluginSetupRepo": "The repository storing the `PluginSetup` contracts of all versions of a plugin.",
          "preparedSetupData": "The deployed plugin's relevant data which consists of helpers and permissions.",
          "preparedSetupId": "The prepared setup ID.",
          "sender": "The sender that prepared the plugin update.",
          "setupPayload": "The payload containing the plugin and helper contract addresses deployed in a preparation step as well as optional data to be consumed by the plugin setup.",
          "versionTag": "The version tag of the plugin setup of the prepared update."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "applyInstallation(address,(((uint8,uint16),address),address,(uint8,address,address,address,bytes32)[],bytes32))": {
        "params": {
          "_dao": "The address of the installing DAO.",
          "_params": "The struct containing the parameters for the `applyInstallation` function."
        }
      },
      "applyUninstallation(address,(address,((uint8,uint16),address),(uint8,address,address,address,bytes32)[]))": {
        "details": "The list of `_params.setupPayload.currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which the uninstallation was prepared for.",
        "params": {
          "_dao": "The address of the installing DAO.",
          "_params": "The struct containing the parameters for the `applyUninstallation` function."
        }
      },
      "applyUpdate(address,(address,((uint8,uint16),address),bytes,(uint8,address,address,address,bytes32)[],bytes32))": {
        "params": {
          "_dao": "The address of the updating DAO.",
          "_params": "The struct containing the parameters for the `applyInstallation` function."
        }
      },
      "constructor": {
        "params": {
          "_repoRegistry": "The plugin repo registry contract."
        }
      },
      "prepareInstallation(address,(((uint8,uint16),address),bytes))": {
        "params": {
          "_dao": "The address of the installing DAO.",
          "_params": "The struct containing the parameters for the `prepareInstallation` function."
        },
        "returns": {
          "plugin": "The prepared plugin contract address.",
          "preparedSetupData": "The data struct containing the array of helper contracts and permissions that the setup has prepared."
        }
      },
      "prepareUninstallation(address,(((uint8,uint16),address),(address,address[],bytes)))": {
        "details": "The list of `_params.setupPayload.currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which the uninstallation was prepared for.",
        "params": {
          "_dao": "The address of the installing DAO.",
          "_params": "The struct containing the parameters for the `prepareUninstallation` function."
        },
        "returns": {
          "permissions": "The list of multi-targeted permission operations to be applied to the uninstalling DAO."
        }
      },
      "prepareUpdate(address,((uint8,uint16),(uint8,uint16),address,(address,address[],bytes)))": {
        "details": "The list of `_params.setupPayload.currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which the update is prepared for.",
        "params": {
          "_dao": "The address of the DAO For which preparation of update happens.",
          "_params": "The struct containing the parameters for the `prepareUpdate` function."
        },
        "returns": {
          "initData": "The initialization data to be passed to upgradeable contracts when the update is applied",
          "preparedSetupData": "The data struct containing the array of helper contracts and permissions that the setup has prepared."
        }
      },
      "validatePreparedSetupId(bytes32,bytes32)": {
        "details": "If the block number stored in `states[pluginInstallationId].blockNumber` exceeds the one stored in `pluginState.preparedSetupIdToBlockNumber[preparedSetupId]`, the prepared setup with `preparedSetupId` is outdated and not applicable anymore.",
        "params": {
          "pluginInstallationId": "The plugin installation ID obtained from the hash of `abi.encode(daoAddress, pluginAddress)`.",
          "preparedSetupId": "The prepared setup ID to be validated."
        }
      }
    },
    "stateVariables": {
      "EMPTY_ARRAY_HASH": {
        "details": "The hash is computed via `keccak256(abi.encode([]))`."
      },
      "ZERO_BYTES_HASH": {
        "details": "The hash is computed via `keccak256(abi.encode(0))`."
      },
      "states": {
        "details": "This variable is public on purpose to allow future versions to access and migrate the storage."
      }
    },
    "title": "PluginSetupProcessor",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "IPluginNotSupported(address)": [
        {
          "notice": "Thrown if a contract does not support the `IPlugin` interface."
        }
      ],
      "InvalidAppliedSetupId(bytes32,bytes32)": [
        {
          "notice": "Thrown if the applied setup ID resulting from the supplied setup payload does not match with the current applied setup ID."
        }
      ],
      "InvalidUpdateVersion((uint8,uint16),(uint8,uint16))": [
        {
          "notice": "Thrown if the update version is invalid."
        }
      ],
      "PluginAlreadyInstalled()": [
        {
          "notice": "Thrown if plugin is already installed and one tries to prepare or apply install on it."
        }
      ],
      "PluginNonupgradeable(address)": [
        {
          "notice": "Thrown if a plugin is not upgradeable."
        }
      ],
      "PluginProxyUpgradeFailed(address,address,bytes)": [
        {
          "notice": "Thrown if the upgrade of an `UUPSUpgradeable` proxy contract (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)) failed."
        }
      ],
      "PluginRepoNonexistent()": [
        {
          "notice": "Thrown if a plugin repository does not exist on the plugin repo registry."
        }
      ],
      "SetupAlreadyPrepared(bytes32)": [
        {
          "notice": "Thrown if a plugin setup was already prepared inidcated by the prepared setup ID."
        }
      ],
      "SetupApplicationUnauthorized(address,address,bytes32)": [
        {
          "notice": "Thrown if a setup is unauthorized and cannot be applied because of a missing permission of the associated DAO."
        }
      ],
      "SetupNotApplicable(bytes32)": [
        {
          "notice": "Thrown if a prepared setup ID is not eligible to be applied. This can happen if another setup has been already applied or if the setup wasn't prepared in the first place."
        }
      ]
    },
    "events": {
      "InstallationApplied(address,address,bytes32,bytes32)": {
        "notice": "Emitted after a plugin installation was applied."
      },
      "InstallationPrepared(address,address,bytes32,address,(uint8,uint16),bytes,address,(address[],(uint8,address,address,address,bytes32)[]))": {
        "notice": "Emitted with a prepared plugin installation to store data relevant for the application step."
      },
      "UninstallationApplied(address,address,bytes32)": {
        "notice": "Emitted after a plugin installation was applied."
      },
      "UninstallationPrepared(address,address,bytes32,address,(uint8,uint16),(address,address[],bytes),(uint8,address,address,address,bytes32)[])": {
        "notice": "Emitted with a prepared plugin uninstallation to store data relevant for the application step."
      },
      "UpdateApplied(address,address,bytes32,bytes32)": {
        "notice": "Emitted after a plugin update was applied."
      },
      "UpdatePrepared(address,address,bytes32,address,(uint8,uint16),(address,address[],bytes),(address[],(uint8,address,address,address,bytes32)[]),bytes)": {
        "notice": "Emitted with a prepared plugin update to store data relevant for the application step."
      }
    },
    "kind": "user",
    "methods": {
      "APPLY_INSTALLATION_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `applyInstallation` function."
      },
      "APPLY_UNINSTALLATION_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `applyUninstallation` function."
      },
      "APPLY_UPDATE_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `applyUpdate` function."
      },
      "applyInstallation(address,(((uint8,uint16),address),address,(uint8,address,address,address,bytes32)[],bytes32))": {
        "notice": "Applies the permissions of a prepared installation to a DAO."
      },
      "applyUninstallation(address,(address,((uint8,uint16),address),(uint8,address,address,address,bytes32)[]))": {
        "notice": "Applies the permissions of a prepared uninstallation to a DAO."
      },
      "applyUpdate(address,(address,((uint8,uint16),address),bytes,(uint8,address,address,address,bytes32)[],bytes32))": {
        "notice": "Applies the permissions of a prepared update of an UUPS upgradeable proxy contract to a DAO."
      },
      "constructor": {
        "notice": "Constructs the plugin setup processor by setting the associated plugin repo registry."
      },
      "prepareInstallation(address,(((uint8,uint16),address),bytes))": {
        "notice": "Prepares the installation of a plugin."
      },
      "prepareUninstallation(address,(((uint8,uint16),address),(address,address[],bytes)))": {
        "notice": "Prepares the uninstallation of a plugin."
      },
      "prepareUpdate(address,((uint8,uint16),(uint8,uint16),address,(address,address[],bytes)))": {
        "notice": "Prepares the update of an UUPS upgradeable plugin."
      },
      "repoRegistry()": {
        "notice": "The plugin repo registry listing the `PluginRepo` contracts versioning the `PluginSetup` contracts."
      },
      "states(bytes32)": {
        "notice": "A mapping between the plugin installation ID (obtained from the DAO and plugin address) and the plugin state information."
      },
      "validatePreparedSetupId(bytes32,bytes32)": {
        "notice": "Validates that a setup ID can be applied for `applyInstallation`, `applyUpdate`, or `applyUninstallation`."
      }
    },
    "notice": "This contract processes the preparation and application of plugin setups (installation, update, uninstallation) on behalf of a requesting DAO.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13717,
        "contract": "contracts/factory/plugin/setup/PluginSetupProcessor.sol:PluginSetupProcessor",
        "label": "states",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(PluginState)13711_storage)"
      },
      {
        "astId": 13783,
        "contract": "contracts/factory/plugin/setup/PluginSetupProcessor.sol:PluginSetupProcessor",
        "label": "repoRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(PluginRepoRegistry)13495"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(PluginRepoRegistry)13495": {
        "encoding": "inplace",
        "label": "contract PluginRepoRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(PluginState)13711_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PluginSetupProcessor.PluginState)",
        "numberOfBytes": "32",
        "value": "t_struct(PluginState)13711_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PluginState)13711_storage": {
        "encoding": "inplace",
        "label": "struct PluginSetupProcessor.PluginState",
        "members": [
          {
            "astId": 13704,
            "contract": "contracts/factory/plugin/setup/PluginSetupProcessor.sol:PluginSetupProcessor",
            "label": "blockNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13706,
            "contract": "contracts/factory/plugin/setup/PluginSetupProcessor.sol:PluginSetupProcessor",
            "label": "currentAppliedSetupId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 13710,
            "contract": "contracts/factory/plugin/setup/PluginSetupProcessor.sol:PluginSetupProcessor",
            "label": "preparedSetupIdToBlockNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}