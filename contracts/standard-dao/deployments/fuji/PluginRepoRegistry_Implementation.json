{
  "address": "0xCE9Fb059a3c928e636DC4c6E81E8Ca451FDed611",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registrant",
          "type": "address"
        }
      ],
      "name": "ContractAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registrant",
          "type": "address"
        }
      ],
      "name": "ContractERC165SupportInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registrant",
          "type": "address"
        }
      ],
      "name": "ContractInterfaceInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "where",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "permissionId",
          "type": "bytes32"
        }
      ],
      "name": "DaoUnauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pluginRepo",
          "type": "address"
        }
      ],
      "name": "PluginRepoRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "REGISTER_PLUGIN_REPO_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_REGISTRY_PERMISSION_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "contract IDAO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "entries",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDAO",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pluginRepo",
          "type": "address"
        }
      ],
      "name": "registerPluginRepo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetInterfaceId",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e67a6be261854bcd31fefa2e70f838a199e5579df915179b156bfa9bf33c1bb",
  "receipt": {
    "to": null,
    "from": "0x90ad449DEb987A1f34D5127751874E9BBD223F2f",
    "contractAddress": "0xCE9Fb059a3c928e636DC4c6E81E8Ca451FDed611",
    "transactionIndex": 0,
    "gasUsed": "1749571",
    "logsBloom": "0x
    "blockHash": "0x002da602b1b8151b0b518630691c758578acf3f0f23959cf94a925fcb5495895",
    "transactionHash": "0x3e67a6be261854bcd31fefa2e70f838a199e5579df915179b156bfa9bf33c1bb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30726396,
        "transactionHash": "0x3e67a6be261854bcd31fefa2e70f838a199e5579df915179b156bfa9bf33c1bb",
        "address": "0xCE9Fb059a3c928e636DC4c6E81E8Ca451FDed611",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x002da602b1b8151b0b518630691c758578acf3f0f23959cf94a925fcb5495895"
      }
    ],
    "blockNumber": 30726396,
    "cumulativeGasUsed": "1749571",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0436994da4f1886ef7ba0eafc5c461be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"ContractAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"ContractERC165SupportInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"}],\"name\":\"ContractInterfaceInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"name\":\"DaoUnauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pluginRepo\",\"type\":\"address\"}],\"name\":\"PluginRepoRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REGISTER_PLUGIN_REPO_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_REGISTRY_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"contract IDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDAO\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pluginRepo\",\"type\":\"address\"}],\"name\":\"registerPluginRepo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaceId\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ContractAlreadyRegistered(address)\":[{\"params\":{\"registrant\":\"The address of the contract to be registered.\"}}],\"ContractERC165SupportInvalid(address)\":[{\"params\":{\"registrant\":\"The address of the contract.\"}}],\"ContractInterfaceInvalid(address)\":[{\"params\":{\"registrant\":\"The address of the contract to be registered.\"}}],\"DaoUnauthorized(address,address,address,bytes32)\":[{\"params\":{\"dao\":\"The associated DAO.\",\"permissionId\":\"The permission identifier.\",\"where\":\"The context in which the authorization reverted.\",\"who\":\"The address (EOA or contract) missing the permission.\"}}]},\"events\":{\"PluginRepoRegistered(address)\":{\"params\":{\"pluginRepo\":\"The address of the plugin repository.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Used to disallow initializing the implementation contract by an attacker for extra safety.\"},\"dao()\":{\"returns\":{\"_0\":\"The DAO contract.\"}},\"initialize(address)\":{\"params\":{\"_dao\":\"The address of the managing DAO.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"registerPluginRepo(address)\":{\"params\":{\"pluginRepo\":\"The address of the PluginRepo contract.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"PluginRepoRegistry\",\"version\":1},\"userdoc\":{\"errors\":{\"ContractAlreadyRegistered(address)\":[{\"notice\":\"Thrown if the contract is already registered.\"}],\"ContractERC165SupportInvalid(address)\":[{\"notice\":\"Thrown if the contract do not support ERC165.\"}],\"ContractInterfaceInvalid(address)\":[{\"notice\":\"Thrown if the contract does not support the required interface.\"}],\"DaoUnauthorized(address,address,address,bytes32)\":[{\"notice\":\"Thrown if a call is unauthorized in the associated DAO.\"}]},\"events\":{\"PluginRepoRegistered(address)\":{\"notice\":\"Emitted if a new plugin repository is registered.\"}},\"kind\":\"user\",\"methods\":{\"REGISTER_PLUGIN_REPO_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `register` function.\"},\"UPGRADE_REGISTRY_PERMISSION_ID()\":{\"notice\":\"The ID of the permission required to call the `_authorizeUpgrade` function.\"},\"dao()\":{\"notice\":\"Returns the DAO contract.\"},\"entries(address)\":{\"notice\":\"The mapping containing the registry entries returning true for registererd contract addresses.\"},\"initialize(address)\":{\"notice\":\"Initializes the contract by setting calling the `InterfaceBasedRegistry` base class initialize method.\"},\"registerPluginRepo(address)\":{\"notice\":\"Registers a plugin repository with its address.\"},\"targetInterfaceId()\":{\"notice\":\"The [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID that the target contracts being registered must support.\"}},\"notice\":\"This contract maintains an address-based registery of plugin repositories.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factory/plugin/repo/PluginRepoRegistry.sol\":\"PluginRepoRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x7493c62dd0335284327a6cce7bd29aaa47bebb761e4e01ab4b031563f977bc32\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title IDAO\\n/// @notice The interface required for DAOs\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If no failure map is provided, one failing action results in the entire excution to be reverted. If a non-zero failure map is provided, allowed actions can fail without the remaining actions being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The constructed failureMap which contains which actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external;\\n}\",\"keccak256\":\"0xd5b4cb2fab92eb9953f41ea15be8b857a484d1f10b6b219c94ed3fa89c482e41\",\"license\":\"MIT\"},\"contracts/core/plugin/dao-authorizable/DaoAuthorizableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport {IDAO} from \\\"../../dao/IDAO.sol\\\";\\nimport {_auth} from \\\"../../utils/auth.sol\\\";\\n\\n/// @title DaoAuthorizableUpgradeable\\n/// @notice An abstract contract providing a meta-transaction compatible modifier for upgradeable or cloneable contracts to authorize function calls through an associated DAO.\\n/// @dev Make sure to call `__DaoAuthorizableUpgradeable_init` during initialization of the inheriting contract.\\nabstract contract DaoAuthorizableUpgradeable is ContextUpgradeable {\\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\\n    IDAO private dao_;\\n\\n    /// @notice Initializes the contract by setting the associated DAO.\\n    /// @param _dao The associated DAO address.\\n    function __DaoAuthorizableUpgradeable_init(IDAO _dao) internal onlyInitializing {\\n        dao_ = _dao;\\n    }\\n\\n    /// @notice Returns the DAO contract.\\n    /// @return The DAO contract.\\n    function dao() public view returns (IDAO) {\\n        return dao_;\\n    }\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(dao_, address(this), _msgSender(), _permissionId, _msgData());\\n        _;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xfc415402e3033a844f8ea360accfd96b9e4f3d7b7800bb6df2f165ce2a7a44ff\",\"license\":\"MIT\"},\"contracts/core/utils/auth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\n\\n/// @notice Thrown if a call is unauthorized in the associated DAO.\\n/// @param dao The associated DAO.\\n/// @param where The context in which the authorization reverted.\\n/// @param who The address (EOA or contract) missing the permission.\\n/// @param permissionId The permission identifier.\\nerror DaoUnauthorized(address dao, address where, address who, bytes32 permissionId);\\n\\n/// @notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n/// @param _where The address of the target contract for which `who` recieves permission.\\n/// @param _who The address (EOA or contract) owning the permission.\\n/// @param _permissionId The permission identifier.\\n/// @param _data The optional data passed to the `PermissionCondition` registered.\\nfunction _auth(\\n    IDAO _dao,\\n    address _where,\\n    address _who,\\n    bytes32 _permissionId,\\n    bytes calldata _data\\n) view {\\n    if (!_dao.hasPermission(_where, _who, _permissionId, _data))\\n        revert DaoUnauthorized({\\n            dao: address(_dao),\\n            where: _where,\\n            who: _who,\\n            permissionId: _permissionId\\n        });\\n}\",\"keccak256\":\"0x77c5843f04142cf8143abacadb96776550e9110aaa9bb5bbf2bde61e14f8c0d5\",\"license\":\"MIT\"},\"contracts/factory/plugin/repo/IPluginRepo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title IPluginRepo\\n/// @notice The interface required for a plugin repository.\\ninterface IPluginRepo {\\n    /// @notice Update the metadata for release with content `@fromHex(_releaseMetadata)`.\\n    /// @param _release The release number.\\n    /// @param _releaseMetadata The release metadata URI.\\n    function updateReleaseMetadata(uint8 _release, bytes calldata _releaseMetadata) external;\\n\\n    /// @notice Creates a new plugin version as the latest build for an existing release number or the first build for a new release number for the provided `PluginSetup` contract address and metadata.\\n    /// @param _release The release number.\\n    /// @param _pluginSetupAddress The address of the plugin setup contract.\\n    /// @param _buildMetadata The build metadata URI.\\n    /// @param _releaseMetadata The release metadata URI.\\n    function createVersion(\\n        uint8 _release,\\n        address _pluginSetupAddress,\\n        bytes calldata _buildMetadata,\\n        bytes calldata _releaseMetadata\\n    ) external;\\n}\",\"keccak256\":\"0x04c7a490dd9f81b9de0b1c314a3ab8f18996cf32a63faf29f147a0efd24437f1\",\"license\":\"MIT\"},\"contracts/factory/plugin/repo/PluginRepoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {IDAO} from \\\"../../../core/dao/IDAO.sol\\\";\\nimport {InterfaceBasedRegistry} from \\\"../../utils/InterfaceBasedRegistry.sol\\\";\\nimport {IPluginRepo} from \\\"./IPluginRepo.sol\\\";\\n\\n/// @title PluginRepoRegistry\\n/// @notice This contract maintains an address-based registery of plugin repositories.\\ncontract PluginRepoRegistry is InterfaceBasedRegistry {\\n    /// @notice The ID of the permission required to call the `register` function.\\n    bytes32 public constant REGISTER_PLUGIN_REPO_PERMISSION_ID =\\n        keccak256(\\\"REGISTER_PLUGIN_REPO_PERMISSION\\\");\\n\\n    /// @notice Emitted if a new plugin repository is registered.\\n    /// @param pluginRepo The address of the plugin repository.\\n    event PluginRepoRegistered(address pluginRepo);\\n\\n    /// @dev Used to disallow initializing the implementation contract by an attacker for extra safety.\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializes the contract by setting calling the `InterfaceBasedRegistry` base class initialize method.\\n    /// @param _dao The address of the managing DAO.\\n    function initialize(IDAO _dao) external initializer {\\n        bytes4 pluginRepoInterfaceId = type(IPluginRepo).interfaceId;\\n        __InterfaceBasedRegistry_init(_dao, pluginRepoInterfaceId);\\n    }\\n\\n    /// @notice Registers a plugin repository with its address.\\n    /// @param pluginRepo The address of the PluginRepo contract.\\n    function registerPluginRepo(\\n        address pluginRepo\\n    ) external auth(REGISTER_PLUGIN_REPO_PERMISSION_ID) {\\n\\n        _register(pluginRepo);\\n\\n        emit PluginRepoRegistered(pluginRepo);\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xc2f81a435a11d93fae7795eabb897927bbfaee1fc991dc2306ba33f1fe1cec64\",\"license\":\"MIT\"},\"contracts/factory/utils/InterfaceBasedRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {ERC165CheckerUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\\\";\\n\\nimport {DaoAuthorizableUpgradeable} from \\\"../../core/plugin/dao-authorizable/DaoAuthorizableUpgradeable.sol\\\";\\nimport {IDAO} from \\\"../../core/dao/IDAO.sol\\\";\\n\\n/// @title InterfaceBasedRegistry\\n/// @notice An [ERC-165](https://eips.ethereum.org/EIPS/eip-165)-based registry for contracts\\nabstract contract InterfaceBasedRegistry is UUPSUpgradeable, DaoAuthorizableUpgradeable {\\n    using ERC165CheckerUpgradeable for address;\\n\\n    /// @notice The ID of the permission required to call the `_authorizeUpgrade` function.\\n    bytes32 public constant UPGRADE_REGISTRY_PERMISSION_ID =\\n        keccak256(\\\"UPGRADE_REGISTRY_PERMISSION\\\");\\n\\n    /// @notice The [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID that the target contracts being registered must support.\\n    bytes4 public targetInterfaceId;\\n\\n    /// @notice The mapping containing the registry entries returning true for registererd contract addresses.\\n    mapping(address => bool) public entries;\\n\\n    /// @notice Thrown if the contract is already registered.\\n    /// @param registrant The address of the contract to be registered.\\n    error ContractAlreadyRegistered(address registrant);\\n\\n    /// @notice Thrown if the contract does not support the required interface.\\n    /// @param registrant The address of the contract to be registered.\\n    error ContractInterfaceInvalid(address registrant);\\n\\n    /// @notice Thrown if the contract do not support ERC165.\\n    /// @param registrant The address of the contract.\\n    error ContractERC165SupportInvalid(address registrant);\\n\\n    /// @notice Initializes the component.\\n    /// @dev This is required for the UUPS upgradability pattern.\\n    /// @param _managingDao The interface of the DAO managing the components permissions.\\n    /// @param _targetInterfaceId The [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface id of the contracts to be registered.\\n    function __InterfaceBasedRegistry_init(\\n        IDAO _managingDao,\\n        bytes4 _targetInterfaceId\\n    ) internal virtual onlyInitializing {\\n        __DaoAuthorizableUpgradeable_init(_managingDao);\\n\\n        targetInterfaceId = _targetInterfaceId;\\n    }\\n\\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeabilty mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    /// @dev The caller must have the `UPGRADE_REGISTRY_PERMISSION_ID` permission.\\n    function _authorizeUpgrade(\\n        address\\n    ) internal virtual override auth(UPGRADE_REGISTRY_PERMISSION_ID) {}\\n\\n    /// @notice Register an [ERC-165](https://eips.ethereum.org/EIPS/eip-165) contract address.\\n    /// @dev The managing DAO needs to grant REGISTER_PERMISSION_ID to registrar.\\n    /// @param _registrant The address of an [ERC-165](https://eips.ethereum.org/EIPS/eip-165) contract.\\n    function _register(address _registrant) internal {\\n        if (entries[_registrant]) {\\n            revert ContractAlreadyRegistered({registrant: _registrant});\\n        }\\n\\n        // Will revert if address is not a contract or doesn't fully support targetInterfaceId + ERC165.\\n        if (!_registrant.supportsInterface(targetInterfaceId)) {\\n            revert ContractInterfaceInvalid(_registrant);\\n        }\\n\\n        entries[_registrant] = true;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[48] private __gap;\\n}\",\"keccak256\":\"0xabe9a5b609dab8eba5df5a8b50c79dbe24dbcffe51d5716acff9928b2355d635\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b50620000556200005b60201b60201c565b62000206565b600060019054906101000a900460ff1615620000ae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a590620001a9565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff161015620001205760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620001179190620001e9565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200019160278362000122565b91506200019e8262000133565b604082019050919050565b60006020820190508181036000830152620001c48162000182565b9050919050565b600060ff82169050919050565b620001e381620001cb565b82525050565b6000602082019050620002006000830184620001d8565b92915050565b608051611e4f6200023e60003960008181610243015281816102d1015281816104080152818161049601526105460152611e4f6000f3fe6080604052600436106100915760003560e01c80636e852f16116100595780636e852f161461015c57806374574eb714610185578063c4d66de8146101b0578063ce091c86146101d9578063f29ee1251461020457610091565b80633659cfe6146100965780634162169f146100bf57806344162ef8146100ea5780634f1ef2861461011557806352d1902d14610131575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b8919061124d565b610241565b005b3480156100cb57600080fd5b506100d46103c9565b6040516100e191906112d9565b60405180910390f35b3480156100f657600080fd5b506100ff6103f3565b60405161010c919061132f565b60405180910390f35b61012f600480360381019061012a9190611490565b610406565b005b34801561013d57600080fd5b50610146610542565b6040516101539190611505565b60405180910390f35b34801561016857600080fd5b50610183600480360381019061017e919061124d565b6105fb565b005b34801561019157600080fd5b5061019a61069d565b6040516101a79190611505565b60405180910390f35b3480156101bc57600080fd5b506101d760048036038101906101d2919061155e565b6106c1565b005b3480156101e557600080fd5b506101ee610828565b6040516101fb9190611505565b60405180910390f35b34801561021057600080fd5b5061022b6004803603810190610226919061124d565b61084c565b60405161023891906115a6565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036102cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c690611644565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661030e61086c565b73ffffffffffffffffffffffffffffffffffffffff1614610364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035b906116d6565b60405180910390fd5b61036d816108c3565b6103c681600067ffffffffffffffff81111561038c5761038b611365565b5b6040519080825280601f01601f1916602001820160405280156103be5781602001600182028036833780820191505090505b506000610925565b50565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60c960009054906101000a900460e01b81565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048b90611644565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166104d361086c565b73ffffffffffffffffffffffffffffffffffffffff1614610529576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610520906116d6565b60405180910390fd5b610532826108c3565b61053e82826001610925565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146105d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c990611768565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b7f055973dfb6d3b3cd890dde3a801f5427fa973864752b6d2a1ae61cbd5ae5dc09610659609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163061064b610a93565b84610654610a9b565b610aa8565b61066282610b79565b7f1121d9f50363c0df6ebabacb8bf9fbe39e031a76f1ad76534746bf919cc298fa826040516106919190611797565b60405180910390a15050565b7f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293281565b60008060019054906101000a900460ff161590508080156106f25750600160008054906101000a900460ff1660ff16105b8061071f575061070130610cdc565b15801561071e5750600160008054906101000a900460ff1660ff16145b5b61075e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075590611824565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561079b576001600060016101000a81548160ff0219169083151502179055505b60007fd4321b400000000000000000000000000000000000000000000000000000000090506107ca8382610cff565b5080156108245760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161081b919061188c565b60405180910390a15b5050565b7f055973dfb6d3b3cd890dde3a801f5427fa973864752b6d2a1ae61cbd5ae5dc0981565b60ca6020528060005260406000206000915054906101000a900460ff1681565b600061089a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610d79565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa72932610921609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630610913610a93565b8461091c610a9b565b610aa8565b5050565b6109517f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b610d83565b60000160009054906101000a900460ff16156109755761097083610d8d565b610a8e565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156109dd57506040513d601f19601f820116820180604052508101906109da91906118d3565b60015b610a1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1390611972565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114610a81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7890611a04565b60405180910390fd5b50610a8d838383610e46565b5b505050565b600033905090565b3660008036915091509091565b8573ffffffffffffffffffffffffffffffffffffffff1663fdef910686868686866040518663ffffffff1660e01b8152600401610ae9959493929190611a62565b602060405180830381865afa158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a9190611adc565b610b7157858585856040517f32dbe3b4000000000000000000000000000000000000000000000000000000008152600401610b689493929190611b09565b60405180910390fd5b505050505050565b60ca60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610c0857806040517ffdcce17f000000000000000000000000000000000000000000000000000000008152600401610bff9190611797565b60405180910390fd5b610c4060c960009054906101000a900460e01b8273ffffffffffffffffffffffffffffffffffffffff16610e7290919063ffffffff16565b610c8157806040517f71023c8a000000000000000000000000000000000000000000000000000000008152600401610c789190611797565b60405180910390fd5b600160ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4590611bc0565b60405180910390fd5b610d5782610e97565b8060c960006101000a81548163ffffffff021916908360e01c02179055505050565b6000819050919050565b6000819050919050565b610d9681610cdc565b610dd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcc90611c52565b60405180910390fd5b80610e027f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610d79565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610e4f83610f2a565b600082511180610e5c5750805b15610e6d57610e6b8383610f79565b505b505050565b6000610e7d8361105d565b8015610e8f5750610e8e83836110aa565b5b905092915050565b600060019054906101000a900460ff16610ee6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edd90611bc0565b60405180910390fd5b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610f3381610d8d565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060610f8483610cdc565b610fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fba90611ce4565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051610feb9190611d75565b600060405180830381855af49150503d8060008114611026576040519150601f19603f3d011682016040523d82523d6000602084013e61102b565b606091505b50915091506110538282604051806060016040528060278152602001611df360279139611169565b9250505092915050565b6000611089827f01ffc9a7000000000000000000000000000000000000000000000000000000006110aa565b80156110a357506110a18263ffffffff60e01b6110aa565b155b9050919050565b6000806301ffc9a760e01b836040516024016110c6919061132f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000602060008551602087018a617530fa92503d91506000519050828015611151575060208210155b801561115d5750600081115b94505050505092915050565b6060831561117957829050611184565b611183838361118b565b5b9392505050565b60008251111561119e5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d29190611dd0565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061121a826111ef565b9050919050565b61122a8161120f565b811461123557600080fd5b50565b60008135905061124781611221565b92915050565b600060208284031215611263576112626111e5565b5b600061127184828501611238565b91505092915050565b6000819050919050565b600061129f61129a611295846111ef565b61127a565b6111ef565b9050919050565b60006112b182611284565b9050919050565b60006112c3826112a6565b9050919050565b6112d3816112b8565b82525050565b60006020820190506112ee60008301846112ca565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611329816112f4565b82525050565b60006020820190506113446000830184611320565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61139d82611354565b810181811067ffffffffffffffff821117156113bc576113bb611365565b5b80604052505050565b60006113cf6111db565b90506113db8282611394565b919050565b600067ffffffffffffffff8211156113fb576113fa611365565b5b61140482611354565b9050602081019050919050565b82818337600083830152505050565b600061143361142e846113e0565b6113c5565b90508281526020810184848401111561144f5761144e61134f565b5b61145a848285611411565b509392505050565b600082601f8301126114775761147661134a565b5b8135611487848260208601611420565b91505092915050565b600080604083850312156114a7576114a66111e5565b5b60006114b585828601611238565b925050602083013567ffffffffffffffff8111156114d6576114d56111ea565b5b6114e285828601611462565b9150509250929050565b6000819050919050565b6114ff816114ec565b82525050565b600060208201905061151a60008301846114f6565b92915050565b600061152b8261120f565b9050919050565b61153b81611520565b811461154657600080fd5b50565b60008135905061155881611532565b92915050565b600060208284031215611574576115736111e5565b5b600061158284828501611549565b91505092915050565b60008115159050919050565b6115a08161158b565b82525050565b60006020820190506115bb6000830184611597565b92915050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b600061162e602c836115c1565b9150611639826115d2565b604082019050919050565b6000602082019050818103600083015261165d81611621565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006116c0602c836115c1565b91506116cb82611664565b604082019050919050565b600060208201905081810360008301526116ef816116b3565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b60006117526038836115c1565b915061175d826116f6565b604082019050919050565b6000602082019050818103600083015261178181611745565b9050919050565b6117918161120f565b82525050565b60006020820190506117ac6000830184611788565b92915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061180e602e836115c1565b9150611819826117b2565b604082019050919050565b6000602082019050818103600083015261183d81611801565b9050919050565b6000819050919050565b600060ff82169050919050565b600061187661187161186c84611844565b61127a565b61184e565b9050919050565b6118868161185b565b82525050565b60006020820190506118a1600083018461187d565b92915050565b6118b0816114ec565b81146118bb57600080fd5b50565b6000815190506118cd816118a7565b92915050565b6000602082840312156118e9576118e86111e5565b5b60006118f7848285016118be565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b600061195c602e836115c1565b915061196782611900565b604082019050919050565b6000602082019050818103600083015261198b8161194f565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b60006119ee6029836115c1565b91506119f982611992565b604082019050919050565b60006020820190508181036000830152611a1d816119e1565b9050919050565b600082825260208201905092915050565b6000611a418385611a24565b9350611a4e838584611411565b611a5783611354565b840190509392505050565b6000608082019050611a776000830188611788565b611a846020830187611788565b611a9160408301866114f6565b8181036060830152611aa4818486611a35565b90509695505050505050565b611ab98161158b565b8114611ac457600080fd5b50565b600081519050611ad681611ab0565b92915050565b600060208284031215611af257611af16111e5565b5b6000611b0084828501611ac7565b91505092915050565b6000608082019050611b1e6000830187611788565b611b2b6020830186611788565b611b386040830185611788565b611b4560608301846114f6565b95945050505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611baa602b836115c1565b9150611bb582611b4e565b604082019050919050565b60006020820190508181036000830152611bd981611b9d565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000611c3c602d836115c1565b9150611c4782611be0565b604082019050919050565b60006020820190508181036000830152611c6b81611c2f565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000611cce6026836115c1565b9150611cd982611c72565b604082019050919050565b60006020820190508181036000830152611cfd81611cc1565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611d38578082015181840152602081019050611d1d565b60008484015250505050565b6000611d4f82611d04565b611d598185611d0f565b9350611d69818560208601611d1a565b80840191505092915050565b6000611d818284611d44565b915081905092915050565b600081519050919050565b6000611da282611d8c565b611dac81856115c1565b9350611dbc818560208601611d1a565b611dc581611354565b840191505092915050565b60006020820190508181036000830152611dea8184611d97565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208e614c01349548eb050e36d34ec42c02537a39d85466ecd6d92229dfc498114064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c80636e852f16116100595780636e852f161461015c57806374574eb714610185578063c4d66de8146101b0578063ce091c86146101d9578063f29ee1251461020457610091565b80633659cfe6146100965780634162169f146100bf57806344162ef8146100ea5780634f1ef2861461011557806352d1902d14610131575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b8919061124d565b610241565b005b3480156100cb57600080fd5b506100d46103c9565b6040516100e191906112d9565b60405180910390f35b3480156100f657600080fd5b506100ff6103f3565b60405161010c919061132f565b60405180910390f35b61012f600480360381019061012a9190611490565b610406565b005b34801561013d57600080fd5b50610146610542565b6040516101539190611505565b60405180910390f35b34801561016857600080fd5b50610183600480360381019061017e919061124d565b6105fb565b005b34801561019157600080fd5b5061019a61069d565b6040516101a79190611505565b60405180910390f35b3480156101bc57600080fd5b506101d760048036038101906101d2919061155e565b6106c1565b005b3480156101e557600080fd5b506101ee610828565b6040516101fb9190611505565b60405180910390f35b34801561021057600080fd5b5061022b6004803603810190610226919061124d565b61084c565b60405161023891906115a6565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036102cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c690611644565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661030e61086c565b73ffffffffffffffffffffffffffffffffffffffff1614610364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035b906116d6565b60405180910390fd5b61036d816108c3565b6103c681600067ffffffffffffffff81111561038c5761038b611365565b5b6040519080825280601f01601f1916602001820160405280156103be5781602001600182028036833780820191505090505b506000610925565b50565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60c960009054906101000a900460e01b81565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048b90611644565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166104d361086c565b73ffffffffffffffffffffffffffffffffffffffff1614610529576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610520906116d6565b60405180910390fd5b610532826108c3565b61053e82826001610925565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146105d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c990611768565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b7f055973dfb6d3b3cd890dde3a801f5427fa973864752b6d2a1ae61cbd5ae5dc09610659609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163061064b610a93565b84610654610a9b565b610aa8565b61066282610b79565b7f1121d9f50363c0df6ebabacb8bf9fbe39e031a76f1ad76534746bf919cc298fa826040516106919190611797565b60405180910390a15050565b7f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa7293281565b60008060019054906101000a900460ff161590508080156106f25750600160008054906101000a900460ff1660ff16105b8061071f575061070130610cdc565b15801561071e5750600160008054906101000a900460ff1660ff16145b5b61075e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075590611824565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561079b576001600060016101000a81548160ff0219169083151502179055505b60007fd4321b400000000000000000000000000000000000000000000000000000000090506107ca8382610cff565b5080156108245760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161081b919061188c565b60405180910390a15b5050565b7f055973dfb6d3b3cd890dde3a801f5427fa973864752b6d2a1ae61cbd5ae5dc0981565b60ca6020528060005260406000206000915054906101000a900460ff1681565b600061089a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610d79565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f60b96ff9fb5f29153c29c1747515b8be4ee523d686cc6f453ec294b0afa72932610921609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630610913610a93565b8461091c610a9b565b610aa8565b5050565b6109517f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b610d83565b60000160009054906101000a900460ff16156109755761097083610d8d565b610a8e565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156109dd57506040513d601f19601f820116820180604052508101906109da91906118d3565b60015b610a1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1390611972565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114610a81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7890611a04565b60405180910390fd5b50610a8d838383610e46565b5b505050565b600033905090565b3660008036915091509091565b8573ffffffffffffffffffffffffffffffffffffffff1663fdef910686868686866040518663ffffffff1660e01b8152600401610ae9959493929190611a62565b602060405180830381865afa158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a9190611adc565b610b7157858585856040517f32dbe3b4000000000000000000000000000000000000000000000000000000008152600401610b689493929190611b09565b60405180910390fd5b505050505050565b60ca60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610c0857806040517ffdcce17f000000000000000000000000000000000000000000000000000000008152600401610bff9190611797565b60405180910390fd5b610c4060c960009054906101000a900460e01b8273ffffffffffffffffffffffffffffffffffffffff16610e7290919063ffffffff16565b610c8157806040517f71023c8a000000000000000000000000000000000000000000000000000000008152600401610c789190611797565b60405180910390fd5b600160ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4590611bc0565b60405180910390fd5b610d5782610e97565b8060c960006101000a81548163ffffffff021916908360e01c02179055505050565b6000819050919050565b6000819050919050565b610d9681610cdc565b610dd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcc90611c52565b60405180910390fd5b80610e027f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b610d79565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610e4f83610f2a565b600082511180610e5c5750805b15610e6d57610e6b8383610f79565b505b505050565b6000610e7d8361105d565b8015610e8f5750610e8e83836110aa565b5b905092915050565b600060019054906101000a900460ff16610ee6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edd90611bc0565b60405180910390fd5b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610f3381610d8d565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060610f8483610cdc565b610fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fba90611ce4565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051610feb9190611d75565b600060405180830381855af49150503d8060008114611026576040519150601f19603f3d011682016040523d82523d6000602084013e61102b565b606091505b50915091506110538282604051806060016040528060278152602001611df360279139611169565b9250505092915050565b6000611089827f01ffc9a7000000000000000000000000000000000000000000000000000000006110aa565b80156110a357506110a18263ffffffff60e01b6110aa565b155b9050919050565b6000806301ffc9a760e01b836040516024016110c6919061132f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000602060008551602087018a617530fa92503d91506000519050828015611151575060208210155b801561115d5750600081115b94505050505092915050565b6060831561117957829050611184565b611183838361118b565b5b9392505050565b60008251111561119e5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d29190611dd0565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061121a826111ef565b9050919050565b61122a8161120f565b811461123557600080fd5b50565b60008135905061124781611221565b92915050565b600060208284031215611263576112626111e5565b5b600061127184828501611238565b91505092915050565b6000819050919050565b600061129f61129a611295846111ef565b61127a565b6111ef565b9050919050565b60006112b182611284565b9050919050565b60006112c3826112a6565b9050919050565b6112d3816112b8565b82525050565b60006020820190506112ee60008301846112ca565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611329816112f4565b82525050565b60006020820190506113446000830184611320565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61139d82611354565b810181811067ffffffffffffffff821117156113bc576113bb611365565b5b80604052505050565b60006113cf6111db565b90506113db8282611394565b919050565b600067ffffffffffffffff8211156113fb576113fa611365565b5b61140482611354565b9050602081019050919050565b82818337600083830152505050565b600061143361142e846113e0565b6113c5565b90508281526020810184848401111561144f5761144e61134f565b5b61145a848285611411565b509392505050565b600082601f8301126114775761147661134a565b5b8135611487848260208601611420565b91505092915050565b600080604083850312156114a7576114a66111e5565b5b60006114b585828601611238565b925050602083013567ffffffffffffffff8111156114d6576114d56111ea565b5b6114e285828601611462565b9150509250929050565b6000819050919050565b6114ff816114ec565b82525050565b600060208201905061151a60008301846114f6565b92915050565b600061152b8261120f565b9050919050565b61153b81611520565b811461154657600080fd5b50565b60008135905061155881611532565b92915050565b600060208284031215611574576115736111e5565b5b600061158284828501611549565b91505092915050565b60008115159050919050565b6115a08161158b565b82525050565b60006020820190506115bb6000830184611597565b92915050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b600061162e602c836115c1565b9150611639826115d2565b604082019050919050565b6000602082019050818103600083015261165d81611621565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006116c0602c836115c1565b91506116cb82611664565b604082019050919050565b600060208201905081810360008301526116ef816116b3565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b60006117526038836115c1565b915061175d826116f6565b604082019050919050565b6000602082019050818103600083015261178181611745565b9050919050565b6117918161120f565b82525050565b60006020820190506117ac6000830184611788565b92915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061180e602e836115c1565b9150611819826117b2565b604082019050919050565b6000602082019050818103600083015261183d81611801565b9050919050565b6000819050919050565b600060ff82169050919050565b600061187661187161186c84611844565b61127a565b61184e565b9050919050565b6118868161185b565b82525050565b60006020820190506118a1600083018461187d565b92915050565b6118b0816114ec565b81146118bb57600080fd5b50565b6000815190506118cd816118a7565b92915050565b6000602082840312156118e9576118e86111e5565b5b60006118f7848285016118be565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b600061195c602e836115c1565b915061196782611900565b604082019050919050565b6000602082019050818103600083015261198b8161194f565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b60006119ee6029836115c1565b91506119f982611992565b604082019050919050565b60006020820190508181036000830152611a1d816119e1565b9050919050565b600082825260208201905092915050565b6000611a418385611a24565b9350611a4e838584611411565b611a5783611354565b840190509392505050565b6000608082019050611a776000830188611788565b611a846020830187611788565b611a9160408301866114f6565b8181036060830152611aa4818486611a35565b90509695505050505050565b611ab98161158b565b8114611ac457600080fd5b50565b600081519050611ad681611ab0565b92915050565b600060208284031215611af257611af16111e5565b5b6000611b0084828501611ac7565b91505092915050565b6000608082019050611b1e6000830187611788565b611b2b6020830186611788565b611b386040830185611788565b611b4560608301846114f6565b95945050505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611baa602b836115c1565b9150611bb582611b4e565b604082019050919050565b60006020820190508181036000830152611bd981611b9d565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000611c3c602d836115c1565b9150611c4782611be0565b604082019050919050565b60006020820190508181036000830152611c6b81611c2f565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000611cce6026836115c1565b9150611cd982611c72565b604082019050919050565b60006020820190508181036000830152611cfd81611cc1565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611d38578082015181840152602081019050611d1d565b60008484015250505050565b6000611d4f82611d04565b611d598185611d0f565b9350611d69818560208601611d1a565b80840191505092915050565b6000611d818284611d44565b915081905092915050565b600081519050919050565b6000611da282611d8c565b611dac81856115c1565b9350611dbc818560208601611d1a565b611dc581611354565b840191505092915050565b60006020820190508181036000830152611dea8184611d97565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208e614c01349548eb050e36d34ec42c02537a39d85466ecd6d92229dfc498114064736f6c63430008110033",
  "devdoc": {
    "errors": {
      "ContractAlreadyRegistered(address)": [
        {
          "params": {
            "registrant": "The address of the contract to be registered."
          }
        }
      ],
      "ContractERC165SupportInvalid(address)": [
        {
          "params": {
            "registrant": "The address of the contract."
          }
        }
      ],
      "ContractInterfaceInvalid(address)": [
        {
          "params": {
            "registrant": "The address of the contract to be registered."
          }
        }
      ],
      "DaoUnauthorized(address,address,address,bytes32)": [
        {
          "params": {
            "dao": "The associated DAO.",
            "permissionId": "The permission identifier.",
            "where": "The context in which the authorization reverted.",
            "who": "The address (EOA or contract) missing the permission."
          }
        }
      ]
    },
    "events": {
      "PluginRepoRegistered(address)": {
        "params": {
          "pluginRepo": "The address of the plugin repository."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Used to disallow initializing the implementation contract by an attacker for extra safety."
      },
      "dao()": {
        "returns": {
          "_0": "The DAO contract."
        }
      },
      "initialize(address)": {
        "params": {
          "_dao": "The address of the managing DAO."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "registerPluginRepo(address)": {
        "params": {
          "pluginRepo": "The address of the PluginRepo contract."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "PluginRepoRegistry",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ContractAlreadyRegistered(address)": [
        {
          "notice": "Thrown if the contract is already registered."
        }
      ],
      "ContractERC165SupportInvalid(address)": [
        {
          "notice": "Thrown if the contract do not support ERC165."
        }
      ],
      "ContractInterfaceInvalid(address)": [
        {
          "notice": "Thrown if the contract does not support the required interface."
        }
      ],
      "DaoUnauthorized(address,address,address,bytes32)": [
        {
          "notice": "Thrown if a call is unauthorized in the associated DAO."
        }
      ]
    },
    "events": {
      "PluginRepoRegistered(address)": {
        "notice": "Emitted if a new plugin repository is registered."
      }
    },
    "kind": "user",
    "methods": {
      "REGISTER_PLUGIN_REPO_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `register` function."
      },
      "UPGRADE_REGISTRY_PERMISSION_ID()": {
        "notice": "The ID of the permission required to call the `_authorizeUpgrade` function."
      },
      "dao()": {
        "notice": "Returns the DAO contract."
      },
      "entries(address)": {
        "notice": "The mapping containing the registry entries returning true for registererd contract addresses."
      },
      "initialize(address)": {
        "notice": "Initializes the contract by setting calling the `InterfaceBasedRegistry` base class initialize method."
      },
      "registerPluginRepo(address)": {
        "notice": "Registers a plugin repository with its address."
      },
      "targetInterfaceId()": {
        "notice": "The [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID that the target contracts being registered must support."
      }
    },
    "notice": "This contract maintains an address-based registery of plugin repositories.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 473,
        "contract": "contracts/factory/plugin/repo/PluginRepoRegistry.sol:PluginRepoRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 476,
        "contract": "contracts/factory/plugin/repo/PluginRepoRegistry.sol:PluginRepoRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 455,
        "contract": "contracts/factory/plugin/repo/PluginRepoRegistry.sol:PluginRepoRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 770,
        "contract": "contracts/factory/plugin/repo/PluginRepoRegistry.sol:PluginRepoRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4751,
        "contract": "contracts/factory/plugin/repo/PluginRepoRegistry.sol:PluginRepoRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11521,
        "contract": "contracts/factory/plugin/repo/PluginRepoRegistry.sol:PluginRepoRegistry",
        "label": "dao_",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IDAO)10475"
      },
      {
        "astId": 11570,
        "contract": "contracts/factory/plugin/repo/PluginRepoRegistry.sol:PluginRepoRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15201,
        "contract": "contracts/factory/plugin/repo/PluginRepoRegistry.sol:PluginRepoRegistry",
        "label": "targetInterfaceId",
        "offset": 0,
        "slot": "201",
        "type": "t_bytes4"
      },
      {
        "astId": 15206,
        "contract": "contracts/factory/plugin/repo/PluginRepoRegistry.sol:PluginRepoRegistry",
        "label": "entries",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15290,
        "contract": "contracts/factory/plugin/repo/PluginRepoRegistry.sol:PluginRepoRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 13494,
        "contract": "contracts/factory/plugin/repo/PluginRepoRegistry.sol:PluginRepoRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IDAO)10475": {
        "encoding": "inplace",
        "label": "contract IDAO",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}